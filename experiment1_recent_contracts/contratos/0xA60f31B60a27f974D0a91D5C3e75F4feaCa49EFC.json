{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Presale369BETS.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ncontract Presale369BETS is Ownable, ReentrancyGuard {\r\n    IERC20 public token;\r\n    \r\n    // Presale parameters\r\n    uint256 public constant PRICE = 36900000000000; // 0.0000369 ETH per token\r\n    uint256 public constant MIN_PURCHASE = 100000000000000000; // 0.1 ETH\r\n    uint256 public constant MAX_CAP = 369 ether; // 369 ETH hard cap\r\n    uint256 public constant EARLY_BONUS_PERCENT = 20; // 20% bonus for early investors\r\n    uint256 public constant WITHDRAWAL_PERIOD = 7 days; // 7 days withdrawal period\r\n    \r\n    uint256 public presaleEndTime;\r\n    uint256 public totalRaised;\r\n    bool public presaleEnded;\r\n    \r\n    struct Investment {\r\n        uint256 amount; // ETH amount\r\n        uint256 tokens; // Token amount\r\n        uint256 timestamp; // Investment timestamp\r\n        bool withdrawn; // If ETH was withdrawn\r\n        bool claimed; // If tokens were claimed\r\n    }\r\n    \r\n    mapping(address => Investment) public investments;\r\n    \r\n    event InvestmentMade(address indexed investor, uint256 amount, uint256 tokens);\r\n    event EthWithdrawn(address indexed investor, uint256 amount);\r\n    event TokensClaimed(address indexed investor, uint256 tokens);\r\n    event PresaleEnded(uint256 totalRaised);\r\n    \r\n    constructor(address initialOwner, address _token, uint256 _presaleDuration) Ownable(initialOwner) {\r\n        token = IERC20(_token);\r\n        presaleEndTime = block.timestamp + _presaleDuration;\r\n    }\r\n    \r\n    // Internal invest function\r\n    function _invest() internal nonReentrant {\r\n        require(!presaleEnded, \"Presale has ended\");\r\n        require(block.timestamp < presaleEndTime, \"Presale period is over\");\r\n        require(msg.value >= MIN_PURCHASE, \"Investment below minimum\");\r\n        require(totalRaised + msg.value <= MAX_CAP, \"Exceeds hard cap\");\r\n        \r\n        uint256 tokenAmount = (msg.value * 10**18) / PRICE;\r\n        uint256 bonus = (tokenAmount * EARLY_BONUS_PERCENT) / 100;\r\n        uint256 totalTokens = tokenAmount + bonus;\r\n        \r\n        // Update or create investment record\r\n        if (investments[msg.sender].amount > 0) {\r\n            investments[msg.sender].amount += msg.value;\r\n            investments[msg.sender].tokens += totalTokens;\r\n            investments[msg.sender].timestamp = block.timestamp; // Reset withdrawal period\r\n        } else {\r\n            investments[msg.sender] = Investment({\r\n                amount: msg.value,\r\n                tokens: totalTokens,\r\n                timestamp: block.timestamp,\r\n                withdrawn: false,\r\n                claimed: false\r\n            });\r\n        }\r\n        \r\n        totalRaised += msg.value;\r\n        \r\n        emit InvestmentMade(msg.sender, msg.value, totalTokens);\r\n    }\r\n    \r\n    // Public invest function\r\n    function invest() external payable {\r\n        _invest();\r\n    }\r\n    \r\n    // Withdraw ETH investment (only available during withdrawal period)\r\n    function withdrawInvestment() external nonReentrant {\r\n        Investment storage investment = investments[msg.sender];\r\n        \r\n        require(investment.amount > 0, \"No investment found\");\r\n        require(!investment.withdrawn, \"Already withdrawn\");\r\n        require(block.timestamp <= investment.timestamp + WITHDRAWAL_PERIOD, \"Withdrawal period expired\");\r\n        \r\n        uint256 amount = investment.amount;\r\n        investment.withdrawn = true;\r\n        totalRaised -= amount;\r\n        \r\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n        \r\n        emit EthWithdrawn(msg.sender, amount);\r\n    }\r\n    \r\n    // Claim tokens after presale ends\r\n    function claimTokens() external nonReentrant {\r\n        require(presaleEnded, \"Presale not ended yet\");\r\n        \r\n        Investment storage investment = investments[msg.sender];\r\n        \r\n        require(investment.amount > 0, \"No investment found\");\r\n        require(!investment.withdrawn, \"Investment was withdrawn\");\r\n        require(!investment.claimed, \"Tokens already claimed\");\r\n        \r\n        investment.claimed = true;\r\n        \r\n        require(token.transfer(msg.sender, investment.tokens), \"Token transfer failed\");\r\n        \r\n        emit TokensClaimed(msg.sender, investment.tokens);\r\n    }\r\n    \r\n    // Complete purchase immediately (skip waiting period)\r\n    function completePurchaseNow() external nonReentrant {\r\n        Investment storage investment = investments[msg.sender];\r\n        \r\n        require(investment.amount > 0, \"No investment found\");\r\n        require(!investment.withdrawn, \"Investment was withdrawn\");\r\n        require(!investment.claimed, \"Tokens already claimed\");\r\n        \r\n        investment.claimed = true;\r\n        \r\n        require(token.transfer(msg.sender, investment.tokens), \"Token transfer failed\");\r\n        \r\n        emit TokensClaimed(msg.sender, investment.tokens);\r\n    }\r\n    \r\n    // End presale (can be called by owner or automatically when hard cap is reached)\r\n    function endPresale() external {\r\n        require(!presaleEnded, \"Presale already ended\");\r\n        require(msg.sender == owner() || block.timestamp >= presaleEndTime || totalRaised >= MAX_CAP, \"Not authorized\");\r\n        \r\n        presaleEnded = true;\r\n        \r\n        emit PresaleEnded(totalRaised);\r\n    }\r\n    \r\n    // Get investor info\r\n    function getInvestorInfo(address investor) external view returns (\r\n        uint256 ethInvested,\r\n        uint256 tokensEarned,\r\n        uint256 purchaseTime,\r\n        bool hasWithdrawn,\r\n        bool hasClaimed,\r\n        bool isWithdrawalActive,\r\n        uint256 remainingTime\r\n    ) {\r\n        Investment memory investment = investments[investor];\r\n        \r\n        ethInvested = investment.amount;\r\n        tokensEarned = investment.tokens;\r\n        purchaseTime = investment.timestamp;\r\n        hasWithdrawn = investment.withdrawn;\r\n        hasClaimed = investment.claimed;\r\n        \r\n        // Check if withdrawal period is still active\r\n        isWithdrawalActive = !investment.withdrawn && \r\n                            !investment.claimed && \r\n                            block.timestamp <= investment.timestamp + WITHDRAWAL_PERIOD;\r\n        \r\n        // Calculate remaining time for withdrawal\r\n        if (isWithdrawalActive) {\r\n            remainingTime = (investment.timestamp + WITHDRAWAL_PERIOD) - block.timestamp;\r\n        } else {\r\n            remainingTime = 0;\r\n        }\r\n    }\r\n    \r\n    // Get presale info\r\n    function getPresaleInfo() external view returns (\r\n        uint256 totalRaisedAmount,\r\n        uint256 maxCap,\r\n        uint256 endTime,\r\n        bool ended,\r\n        bool tokensWithdrawable\r\n    ) {\r\n        totalRaisedAmount = totalRaised;\r\n        maxCap = MAX_CAP;\r\n        endTime = presaleEndTime;\r\n        ended = presaleEnded;\r\n        tokensWithdrawable = presaleEnded;\r\n    }\r\n    \r\n    // Withdraw ETH to owner after presale ends\r\n    function withdrawFunds() external onlyOwner {\r\n        require(presaleEnded, \"Presale not ended\");\r\n        \r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds to withdraw\");\r\n        \r\n        (bool success, ) = payable(owner()).call{value: balance}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n    }\r\n    \r\n    // Fallback function to receive ETH\r\n    receive() external payable {\r\n        if (msg.value >= MIN_PURCHASE && !presaleEnded && block.timestamp < presaleEndTime) {\r\n            _invest();\r\n        }\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}