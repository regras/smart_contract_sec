{{
  "language": "Solidity",
  "sources": {
    "contracts/oracle/error.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\ncontract Error {\n    error FluidOracleError(uint256 errorId_);\n}\n"
    },
    "contracts/oracle/errorTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\nlibrary ErrorTypes {\n    /***********************************|\n    |           FluidOracleL2           | \n    |__________________________________*/\n\n    /// @notice thrown when sequencer on a L2 has an outage and grace period has not yet passed.\n    uint256 internal constant FluidOracleL2__SequencerOutage = 60000;\n\n    /***********************************|\n    |     UniV3CheckCLRSOracle          | \n    |__________________________________*/\n\n    /// @notice thrown when the delta between main price source and check rate source is exceeding the allowed delta\n    uint256 internal constant UniV3CheckCLRSOracle__InvalidPrice = 60001;\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant UniV3CheckCLRSOracle__InvalidParams = 60002;\n\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\n    uint256 internal constant UniV3CheckCLRSOracle__ExchangeRateZero = 60003;\n\n    /***********************************|\n    |           FluidOracle             | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid info name is passed into a fluid oracle (e.g. not set or too long)\n    uint256 internal constant FluidOracle__InvalidInfoName = 60010;\n\n    /***********************************|\n    |            sUSDe Oracle           | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant SUSDeOracle__InvalidParams = 60102;\n\n    /***********************************|\n    |           Pendle Oracle           | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant PendleOracle__InvalidParams = 60201;\n\n    /// @notice thrown when the Pendle market Oracle has not been initialized yet\n    uint256 internal constant PendleOracle__MarketNotInitialized = 60202;\n\n    /// @notice thrown when the Pendle market does not have 18 decimals\n    uint256 internal constant PendleOracle__MarketInvalidDecimals = 60203;\n\n    /// @notice thrown when the Pendle market returns an unexpected price\n    uint256 internal constant PendleOracle__InvalidPrice = 60204;\n\n    /***********************************|\n    |    CLRS2UniV3CheckCLRSOracleL2    | \n    |__________________________________*/\n\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\n    uint256 internal constant CLRS2UniV3CheckCLRSOracleL2__ExchangeRateZero = 60301;\n\n    /***********************************|\n    |    Ratio2xFallbackCLRSOracleL2    | \n    |__________________________________*/\n\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\n    uint256 internal constant Ratio2xFallbackCLRSOracleL2__ExchangeRateZero = 60311;\n\n    /***********************************|\n    |            WeETHsOracle           | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant WeETHsOracle__InvalidParams = 60321;\n\n    /***********************************|\n    |        DexSmartColOracle          | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant DexSmartColOracle__InvalidParams = 60331;\n\n    /// @notice thrown when smart col is not enabled\n    uint256 internal constant DexSmartColOracle__SmartColNotEnabled = 60332;\n\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\n    uint256 internal constant DexSmartColOracle__ExchangeRateZero = 60333;\n\n    /***********************************|\n    |        DexSmartDebtOracle         | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant DexSmartDebtOracle__InvalidParams = 60341;\n\n    /// @notice thrown when smart debt is not enabled\n    uint256 internal constant DexSmartDebtOracle__SmartDebtNotEnabled = 60342;\n\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\n    uint256 internal constant DexSmartDebtOracle__ExchangeRateZero = 60343;\n\n    /***********************************|\n    |            CappedRate           | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant CappedRate__InvalidParams = 60351;\n\n    /// @notice thrown when caller is not authorized\n    uint256 internal constant CappedRate__Unauthorized = 60352;\n\n    /// @notice thrown when minimum diff for triggering update on the stared rate is not reached\n    uint256 internal constant CappedRate__MinUpdateDiffNotReached = 60353;\n\n    /// @notice thrown when the external rate source returns 0 for the new rate\n    uint256 internal constant CappedRate__NewRateZero = 60354;\n\n    /// @notice thrown when the new rate source does not fit in 192 bit storage uint, should never happen.\n    uint256 internal constant CappedRate__StorageOverflow = 60355;\n\n    /***********************************|\n    |            sUSDs Oracle           | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant SUSDsOracle__InvalidParams = 60361;\n\n    /***********************************|\n    |            Peg Oracle             | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant PegOracle__InvalidParams = 60371;\n\n    /***********************************|\n    |              DexOracle            | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant DexOracle__InvalidParams = 60381;\n\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\n    uint256 internal constant DexOracle__ExchangeRateZero = 60382;\n\n    /***********************************|\n    |           GenericOracle           | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant GenericOracle__InvalidParams = 60401;\n\n    /// @notice thrown when reaching an unexepcted config state\n    uint256 internal constant GenericOracle__UnexpectedConfig = 60402;\n\n    /// @notice thrown when the exchange rate is zero\n    uint256 internal constant GenericOracle__RateZero = 60403;\n\n    /***********************************|\n    |          Chainlink Oracle         | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant ChainlinkOracle__InvalidParams = 61001;\n\n    /***********************************|\n    |          UniswapV3 Oracle         | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant UniV3Oracle__InvalidParams = 62001;\n\n    /// @notice thrown when constructor is called with invalid ordered seconds agos values\n    uint256 internal constant UniV3Oracle__InvalidSecondsAgos = 62002;\n\n    /// @notice thrown when constructor is called with invalid delta values > 100%\n    uint256 internal constant UniV3Oracle__InvalidDeltas = 62003;\n\n    /***********************************|\n    |            WstETh Oracle          | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant WstETHOracle__InvalidParams = 63001;\n\n    /***********************************|\n    |           Redstone Oracle         | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant RedstoneOracle__InvalidParams = 64001;\n\n    /***********************************|\n    |          Fallback Oracle          | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant FallbackOracle__InvalidParams = 65001;\n\n    /***********************************|\n    |       FallbackCLRSOracle          | \n    |__________________________________*/\n\n    /// @notice thrown when the exchange rate is zero, even for the fallback oracle source (if enabled)\n    uint256 internal constant FallbackCLRSOracle__ExchangeRateZero = 66001;\n\n    /***********************************|\n    |         WstETHCLRSOracle          | \n    |__________________________________*/\n\n    /// @notice thrown when the exchange rate is zero, even for the fallback oracle source (if enabled)\n    uint256 internal constant WstETHCLRSOracle__ExchangeRateZero = 67001;\n\n    /***********************************|\n    |        CLFallbackUniV3Oracle      | \n    |__________________________________*/\n\n    /// @notice thrown when the exchange rate is zero, even for the uniV3 rate\n    uint256 internal constant CLFallbackUniV3Oracle__ExchangeRateZero = 68001;\n\n    /***********************************|\n    |  WstETHCLRS2UniV3CheckCLRSOracle  | \n    |__________________________________*/\n\n    /// @notice thrown when the exchange rate is zero, even for the uniV3 rate\n    uint256 internal constant WstETHCLRS2UniV3CheckCLRSOracle__ExchangeRateZero = 69001;\n\n    /***********************************|\n    |             WeETh Oracle          | \n    |__________________________________*/\n\n    /// @notice thrown when an invalid parameter is passed to a method\n    uint256 internal constant WeETHOracle__InvalidParams = 70001;\n}\n"
    },
    "contracts/oracle/fluidOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\nimport { IFluidOracle } from \"./interfaces/iFluidOracle.sol\";\nimport { ErrorTypes } from \"./errorTypes.sol\";\nimport { Error as OracleError } from \"./error.sol\";\n\n/// @title   FluidOracle\n/// @notice  Base contract that any Fluid Oracle must implement\nabstract contract FluidOracle is IFluidOracle, OracleError {\n    /// @dev short helper string to easily identify the oracle. E.g. token symbols\n    //\n    // using a bytes32 because string can not be immutable.\n    bytes32 private immutable _infoName;\n\n    /// @dev target decimals of the oracle when scaling to 1e27. E.g. for ETH / USDC it would be 15\n    /// because diff of ETH decimals to 1e27 is 9, and USDC has 6 decimals, so 6+9 = 15, e.g. 2029,047772120364926\n    /// For USDC / ETH: 21 + 18 = 39, e.g. 0,000492842018675092636829357843847601646\n    uint8 private immutable _targetDecimals;\n\n    constructor(string memory infoName_, uint8 targetDecimals_) {\n        if (bytes(infoName_).length > 32 || bytes(infoName_).length == 0) {\n            revert FluidOracleError(ErrorTypes.FluidOracle__InvalidInfoName);\n        }\n\n        if (targetDecimals_ < 15 || targetDecimals_ > 39) {\n            revert FluidOracleError(ErrorTypes.GenericOracle__InvalidParams);\n        }\n        _targetDecimals = targetDecimals_;\n\n        // convert string to bytes32\n        bytes32 infoNameBytes32_;\n        assembly {\n            infoNameBytes32_ := mload(add(infoName_, 32))\n        }\n        _infoName = infoNameBytes32_;\n    }\n\n    /// @inheritdoc IFluidOracle\n    function targetDecimals() external view returns (uint8) {\n        return _targetDecimals;\n    }\n\n    /// @inheritdoc IFluidOracle\n    function infoName() external view returns (string memory) {\n        // convert bytes32 to string\n        uint256 length_;\n        while (length_ < 32 && _infoName[length_] != 0) {\n            length_++;\n        }\n        bytes memory infoNameBytes_ = new bytes(length_);\n        for (uint256 i; i < length_; i++) {\n            infoNameBytes_[i] = _infoName[i];\n        }\n        return string(infoNameBytes_);\n    }\n\n    /// @inheritdoc IFluidOracle\n    function getExchangeRate() external view virtual returns (uint256 exchangeRate_);\n\n    /// @inheritdoc IFluidOracle\n    function getExchangeRateOperate() external view virtual returns (uint256 exchangeRate_);\n\n    /// @inheritdoc IFluidOracle\n    function getExchangeRateLiquidate() external view virtual returns (uint256 exchangeRate_);\n}\n"
    },
    "contracts/oracle/interfaces/external/IChainlinkAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\n/// from https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\n/// Copyright (c) 2018 SmartContract ChainLink, Ltd.\n\ninterface IChainlinkAggregatorV3 {\n    /// @notice represents the number of decimals the aggregator responses represent.\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/oracle/interfaces/iFluidCappedRate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\nimport { IFluidOracle } from \"./iFluidOracle.sol\";\n\ninterface IFluidCappedRate is IFluidOracle {\n    /// @notice Get the operate() exchange rate for debt asset side, with no cap upwards and capped decrease\n    function getExchangeRateOperateDebt() external view returns (uint256 exchangeRate_);\n\n    /// @notice Get the liquidate() exchange rate for debt asset side, with max APR cap upwards, and capped decrease\n    function getExchangeRateLiquidateDebt() external view returns (uint256 exchangeRate_);\n\n    /// @notice Retrieves the center price for use in a Fluid dex pool\n    /// @dev This function is marked as non-constant (potentially state-changing) to allow flexibility in price fetching mechanisms.\n    ///      While typically used as a read-only operation, this design permits write operations if needed for certain token pairs\n    ///      (e.g., fetching up-to-date exchange rates that may require state changes).\n    /// @return price_ The current price ratio of token1 to token0, expressed with 27 decimal places\n    function centerPrice() external returns (uint256 price_);\n}\n"
    },
    "contracts/oracle/interfaces/iFluidOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\ninterface IFluidOracle {\n    /// @dev Deprecated. Use `getExchangeRateOperate()` and `getExchangeRateLiquidate()` instead. Only implemented for\n    ///      backwards compatibility.\n    function getExchangeRate() external view returns (uint256 exchangeRate_);\n\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for operates\n    function getExchangeRateOperate() external view returns (uint256 exchangeRate_);\n\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for liquidations\n    function getExchangeRateLiquidate() external view returns (uint256 exchangeRate_);\n\n    /// @notice helper string to easily identify the oracle. E.g. token symbols\n    function infoName() external view returns (string memory);\n\n    /// @notice target decimals of the returned oracle rate when scaling to 1e27. E.g. for ETH / USDC it would be 15\n    /// because diff of ETH decimals to 1e27 is 9, and USDC has 6 decimals, so 6+9 = 15, e.g. 2029,047772120364926\n    /// For USDC / ETH: 21 + 18 = 39, e.g. 0,000492842018675092636829357843847601646\n    function targetDecimals() external view returns (uint8);\n}\n"
    },
    "contracts/oracle/libraries/oracleUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\n/// @title Oracle utils library\n/// @notice implements common utility methods for Fluid Oracles\nlibrary OracleUtils {\n    /// @dev The scaler for max delta point math (100%)\n    uint256 internal constant HUNDRED_PERCENT_DELTA_SCALER = 10_000;\n    /// @dev output precision of rates\n    uint256 internal constant RATE_OUTPUT_DECIMALS = 27;\n\n    /// @dev checks if `mainSourceRate_` is within a `maxDeltaPercent_` of `checkSourceRate_`. Returns true if so.\n    function isRateOutsideDelta(\n        uint256 mainSourceRate_,\n        uint256 checkSourceRate_,\n        uint256 maxDeltaPercent_\n    ) internal pure returns (bool) {\n        uint256 offset_ = (checkSourceRate_ * maxDeltaPercent_) / HUNDRED_PERCENT_DELTA_SCALER;\n        return (mainSourceRate_ > (checkSourceRate_ + offset_) || mainSourceRate_ < (checkSourceRate_ - offset_));\n    }\n}\n"
    },
    "contracts/oracle/oracles/genericOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\nimport { FluidOracle } from \"../fluidOracle.sol\";\nimport { FluidGenericOracleBase } from \"./genericOracleBase.sol\";\n\n/// @notice generic configurable Oracle\n/// combines up to 4 hops from sources such as\n///  - an existing IFluidOracle (e.g. ContractRate)\n///  - Redstone\n///  - Chainlink\ncontract FluidGenericOracle is FluidOracle, FluidGenericOracleBase {\n    constructor(\n        string memory infoName_,\n        uint8 targetDecimals_,\n        OracleHopSource[] memory sources_\n    ) FluidOracle(infoName_, targetDecimals_) FluidGenericOracleBase(sources_) {}\n\n    /// @inheritdoc FluidOracle\n    function getExchangeRateOperate() public view virtual override returns (uint256 exchangeRate_) {\n        exchangeRate_ = _getHopsExchangeRate(true);\n    }\n\n    /// @inheritdoc FluidOracle\n    function getExchangeRateLiquidate() public view virtual override returns (uint256 exchangeRate_) {\n        exchangeRate_ = _getHopsExchangeRate(false);\n    }\n\n    /// @inheritdoc FluidOracle\n    function getExchangeRate() public view virtual override returns (uint256 exchangeRate_) {\n        exchangeRate_ = _getHopsExchangeRate(false);\n    }\n}\n"
    },
    "contracts/oracle/oracles/genericOracleBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\nimport { ErrorTypes } from \"../errorTypes.sol\";\nimport { Error as OracleError } from \"../error.sol\";\nimport { ChainlinkSourceReader } from \"../sourceReaders/chainlinkSourceReader.sol\";\nimport { FluidSourceReader } from \"../sourceReaders/fluidSourceReader.sol\";\nimport { FluidDebtSourceReader } from \"../sourceReaders/fluidDebtSourceReader.sol\";\nimport { OracleUtils } from \"../libraries/oracleUtils.sol\";\n\nabstract contract GenericOracleStructs {\n    enum SourceType {\n        Fluid, // 0, e.g. FluidCappedRate col asset side or some other IFluidOracle\n        Redstone, // 1\n        Chainlink, // 2\n        UniV3Checked, // 3\n        FluidDebt // 4 FluidCappedRate debt asset side methods\n        // DO NOT add a rate source like ERC4626 here, any external contract source should ALWAYS be filtered through a FluidCappedRate contract\n    }\n\n    struct OracleHopSource {\n        address source;\n        bool invertRate;\n        uint256 multiplier;\n        uint256 divisor;\n        SourceType sourceType; // e.g. FLUID, REDSTONE, UNIV3CHECKED, CHAINLINK\n    }\n}\n\n/// @notice generic configurable Oracle Base\n/// combines up to 4 hops from sources such as\n///  - an existing IFluidOracle (e.g. ContractRate)\n///  - Redstone\n///  - Chainlink\nabstract contract FluidGenericOracleBase is\n    OracleError,\n    GenericOracleStructs,\n    ChainlinkSourceReader,\n    FluidSourceReader,\n    FluidDebtSourceReader\n{\n    address internal immutable _SOURCE1;\n    bool internal immutable _SOURCE1_INVERT;\n    uint256 internal immutable _SOURCE1_MULTIPLIER;\n    uint256 internal immutable _SOURCE1_DIVISOR;\n    SourceType internal immutable _SOURCE1_TYPE;\n\n    address internal immutable _SOURCE2;\n    bool internal immutable _SOURCE2_INVERT;\n    uint256 internal immutable _SOURCE2_MULTIPLIER;\n    uint256 internal immutable _SOURCE2_DIVISOR;\n    SourceType internal immutable _SOURCE2_TYPE;\n\n    address internal immutable _SOURCE3;\n    bool internal immutable _SOURCE3_INVERT;\n    uint256 internal immutable _SOURCE3_MULTIPLIER;\n    uint256 internal immutable _SOURCE3_DIVISOR;\n    SourceType internal immutable _SOURCE3_TYPE;\n\n    address internal immutable _SOURCE4;\n    bool internal immutable _SOURCE4_INVERT;\n    uint256 internal immutable _SOURCE4_MULTIPLIER;\n    uint256 internal immutable _SOURCE4_DIVISOR;\n    SourceType internal immutable _SOURCE4_TYPE;\n\n    address internal immutable _SOURCE5;\n    bool internal immutable _SOURCE5_INVERT;\n    uint256 internal immutable _SOURCE5_MULTIPLIER;\n    uint256 internal immutable _SOURCE5_DIVISOR;\n    SourceType internal immutable _SOURCE5_TYPE;\n\n    constructor(OracleHopSource[] memory sources_) {\n        if (sources_.length == 0 || sources_.length > 5) {\n            revert FluidOracleError(ErrorTypes.GenericOracle__InvalidParams);\n        }\n\n        _verifyOracleHopSource(sources_[0]);\n        _SOURCE1 = sources_[0].source;\n        _SOURCE1_INVERT = sources_[0].invertRate;\n        _SOURCE1_MULTIPLIER = sources_[0].multiplier;\n        _SOURCE1_DIVISOR = sources_[0].divisor;\n        _SOURCE1_TYPE = sources_[0].sourceType;\n\n        if (sources_.length > 1) {\n            _verifyOracleHopSource(sources_[1]);\n            _SOURCE2 = sources_[1].source;\n            _SOURCE2_INVERT = sources_[1].invertRate;\n            _SOURCE2_MULTIPLIER = sources_[1].multiplier;\n            _SOURCE2_DIVISOR = sources_[1].divisor;\n            _SOURCE2_TYPE = sources_[1].sourceType;\n        }\n\n        if (sources_.length > 2) {\n            _verifyOracleHopSource(sources_[2]);\n            _SOURCE3 = sources_[2].source;\n            _SOURCE3_INVERT = sources_[2].invertRate;\n            _SOURCE3_MULTIPLIER = sources_[2].multiplier;\n            _SOURCE3_DIVISOR = sources_[2].divisor;\n            _SOURCE3_TYPE = sources_[2].sourceType;\n        }\n\n        if (sources_.length > 3) {\n            _verifyOracleHopSource(sources_[3]);\n            _SOURCE4 = sources_[3].source;\n            _SOURCE4_INVERT = sources_[3].invertRate;\n            _SOURCE4_MULTIPLIER = sources_[3].multiplier;\n            _SOURCE4_DIVISOR = sources_[3].divisor;\n            _SOURCE4_TYPE = sources_[3].sourceType;\n        }\n\n        if (sources_.length > 4) {\n            _verifyOracleHopSource(sources_[4]);\n            _SOURCE5 = sources_[4].source;\n            _SOURCE5_INVERT = sources_[4].invertRate;\n            _SOURCE5_MULTIPLIER = sources_[4].multiplier;\n            _SOURCE5_DIVISOR = sources_[4].divisor;\n            _SOURCE5_TYPE = sources_[4].sourceType;\n        }\n    }\n\n    /// @dev verifies a hop source config\n    function _verifyOracleHopSource(OracleHopSource memory source_) internal view virtual {\n        if (\n            address(source_.source) == address(0) ||\n            source_.sourceType == SourceType.UniV3Checked ||\n            source_.divisor == 0 ||\n            source_.multiplier == 0 ||\n            source_.divisor > 1e40 ||\n            source_.multiplier > 1e40\n        ) {\n            revert FluidOracleError(ErrorTypes.GenericOracle__InvalidParams);\n        }\n    }\n\n    /// @dev reads the exchange rate for a hop source\n    function _readSource(\n        address source_,\n        SourceType sourceType_,\n        bool isOperate_\n    ) internal view virtual returns (uint256 rate_) {\n        if (sourceType_ == SourceType.Redstone || sourceType_ == SourceType.Chainlink) {\n            rate_ = _readChainlinkSource(source_);\n        } else if (sourceType_ == SourceType.Fluid) {\n            rate_ = _readFluidSource(source_, isOperate_);\n        } else if (sourceType_ == SourceType.FluidDebt) {\n            rate_ = _readFluidDebtSource(source_, isOperate_);\n        } else {\n            // should never happen because of config checks in constructor\n            revert FluidOracleError(ErrorTypes.GenericOracle__UnexpectedConfig);\n        }\n    }\n\n    /// @dev gets the exchange rate for a single configured hop\n    function _getExchangeRateForHop(\n        uint256 curHopsRate_,\n        bool isOperate_,\n        OracleHopSource memory source_\n    ) internal view virtual returns (uint256 rate_) {\n        rate_ = _readSource(source_.source, source_.sourceType, isOperate_);\n\n        // scale to 1e27\n        rate_ = (rate_ * source_.multiplier) / source_.divisor;\n\n        if (source_.invertRate && rate_ > 0) {\n            rate_ = (10 ** (OracleUtils.RATE_OUTPUT_DECIMALS * 2)) / uint256(rate_);\n        }\n\n        rate_ = (curHopsRate_ * rate_) / (10 ** OracleUtils.RATE_OUTPUT_DECIMALS); // combine with current hops rate\n    }\n\n    /// @dev gets the exchange rate combined for all configured hops\n    function _getHopsExchangeRate(bool isOperate_) internal view returns (uint256 rate_) {\n        rate_ = _getExchangeRateForHop(\n            (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n            isOperate_,\n            OracleHopSource(_SOURCE1, _SOURCE1_INVERT, _SOURCE1_MULTIPLIER, _SOURCE1_DIVISOR, _SOURCE1_TYPE)\n        );\n        if (rate_ == 0) {\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\n        }\n        if (address(_SOURCE2) == address(0) && _SOURCE2_TYPE != SourceType.UniV3Checked) {\n            return rate_;\n        }\n\n        // 2 hops -> return rate of hop 1 combined with hop 2\n        rate_ = _getExchangeRateForHop(\n            rate_,\n            isOperate_,\n            OracleHopSource(_SOURCE2, _SOURCE2_INVERT, _SOURCE2_MULTIPLIER, _SOURCE2_DIVISOR, _SOURCE2_TYPE)\n        );\n        if (rate_ == 0) {\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\n        }\n        if (address(_SOURCE3) == address(0) && _SOURCE3_TYPE != SourceType.UniV3Checked) {\n            return rate_;\n        }\n\n        // 3 hops -> return rate of hop 1 combined with hop 2 & hop 3\n        rate_ = _getExchangeRateForHop(\n            rate_,\n            isOperate_,\n            OracleHopSource(_SOURCE3, _SOURCE3_INVERT, _SOURCE3_MULTIPLIER, _SOURCE3_DIVISOR, _SOURCE3_TYPE)\n        );\n        if (rate_ == 0) {\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\n        }\n        if (address(_SOURCE4) == address(0) && _SOURCE4_TYPE != SourceType.UniV3Checked) {\n            return rate_;\n        }\n\n        // 4 hops -> return rate of hop 1 combined with hop 2, hop 3 & hop 4\n        rate_ = _getExchangeRateForHop(\n            rate_,\n            isOperate_,\n            OracleHopSource(_SOURCE4, _SOURCE4_INVERT, _SOURCE4_MULTIPLIER, _SOURCE4_DIVISOR, _SOURCE4_TYPE)\n        );\n        if (rate_ == 0) {\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\n        }\n        if (address(_SOURCE5) == address(0) && _SOURCE5_TYPE != SourceType.UniV3Checked) {\n            return rate_;\n        }\n\n        // 5 hops -> return rate of hop 1 combined with hop 2, hop 3, hop 4 & hop 5\n        rate_ = _getExchangeRateForHop(\n            rate_,\n            isOperate_,\n            OracleHopSource(_SOURCE5, _SOURCE5_INVERT, _SOURCE5_MULTIPLIER, _SOURCE5_DIVISOR, _SOURCE5_TYPE)\n        );\n        if (rate_ == 0) {\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\n        }\n    }\n\n    /// @notice Returns the exchange rate for each hop.\n    /// @return rateSource1Operate_ The exchange rate for hop 1 during operate.\n    /// @return rateSource1Liquidate_ The exchange rate for hop 1 during liquidate.\n    /// @return rateSource2Operate_ The exchange rate for hop 2 during operate.\n    /// @return rateSource2Liquidate_ The exchange rate for hop 2 during liquidate.\n    /// @return rateSource3Operate_ The exchange rate for hop 3 during operate.\n    /// @return rateSource3Liquidate_ The exchange rate for hop 3 during liquidate.\n    /// @return rateSource4Operate_ The exchange rate for hop 4 during operate.\n    /// @return rateSource4Liquidate_ The exchange rate for hop 4 during liquidate.\n    /// @return rateSource5Operate_ The exchange rate for hop 5 during operate.\n    /// @return rateSource5Liquidate_ The exchange rate for hop 5 during liquidate.\n    function getHopExchangeRates()\n        public\n        view\n        returns (\n            uint256 rateSource1Operate_,\n            uint256 rateSource1Liquidate_,\n            uint256 rateSource2Operate_,\n            uint256 rateSource2Liquidate_,\n            uint256 rateSource3Operate_,\n            uint256 rateSource3Liquidate_,\n            uint256 rateSource4Operate_,\n            uint256 rateSource4Liquidate_,\n            uint256 rateSource5Operate_,\n            uint256 rateSource5Liquidate_\n        )\n    {\n        rateSource1Operate_ = _getExchangeRateForHop(\n            (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n            true,\n            OracleHopSource(_SOURCE1, _SOURCE1_INVERT, _SOURCE1_MULTIPLIER, _SOURCE1_DIVISOR, _SOURCE1_TYPE)\n        );\n        rateSource1Liquidate_ = _getExchangeRateForHop(\n            (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n            false,\n            OracleHopSource(_SOURCE1, _SOURCE1_INVERT, _SOURCE1_MULTIPLIER, _SOURCE1_DIVISOR, _SOURCE1_TYPE)\n        );\n\n        if (address(_SOURCE2) != address(0) || _SOURCE2_TYPE == SourceType.UniV3Checked) {\n            rateSource2Operate_ = _getExchangeRateForHop(\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n                true,\n                OracleHopSource(_SOURCE2, _SOURCE2_INVERT, _SOURCE2_MULTIPLIER, _SOURCE2_DIVISOR, _SOURCE2_TYPE)\n            );\n            rateSource2Liquidate_ = _getExchangeRateForHop(\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n                false,\n                OracleHopSource(_SOURCE2, _SOURCE2_INVERT, _SOURCE2_MULTIPLIER, _SOURCE2_DIVISOR, _SOURCE2_TYPE)\n            );\n        }\n\n        if (address(_SOURCE3) != address(0) || _SOURCE3_TYPE == SourceType.UniV3Checked) {\n            rateSource3Operate_ = _getExchangeRateForHop(\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n                true,\n                OracleHopSource(_SOURCE3, _SOURCE3_INVERT, _SOURCE3_MULTIPLIER, _SOURCE3_DIVISOR, _SOURCE3_TYPE)\n            );\n            rateSource3Liquidate_ = _getExchangeRateForHop(\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n                false,\n                OracleHopSource(_SOURCE3, _SOURCE3_INVERT, _SOURCE3_MULTIPLIER, _SOURCE3_DIVISOR, _SOURCE3_TYPE)\n            );\n        }\n\n        if (address(_SOURCE4) != address(0) || _SOURCE4_TYPE == SourceType.UniV3Checked) {\n            rateSource4Operate_ = _getExchangeRateForHop(\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n                true,\n                OracleHopSource(_SOURCE4, _SOURCE4_INVERT, _SOURCE4_MULTIPLIER, _SOURCE4_DIVISOR, _SOURCE4_TYPE)\n            );\n            rateSource4Liquidate_ = _getExchangeRateForHop(\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n                false,\n                OracleHopSource(_SOURCE4, _SOURCE4_INVERT, _SOURCE4_MULTIPLIER, _SOURCE4_DIVISOR, _SOURCE4_TYPE)\n            );\n        }\n\n        if (address(_SOURCE5) != address(0) || _SOURCE5_TYPE == SourceType.UniV3Checked) {\n            rateSource5Operate_ = _getExchangeRateForHop(\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n                true,\n                OracleHopSource(_SOURCE5, _SOURCE5_INVERT, _SOURCE5_MULTIPLIER, _SOURCE5_DIVISOR, _SOURCE5_TYPE)\n            );\n            rateSource5Liquidate_ = _getExchangeRateForHop(\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\n                false,\n                OracleHopSource(_SOURCE5, _SOURCE5_INVERT, _SOURCE5_MULTIPLIER, _SOURCE5_DIVISOR, _SOURCE5_TYPE)\n            );\n        }\n    }\n\n    /// @notice Returns the configured OracleHopSources\n    function getOracleHopSources() public view returns (OracleHopSource[] memory sources_) {\n        sources_ = new OracleHopSource[](5);\n        sources_[0] = OracleHopSource(_SOURCE1, _SOURCE1_INVERT, _SOURCE1_MULTIPLIER, _SOURCE1_DIVISOR, _SOURCE1_TYPE);\n        sources_[1] = OracleHopSource(_SOURCE2, _SOURCE2_INVERT, _SOURCE2_MULTIPLIER, _SOURCE2_DIVISOR, _SOURCE2_TYPE);\n        sources_[2] = OracleHopSource(_SOURCE3, _SOURCE3_INVERT, _SOURCE3_MULTIPLIER, _SOURCE3_DIVISOR, _SOURCE3_TYPE);\n        sources_[3] = OracleHopSource(_SOURCE4, _SOURCE4_INVERT, _SOURCE4_MULTIPLIER, _SOURCE4_DIVISOR, _SOURCE4_TYPE);\n        sources_[4] = OracleHopSource(_SOURCE5, _SOURCE5_INVERT, _SOURCE5_MULTIPLIER, _SOURCE5_DIVISOR, _SOURCE5_TYPE);\n    }\n}\n"
    },
    "contracts/oracle/sourceReaders/chainlinkSourceReader.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\nimport { IChainlinkAggregatorV3 } from \"../interfaces/external/IChainlinkAggregatorV3.sol\";\n\nabstract contract ChainlinkSourceReader {\n    function _readChainlinkSource(address feed_) internal view returns (uint256 rate_) {\n        try IChainlinkAggregatorV3(feed_).latestRoundData() returns (\n            uint80,\n            int256 exchangeRate_,\n            uint256,\n            uint256,\n            uint80\n        ) {\n            // Return the price in `OracleUtils.RATE_OUTPUT_DECIMALS`\n            return uint256(exchangeRate_);\n        } catch {}\n    }\n}\n"
    },
    "contracts/oracle/sourceReaders/fluidDebtSourceReader.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\nimport { IFluidCappedRate } from \"../interfaces/iFluidCappedRate.sol\";\n\nabstract contract FluidDebtSourceReader {\n    function _readFluidDebtSource(address oracle_, bool isOperate_) internal view returns (uint256 rate_) {\n        if (isOperate_) {\n            try IFluidCappedRate(oracle_).getExchangeRateOperateDebt() returns (uint256 exchangeRate_) {\n                return exchangeRate_;\n            } catch {}\n        } else {\n            try IFluidCappedRate(oracle_).getExchangeRateLiquidateDebt() returns (uint256 exchangeRate_) {\n                return exchangeRate_;\n            } catch {}\n        }\n    }\n}\n"
    },
    "contracts/oracle/sourceReaders/fluidSourceReader.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.21;\n\nimport { IFluidOracle } from \"../interfaces/iFluidOracle.sol\";\n\nabstract contract FluidSourceReader {\n    function _readFluidSource(address oracle_, bool isOperate_) internal view returns (uint256 rate_) {\n        if (isOperate_) {\n            try IFluidOracle(oracle_).getExchangeRateOperate() returns (uint256 exchangeRate_) {\n                return exchangeRate_;\n            } catch {}\n        } else {\n            try IFluidOracle(oracle_).getExchangeRateLiquidate() returns (uint256 exchangeRate_) {\n                return exchangeRate_;\n            } catch {}\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000000
    },
    "evmVersion": "paris",
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}