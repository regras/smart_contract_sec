{{
  "language": "Solidity",
  "sources": {
    "contracts/edms/edma.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: Mainnet/EDMANew.sol\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract EDMA is IERC20, Ownable {\r\n    struct VestingSchedule {\r\n        uint256 totalLocked;\r\n        uint256 totalReleased;\r\n        bool isFirstReleased;\r\n    }\r\n    uint256 public constant VESTING_INTERVAL = 90 days;  // 7776000;\r\n\r\n    string private constant _NAME = \"EDMA\";\r\n    string private constant _SYMBOL = \"EDM\";\r\n    uint8 private constant _DECIMALS = 18;\r\n    uint256 private _totalSupply = 500_000_000 * 10 ** _DECIMALS;\r\n\r\n    bool public  presaleActive = true;\r\n    uint256 public  presaleEndTime;\r\n    address public presaleAddress;\r\n\r\n    modifier onlyPresale() {\r\n        require(presaleAddress == _msgSender(), \"EDMA: caller is not the presale\");\r\n        _;\r\n    }\r\n\r\n    modifier activePresale() {\r\n        require(presaleActive, \"EDMA: presale already ended.\");\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address addressToCheck) {\r\n        require(addressToCheck != address(0), \"EDMA: Address must not be zero\");\r\n        _;\r\n    }\r\n\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => VestingSchedule) public vesting;\r\n    mapping(address => bool) public excludedFromVesting;\r\n    \r\n    \r\n    \r\n\r\n    event Burned(address indexed from, uint256 amount);\r\n    event TokensRecovered(address token, address recipient, uint256 amount);\r\n    event ETHRecovered(address recipient, uint256 amount);\r\n    event TokensVested(address indexed beneficiary, uint256 amount);\r\n    event Received(address sender, uint256 value);\r\n    event PresaleAddressUpdated(address oldAddress, address newAddress);\r\n    event PresaleEnded(uint256 presaleEndTime);\r\n    event ExclusionFromVestingUpdated(address addr, bool value);\r\n    \r\n\r\n    constructor() {\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    // Fallback to receive ETH\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    // Token Information\r\n    function name() public pure returns (string memory) {\r\n        return _NAME;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _SYMBOL;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _DECIMALS;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(amount > 0 && _balances[msg.sender] >= amount, \"Invalid token amount\");\r\n        checkIfCanSpend(msg.sender, amount);\r\n        _balances[msg.sender] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Burned(msg.sender, amount);\r\n    }\r\n\r\n    function transferAndVest(address recipient, uint256 amount) external onlyPresale activePresale validAddress(recipient) returns (bool) {\r\n        require(balanceOf(msg.sender) >= amount, \"Insufficient balance\");\r\n        if(vesting[recipient].totalLocked == 0) {\r\n            vesting[recipient] = VestingSchedule(amount, 0, false);\r\n        } else {\r\n            vesting[recipient].totalLocked =  vesting[recipient].totalLocked + amount;\r\n        }\r\n        emit TokensVested(recipient, amount);\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function calculateUnlockableAmount(address sender) public view  returns (uint256 toUnlockAmount) {\r\n        // presale active so no tokens unlockable\r\n        if(presaleActive) {\r\n            return  0;\r\n        }\r\n\r\n        // if presale ended, check vesting details\r\n        VestingSchedule storage vs = vesting[sender];\r\n        if(vs.totalLocked == 0 || vs.totalLocked <= vs.totalReleased) {\r\n            return 0;\r\n        }\r\n        if(vs.isFirstReleased && block.timestamp < presaleEndTime + VESTING_INTERVAL) {\r\n            return  0;\r\n        }\r\n        uint256 intervalPassed = ((block.timestamp - presaleEndTime) / VESTING_INTERVAL);\r\n\r\n        if(!vs.isFirstReleased && intervalPassed == 0) {\r\n            intervalPassed = 1; // released 20% with presale end date even if 90day didn't passed.\r\n        } else if(intervalPassed >= 1) {\r\n            intervalPassed = intervalPassed+1; // considering intial release for 1st interval.\r\n        }\r\n        if(intervalPassed > 5) { intervalPassed = 5; }  // max 5 (5x20% = 100%)\r\n\r\n        // total amount that must have release by now from presale end time.\r\n        uint256 totalReleasable  = (vs.totalLocked * (intervalPassed * 20)) / 100;\r\n        uint256 currentReleasable = totalReleasable - vs.totalReleased;\r\n        if(currentReleasable == 0) {\r\n            return 0;\r\n        }\r\n        if(currentReleasable > vs.totalLocked - vs.totalReleased) {\r\n            return vs.totalLocked - vs.totalReleased;\r\n        }\r\n        return currentReleasable;\r\n    }\r\n\r\n    // set Presale address control\r\n    function setPresale(address newPresaleAddress) external onlyOwner activePresale validAddress(newPresaleAddress) {\r\n        emit PresaleAddressUpdated(presaleAddress, newPresaleAddress);\r\n        presaleAddress = newPresaleAddress;\r\n    }\r\n\r\n    // mark presale end\r\n    function endPresale() external onlyOwner activePresale returns (bool){\r\n        presaleActive = false;\r\n        presaleEndTime = block.timestamp;\r\n        emit PresaleEnded(presaleEndTime);\r\n        return true;\r\n    }\r\n\r\n    // Method to setVesting exlusion\r\n    function setExcludedFromVesting(address addr, bool excluded) external onlyOwner {\r\n        excludedFromVesting[addr] = excluded;\r\n        emit ExclusionFromVestingUpdated(addr, excluded);\r\n    }\r\n\r\n    // ERC20 functions\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // Utility functions\r\n    function recoverStuckTokens(address token, address recipient, uint256 amount) external onlyOwner validAddress(recipient) {\r\n        require(IERC20(token).transfer(recipient, amount), \"EDMA: Token recovery failed\");\r\n        emit TokensRecovered(token, recipient, amount);\r\n    }\r\n\r\n    function recoverStuckETH(address recipient) external onlyOwner validAddress(recipient) {\r\n        uint256 balnce = address(this).balance;\r\n        require(balnce > 0, \"EDMA: No ETH to recover\");\r\n        payable(recipient).transfer(balnce);\r\n        emit ETHRecovered(recipient, balnce);\r\n    }\r\n\r\n    function checkIfCanSpend(address sender, uint256 amount) internal {\r\n        uint256 toRelease = calculateUnlockableAmount(sender);\r\n        if (toRelease > 0) {\r\n            vesting[sender].totalReleased = vesting[sender].totalReleased + toRelease;\r\n        }\r\n        \r\n        uint256 lockedBalance = vesting[sender].totalLocked - vesting[sender].totalReleased;\r\n        if(lockedBalance > 0) {\r\n            require(amount <= balanceOf(sender) - lockedBalance, \"Amount exceeds unlocked balance\");\r\n            if(!vesting[sender].isFirstReleased && !presaleActive) {\r\n                vesting[sender].isFirstReleased = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Internal functions\r\n    function _transfer(address sender, address recipient, uint256 amount) internal validAddress(recipient) validAddress(sender) {\r\n        uint256 totalVestingPeriod = (5 * VESTING_INTERVAL) + 60 ; //1 minute extra for precaution; \r\n\r\n        // only check locked balance if presale active or the vesting period is ongoing.\r\n        if(presaleActive || block.timestamp <=  totalVestingPeriod + presaleEndTime) {\r\n            if(amount > 0 && !excludedFromVesting[sender]) {\r\n                checkIfCanSpend(sender, amount);\r\n            }\r\n        }\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal validAddress(owner) validAddress(spender) {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}