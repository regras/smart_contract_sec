{{
  "language": "Vyper",
  "sources": {
    "src/interfaces/ICurveCryptoPool.vyi": {
      "content": "# @version 0.4.1\n\n\n@external\n@view\ndef price_oracle() -> uint256:\n    ...\n\n\n@external\ndef exchange(\n    i: uint256,\n    j: uint256,\n    _dx: uint256,\n    _min_dy: uint256,\n) -> uint256:\n    ...\n",
      "sha256sum": "9aac548b2937ed254e194816df7043da5c9c08f63986d0a16787bf77a85ff992"
    },
    "src/interfaces/AggregatorV3Interface.vyi": {
      "content": "# @version 0.4.1\n\n\n# ============================================================================================\n# View functions\n# ============================================================================================\n\n\n@external\n@pure\ndef decimals() -> uint8:\n    \"\"\"\n    @notice Returns the number of decimals used by the price feed.\n    \"\"\"\n    ...\n\n\n@external\n@pure\ndef version() -> uint256:\n    \"\"\"\n    @notice Returns the version of the price feed.\n    \"\"\"\n    ...\n\n\n@external\n@pure\ndef description() -> String[18]:\n    \"\"\"\n    @notice Returns a description of the price feed.\n    \"\"\"\n    ...\n\n\n@external\n@view\ndef latestRoundData() -> (uint80, int256, uint256, uint256, uint80):\n    \"\"\"\n    @notice Returns the latest round data from the price feed\n    @return The round ID\n    @return The price of ASF in USD\n    @return The timestamp of the start of the round\n    @return The timestamp of the last update\n    @return The round ID in which the price was answered\n    \"\"\"\n    ...\n\n\n@external\n@view\ndef latestAnswer() -> int256:\n    \"\"\"\n    @notice Returns the latest price from the price feed\n    @return The price of ASF in USD\n    \"\"\"\n    ...\n",
      "sha256sum": "fc9a454d8233ea10a5f817da8b002b99f2f4c9e087af66a981d9fa5a8a18d0db"
    },
    "src/sanity.vy": {
      "content": "# @version 0.4.1\n\n\"\"\"\n@title ASF/USD Price Feed\n@license MIT\n@author asymmetry.finance (johnnyonline)\n@notice\n    price_feed.vy is used to fetch the price of ASF/USD from Curve and Chainlink oracles.\n\"\"\"\n\nfrom interfaces import ICurveCryptoPool\nfrom interfaces import AggregatorV3Interface\n\n\n# ============================================================================================\n# Interfaces\n# ============================================================================================\n\n\nimplements: AggregatorV3Interface\n\n\n# ============================================================================================\n# Constants\n# ============================================================================================\n\n\nCL_DECIMALS_DIFF: constant(uint256) = 10**8\nETH_USD_CL_HEARTBEAT: constant(uint256) = 3600\n\nCURVE_POOL: public(constant(ICurveCryptoPool)) = ICurveCryptoPool(\n    0x3D0d331390D14DF42c16FC20700F7e6Ad4849c50\n)\nETH_USD_CL_PRICE_FEED: public(\n    constant(AggregatorV3Interface)\n) = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419)\n\n\n# ============================================================================================\n# Constructor\n# ============================================================================================\n\n\n@deploy\ndef __init__():\n    assert (\n        staticcall ETH_USD_CL_PRICE_FEED.decimals() == 8\n    )  # assuming this will always be true\n\n\n# ============================================================================================\n# View functions\n# ============================================================================================\n\n\n@external\n@pure\ndef decimals() -> uint8:\n    \"\"\"\n    @notice Returns the number of decimals used by the price feed\n    \"\"\"\n    return 18\n\n\n@external\n@pure\ndef version() -> uint256:\n    \"\"\"\n    @notice Returns the version of the price feed\n    \"\"\"\n    return 1\n\n\n@external\n@pure\ndef description() -> String[18]:\n    \"\"\"\n    @notice Returns a description of the price feed\n    \"\"\"\n    return \"ASF/USD Price Feed\"\n\n\n@external\n@view\ndef latestRoundData() -> (uint80, int256, uint256, uint256, uint80):\n    \"\"\"\n    @notice Returns the latest round data from the price feed\n    @return The round ID\n    @return The price of ASF in USD\n    @return The timestamp of the start of the round\n    @return The timestamp of the last update\n    @return The round ID in which the price was answered\n    \"\"\"\n    price: int256 = 0\n    updated_at: uint256 = 0\n    price, updated_at = self._get_price_with_timestamp()\n    return (0, price, 0, updated_at, 0)\n\n\n@external\n@view\ndef latestAnswer() -> int256:\n    \"\"\"\n    @notice Returns the latest price from the price feed\n    @return The price of ASF in USD\n    \"\"\"\n    return self._get_price()\n\n\n# ============================================================================================\n# Internal functions\n# ============================================================================================\n\n\n@internal\n@view\ndef _get_price() -> int256:\n    eth_price: uint256 = 0\n    updated_at: uint256 = 0\n    eth_price, updated_at = self._get_eth_price()\n    return self._calc_price(eth_price)\n\n\n@internal\n@view\ndef _get_price_with_timestamp() -> (int256, uint256):\n    eth_price: uint256 = 0\n    updated_at: uint256 = 0\n    eth_price, updated_at = self._get_eth_price()\n    return self._calc_price(eth_price), updated_at\n\n\n@internal\n@view\ndef _calc_price(eth_price: uint256) -> int256:\n    return convert(\n        staticcall CURVE_POOL.price_oracle() * eth_price // CL_DECIMALS_DIFF,\n        int256,\n    )\n\n\n@internal\n@view\ndef _get_eth_price() -> (uint256, uint256):\n    round_id: uint80 = 0\n    price: int256 = 0\n    started_at: uint256 = 0\n    updated_at: uint256 = 0\n    answered_in_round: uint80 = 0\n    (\n        round_id, price, started_at, updated_at, answered_in_round\n    ) = staticcall ETH_USD_CL_PRICE_FEED.latestRoundData()\n    assert updated_at + ETH_USD_CL_HEARTBEAT > block.timestamp, \"old\"\n    assert price > 0, \"!price\"\n    return convert(price, uint256), updated_at\n",
      "sha256sum": "6748a4baf4cdd87847359e241adbff61bf10a9a7ce38492eb451b70557268b7d"
    }
  },
  "settings": {
    "outputSelection": {
      "src/sanity.vy": [
        "evm.bytecode",
        "evm.deployedBytecode",
        "abi"
      ]
    },
    "search_paths": [
      "."
    ]
  },
  "compiler_version": "v0.4.1+commit.8a93dd27",
  "integrity": "0838b72433c609d530e8cbb8cb8c6c98aedb82ce7e6e51a769ed5fbdd523c753"
}}