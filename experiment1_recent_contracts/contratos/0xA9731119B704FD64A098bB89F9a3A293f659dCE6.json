{{
  "language": "Solidity",
  "sources": {
    "contracts/WolfAMMController.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.24;\n\n\n/*\n *\t  WolfAMM V0 CONTROLLER CONTRACT\n *\n *  Another DSYNC trader, but this one also has\n *  automatic liquidity management.\n *\n*/\n\n\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\n\n\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\n\t\treturn msg.data;\n\t}\n}\n\ninterface IERC20 {\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\n\tfunction decimals() external pure returns (uint8);\n\n\tfunction allowance(\n\t\taddress owner,\n\t\taddress spender\n\t) external view returns (uint256);\n\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nabstract contract Ownable is Context {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(\n\t\taddress indexed previousOwner,\n\t\taddress indexed newOwner\n\t);\n\n\tconstructor() {\n\t\t_transferOwnership(_msgSender());\n\t}\n\n\tmodifier onlyOwner() {\n\t\t_checkOwner();\n\t\t_;\n\t}\n\n\tfunction owner() public view virtual returns (address) {\n\t\treturn _owner;\n\t}\n\n\tfunction _checkOwner() internal view virtual {\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n\t}\n\n\tfunction renounceOwnership() public virtual onlyOwner {\n\t\t_transferOwnership(address(0));\n\t}\n\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\t_transferOwnership(newOwner);\n\t}\n\n\tfunction _transferOwnership(address newOwner) internal virtual {\n\t\taddress oldOwner = _owner;\n\t\t_owner = newOwner;\n\t\temit OwnershipTransferred(oldOwner, newOwner);\n\t}\n}\n\n\nabstract contract IAssetHolder {\n\n\tfunction getTotalValueUsd12() public virtual view returns (uint128 valueUsd12);\n\tfunction getTotalValueEth12() public virtual view returns (uint128 valueEth12);\n\tfunction getUsd12ValueIn(address token) public virtual view returns (uint128 valueUsd12);\n\n}\n\n\nabstract contract IManagedV3AssetHolder is IAssetHolder {\n\n\t// ADMINISTRATION\n\n\tfunction getController() external virtual view returns (address _controller);\n\tfunction setController(address newController) external virtual;\n\n\t// Destroys and liquidates the current liquidity position, if it exists.  Does not convert tokens.\n\tfunction destroyPosition(uint256 positionId) external virtual;\n\n\t// Takes all tokens out of the position without destroying it\n\tfunction closeLiquidity(uint256 positionId) public virtual;\n\n\t// Creates a new liquidity position with the given parameters.\n\tfunction createV3Position(IUniswapV3Pool pool, address base, address quote, uint80 lowPrice12, uint80 highPrice12, uint256 toAdd) external virtual returns (uint256 tokenId, uint8 idx);\n\n\t// Puts all available base and quote into the given position\n\tfunction fillLiquidity(uint256 positionId) external virtual;\n\n\tfunction collectFees(uint256 tokenId) public virtual;\n\n\t// Swaps tokens\n\tfunction swapTokensInto(address tokenFrom, address tokenTo, uint256 maxIn, uint256 maxOut) external virtual returns (uint256 tokensIn, uint256 tokensOut);\n\n\t// Expected gas usage: 160000 - 550000\n\tfunction obtainTokens(address token0, address token1, uint256 amount0, uint256 amount1) public virtual;\n\n\t// Other functions\n\n\t// Swaps everything into the given token immediately, sets this token as the system token (unless it is USDC or ETH).\n\t// This function also sets the system controller to address 0 to prevent automation from restarting without human input.\n\t// storeOfValueToken must be a reputable token like USDC, USDT, ETH (represented with address 0), WBTC, DAI, LINK, or UNI.\n\t// This function will try to use updated price data to prevent front running if possible, but if the updated data is not\n\t// available, it will complete anyway at whatever price it can get.  This function should only be used in emergencies for\n\t// this very reason (emergencies like USDC depegging, a criticl contract vulterability being discovered, etc).\n\t// If possible, updatePriceData() should be called first.\n\t// This function can be executed by the owner or the controller.\n\t// Suggested emergency tokens:\n\t// 0xdAC17F958D2ee523a2206206994597C13D831ec7 -> USDT (WARNING: For some reason this doesn't play nice with our contract, not sure why)\n\t// 0x514910771AF9Ca656af840dff83E8264EcF986CA -> LINK\n\t// 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 -> WBTC\n\t// 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984 -> UNI\n\t// 0x6B175474E89094C44Da98b954EedeAC495271d0F -> DAI\n\tfunction emergencyCircuitBreaker(address storeOfValueToken) external virtual;\n\n\t// EVENTS\n\n\tevent ControllerSet(address newController, address oldController);\n\tevent EmergencyCircuitBreakerFlipped(address storeOfValueToken);\n\tevent TokensSwapped(address from, address to, uint256 fromAmt, uint256 toAmt);\n\tevent PositionMinted(uint256 poolPosition, address base, address quote, uint80 minPrice, uint80 maxPrice, uint256 toAdd);\n\tevent PositionBurned(uint256 poolPosition, address base, address quote, uint256 baseTaken, uint256 quoteTaken);\n\tevent LiquidityFeesCollected(uint256 poolPosition, address base, address quote, uint256 baseTaken, uint256 quoteTaken);\n\tevent LiquidityModified(uint256 poolPosition, address base, address quote, int128 liquidityChange);\n}\n\n\n// Abridged to contain only what we need\nabstract contract IHoldingContractUtils {\n\t// PRICE DATA\n\n\tfunction getTwapPriceP12(int8 decimalDiff, address base, address quote, uint32 duration) public virtual view returns (uint80 price12);\n\tfunction getTwapPricePX96(address poolAddress, address base, address quote, uint32 duration) public virtual view returns (uint256 priceX96);\n\tfunction safeGetPriceUSDC12Of(address token) public virtual view returns (uint80 price12);\n\tfunction safeGetPrice12Of(address base, address quote) public virtual view returns (uint80 price12);\n\tfunction value12OfTokensAgainst(address token, address quote, uint256 quantity) external virtual view returns (uint128 value12);\n\n\tfunction getPreferredPoolFor(address a, address b) public virtual view returns (address pool);\n\n\t// Primary should either be USDC or address(0), indicating Eth.  This will save the contract address\n\t// for the pool this contract can use later. \n\tfunction findV3PoolFor(address base, address quote, uint128 minValueUSDC12) public virtual returns (address bestPool);\n}\n\n\ninterface RunnableTask {\n\tfunction execute(uint256 handle) external;\n}\n\n\ninterface RunnableChecker {\n\tfunction shouldExecute(uint256 handle) external view returns (bool);\n}\n\n\n// Abridged: Just what we need\nabstract contract ITaskEngine is Ownable, RunnableChecker {\n\n\tstruct QueuedTask {\n\t\tRunnableTask task;\n\t\tRunnableChecker checker;\n\t\tuint256 handle;\n\t\tuint256 operationBid;   // How much we're paying to execute the operation\n\t\tuint256 gasNeeded;\n\t\tuint expiration;\t\t// Queued tasks must eventually expire to prevent clogging\n\t\tuint256 nextTaskIdx;\n\t\tuint256 previousTaskIdx;\n\t\tuint8 outcome;\n\t}\n\n\tuint8 constant public OUTCOME_NOT_YET = 0;\n\tuint8 constant public OUTCOME_SUCCESS = 1;\n\tuint8 constant public OUTCOME_FAILED = 2;\n\tuint8 constant public OUTCOME_EXPIRED = 3;\n\tuint8 constant public OUTCOME_CHECKER_FAILED = 4;\n\n\tfunction getTaskById(uint256 _id) external virtual view returns (QueuedTask memory task);\n\n\t// Queueing functions\n\tfunction queueTask(RunnableTask task, RunnableChecker checker, uint256 handle, uint256 operationBid, uint256 gasNeeded, uint256 expiration) external virtual returns (uint256 _id);\n\n\t// Getting data about task bid rates\n\tfunction minBidFor(uint256 gasNeeded) external virtual view returns (uint256);\n\tfunction marketTaskBid(uint256 gasNeeded) external virtual view returns (uint256);\n}\n\n\ninterface IAutomationToken is IERC20 {\n\tfunction getCirculatingSupply() external view returns (uint256);\n\n\tfunction transferFallback(address recipient, uint256 amount) external returns (bool);\n\tfunction approveFallback(address spender, uint256 amount) external returns (bool);\n\tfunction transferFromFallback(address sender, address recipient, uint256 amount) external returns (bool);\n\n\tfunction getTaskEngine() external view returns (ITaskEngine taskEngine);\n}\n\ninterface IWolfAMMControllerV0 {\n\tfunction prepareWithdraw(uint256 amtEth) external;\n\tfunction prepareWithdrawAll() external;\n\tfunction onDeposit(uint256 howMuch) external;\n\n\tevent TradeExecuted(address targetToken, uint80 price);\n\tevent AutomationStarted(uint80 price);\n\tevent SawBetterPrice(uint80 price);\n}\n\n\ncontract WolfAMMControllerV0 is RunnableTask, RunnableChecker, IWolfAMMControllerV0, Ownable {\n\n\tstruct TradingState {\n\t\tuint80 lastTradedPrice;\n\t\tuint80 bestObservedPrice;\n\t\tbool direction;\n\t\tbool providingLiquidity;\n\t\tbool waiting;\n\t}\n\n\t// Takes 2 SLOADs to access\n\tstruct TradingConfigSlow {\n\t\tIUniswapV3Pool pool;\n\n\t\t// What tokens are we trading?\n\t\taddress base;\n\t\taddress quote;\n\n\t\t// Held liquidity position tokenId\n\t\t// We don't keep the low/high price for the\n\t\t// position because we don't need it for\n\t\t// calculations.\n\t\tuint256 tokenId;\n\n\t\tint8 decimalDiff;\n\t}\n\n\t// Takes 1 SLOAD to access\n\tstruct TradingConfigFast {\n\t\t// Prices for out-of-range liquidity, to prevent (further) impermanent loss\n\t\tuint80 cashOutPrice;\n\t\tuint80 buyBackPrice;\n\n\t\t// Protection from rapid trading due to small price movements\n\t\tuint24 minTradePercent;\n\t}\n\n\tenum Actions {\n\t\tDO_NOTHING,\n\t\tSELL_BACK,   // Enter liquidity position, closing a position in base\n\t\tBUY_BACK,\t// Enter liquidity position, closing a position in quote\n\t\tSELL,\t // Close liquidity position, swap into quote\n\t\tBUY,\t  // Close liquidity position, swap into base\n\t\tRECORD_PRICE,  // New best price seen\n\t\tSTOP_WAITING\n\t}\n\n\taddress internal immutable USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\taddress internal immutable WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\taddress internal immutable DSYNC = 0xf94e7d0710709388bCe3161C32B4eEA56d3f91CC;\n\n\t// Automation stuff\n\t// We're refunded most of the gas grant, so just set it pretty high, so we don't run out of gas\n\tIAutomationToken public automator = IAutomationToken(0xaAa000e1b72bf8DFA74C958e19E925C0bFAE9dEd);\n\tuint256 public constant GAS_GRANT = 1249000;\n\tuint256 public taskId = 0;\n\n\t// External contracts\n\tIHoldingContractUtils public utils;\n\tIManagedV3AssetHolder public holdingContract;\n\taddress public tokenContractAdr;\n\n\tTradingState public state;\n\taddress public tokenHeld;\n\tTradingConfigSlow public configSlow;\n\tTradingConfigFast public configFast;\n\n\n\tconstructor(address utilsAdr, address holdingAdr, address _tokenContractAdr) {\n\t\t// Set up contract addresses\n\t\tholdingContract = IManagedV3AssetHolder(holdingAdr);\n\t\tutils = IHoldingContractUtils(utilsAdr);\n\t\ttokenContractAdr = _tokenContractAdr;\n\t}\n\n\n\t// ADMINISTRATION\n\n\tfunction setToken(address _tokenContractAdr) external onlyOwner {\n\t\ttokenContractAdr = _tokenContractAdr;\n\t}\n\n\tfunction setHoldingContract(address holdingAdr) external onlyOwner {\n\t\tholdingContract = IManagedV3AssetHolder(holdingAdr);\n\t}\n\n\tfunction setUtils(address utilsAdr) external onlyOwner {\n\t\tutils = IHoldingContractUtils(utilsAdr);\n\t}\n\n\t// In case eth gets stuck in the contract (that should never happen but whatever)\n\tfunction rescueEth() external onlyOwner {\n\t\tpayable(owner()).transfer(address(this).balance);\n\t}\n\n\tfunction rescueTokens(address token) external onlyOwner {\n\t\tIERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\n\t}\n\n\tfunction getDesiredAction(uint160 price) public view returns (Actions action) {\n\t\tTradingState memory stateTmp = state;\n\t\tTradingConfigFast memory confTmp = configFast;\n\n\t\tif (stateTmp.waiting) {\n\t\t\t// This state exists so that, on re-entry to our liquidity position,\n\t\t\t// the bot does not exit the position instantly.\n\t\t\t// This would happen because the price will still be outside\n\t\t\t// our safety range at this point.\n\t\t\tunchecked {\n\t\t\t\tif (price*995 > confTmp.cashOutPrice*1000 && price*1005 < confTmp.buyBackPrice*1000)\n\t\t\t\t\treturn Actions.STOP_WAITING;\n\t\t\t}\n\n\t\t} else if (stateTmp.providingLiquidity) {\n\t\t\t// If we're providing liquidity but the price has gone\n\t\t\t// down too much, protect us from the impermanent loss\n\t\t\tif (price < confTmp.cashOutPrice)\n\t\t\t\treturn Actions.SELL;\n\n\t\t\t// On the upside, make sure we are still exposed to whatever token goes up\n\t\t\telse if (price > confTmp.buyBackPrice)\n\t\t\t\treturn Actions.BUY;\n\n\t\t} else {\n\t\t\t// Observe the price in 0.5% increments to avoid too many execute() calls\n\t\t\t// We check this first because it changes whether we should trade or not\n\t\t\tunchecked {\n\t\t\t\tif (stateTmp.direction && price*995 > uint160(stateTmp.bestObservedPrice)*1000)\n\t\t\t\t\treturn Actions.RECORD_PRICE;\n\t\t\t\telse if ((!stateTmp.direction) && price*1005 < uint160(stateTmp.bestObservedPrice)*1000)\n\t\t\t\t\treturn Actions.RECORD_PRICE;\n\t\t\t}\n\n\t\t\t// Check if the price has come closer to our range, and if so, re-enter the position\n\t\t\t// It may seem odd to increase our wanted price on the low side and decrease it on the high side.\n\t\t\t// I do this because, if you carefully check the math, this prevents automatically re-entering\n\t\t\t// when the price stays the same.  There needs to be some buffer so it waits for the price to drop.\n\t\t\t// This loses us a few percent of gains but prevents bugs, which probably saves us wayy more.\n\t\t\tif (!stateTmp.direction) {\n\t\t\t\tuint160 priceVeutnu = (uint160(stateTmp.bestObservedPrice + confTmp.cashOutPrice) * (uint160(1e6 + confTmp.minTradePercent))) / 2e6;\n\t\t\t\tif (price > priceVeutnu)\n\t\t\t\t\treturn Actions.BUY_BACK;\n\t\t\t} else {\n\t\t\t\tuint160 priceVeutnu = (uint160(stateTmp.bestObservedPrice + confTmp.buyBackPrice) * (uint160(1e6 - confTmp.minTradePercent))) / 2e6;\n\t\t\t\tif (price < priceVeutnu)\n\t\t\t\t\treturn Actions.SELL_BACK;\n\t\t\t}\n\t\t}\n\n\t\treturn Actions.DO_NOTHING;\n\t}\n\n\tfunction shouldExecute(uint256 handle) external override view returns (bool) {\n\t\tif (taskId == 0 || handle < block.timestamp)\n\t\t\treturn true;\n\n\t\t(uint160 sqrtPriceX96,,,,,,) = configSlow.pool.slot0();\n\t\tsqrtPriceX96 = correctPriceDirection(configSlow.base, configSlow.quote, sqrtPriceX96);\n\t\tuint160 price = getPriceFromSqrtPriceX96(configSlow.decimalDiff, sqrtPriceX96);\n\n\t\treturn getDesiredAction(price) != Actions.DO_NOTHING;\n\t}\n\n\tfunction execute(uint256 handle) external override {\n\t\tif (taskId == 0)\n\t\t\treturn;\n\n\t\texecuteRaw();\n\n\t\t_queueSelf(automator.getTaskEngine());\n\t}\n\n\tfunction executeRaw() internal {\n\t\t(uint160 sqrtPriceX96,,,,,,) = configSlow.pool.slot0();\n\t\tsqrtPriceX96 = correctPriceDirection(configSlow.base, configSlow.quote, sqrtPriceX96);\n\t\tuint80 price = getPriceFromSqrtPriceX96(configSlow.decimalDiff, sqrtPriceX96);\n\t\tActions action = getDesiredAction(price);\n\n\t\tTradingState memory stateTmp = state;\n\n\t\tif (action == Actions.RECORD_PRICE) {\n\t\t\tstateTmp.bestObservedPrice = price;\n\n\t\t\temit SawBetterPrice(price);\n\n\t\t} else if (action == Actions.BUY || action == Actions.SELL) {\n\t\t\tholdingContract.closeLiquidity(configSlow.tokenId);\n\t\t\tstateTmp.providingLiquidity = false;\n\n\t\t\tuint256 balance;\n\t\t\tif (action == Actions.BUY) {\n\t\t\t\t// Swap into quote\n\t\t\t\tbalance = IERC20(configSlow.quote).balanceOf(address(holdingContract));\n\t\t\t\tholdingContract.swapTokensInto(configSlow.quote, configSlow.base, balance, type(uint256).max);\n\t\t\t\ttokenHeld = configSlow.base;\n\t\t\t\tstateTmp.direction = true;\n\t\t\t} else {\n\t\t\t\t// Swap into base\n\t\t\t\tbalance = IERC20(configSlow.base).balanceOf(address(holdingContract));\n\t\t\t\tholdingContract.swapTokensInto(configSlow.base, configSlow.quote, balance, type(uint256).max);\n\t\t\t\ttokenHeld = configSlow.quote;\n\t\t\t\tstateTmp.direction = false;\n\t\t\t}\n\n\t\t\tbalance = address(holdingContract).balance;\n\t\t\tif (balance > 1e14 && tokenHeld != address(0)) {\n\t\t\t\t// We try to keep some ETH reserves so people can sell tokens to the contract when liquidity positions are open\n\t\t\t\tholdingContract.swapTokensInto(address(0), tokenHeld, (balance * 9) / 10, type(uint256).max);\n\t\t\t}\n\n\t\t} else if (action == Actions.STOP_WAITING)\n\t\t\tstateTmp.waiting = false;\n\n\t\telse if (action != Actions.DO_NOTHING) {\n\t\t\t// Enter liquidity position\n\t\t\t// It doesn't matter what we're swapping into because fillLiquidity will handle it for us.\n\n\t\t\t// Convert our ethers so we have more tokens to work with\n\t\t\tuint256 balance = address(holdingContract).balance;\n\t\t\tif (balance > 1e14) {\n\t\t\t\t// We try to keep some ETH reserves so people can sell tokens to the contract when liquidity positions are open\n\t\t\t\tholdingContract.swapTokensInto(address(0), configSlow.quote, (balance * 9) / 10, type(uint256).max);\n\t\t\t}\n\n\t\t\tholdingContract.fillLiquidity(configSlow.tokenId);\n\t\t\tstateTmp.providingLiquidity = true;\n\t\t\tstateTmp.waiting = true;\n\t\t\ttokenHeld = address(0);\n\t\t}\n\n\t\tstate = stateTmp;\n\t}\n\n\tfunction getTokenPrice() internal view returns (uint80 price) {\n\t\treturn safeGetPrice12Of(configSlow.base, configSlow.quote);\n\t}\n\n\tfunction getBasePriceUSDC12() internal view returns (uint80 price) {\n\t\treturn (1e12 * safeGetPrice12Of(configSlow.base, configSlow.quote)) / safeGetPrice12Of(USDC, configSlow.quote);\n\t}\n\n\tfunction setConfig(address base, address quote, uint80 cashOutPrice, uint80 buyBackPrice, uint80 liquidityLowPrice, uint80 liquidityHighPrice, uint24 minTradePercent) external onlyOwner {\n\n\t\t// Burn our existing liquidity position, if it exists\n\t\tif (configSlow.tokenId != 0)\n\t\t\tholdingContract.destroyPosition(configSlow.tokenId);\n\n\t\t// Avoid wasting gas by looking for the same pool twice\n\t\tif (quote != WETH && !(base == WETH && quote == USDC)) {\n\t\t\t// Pools for trading\n\t\t\tuint128 minValueUSDC12 = holdingContract.getTotalValueUsd12();\n\t\t\tutils.findV3PoolFor(base, WETH, minValueUSDC12);\n\t\t\tutils.findV3PoolFor(quote, WETH, minValueUSDC12);\n\t\t}\n\n\t\t// Get the pool for our liquidity and create a position using our entire balance\n\t\tIUniswapV3Pool pool = IUniswapV3Pool(utils.findV3PoolFor(base, quote, 0));\n\t\tuint256 balance = address(holdingContract).balance;\n\t\tif (quote != address(0) && balance > 1e14)\n\t\t\tholdingContract.swapTokensInto(address(0), quote, balance, type(uint256).max);\n\t\tuint256 toAdd = IERC20(quote).balanceOf(address(holdingContract));\n\t\t(uint256 tokenId,) = holdingContract.createV3Position(pool, base, quote, liquidityLowPrice, liquidityHighPrice, toAdd);\n\n\t\t// Update our config and state machine\n\t\tconfigSlow = TradingConfigSlow(pool, base, quote, tokenId, int8(IERC20(base).decimals()) - int8(IERC20(quote).decimals()));\n\t\tconfigFast = TradingConfigFast(cashOutPrice, buyBackPrice, minTradePercent);\n\t\tstate.providingLiquidity = true;\n\t\ttokenHeld = address(0);\n\t}\n\n\tfunction migrateFrom(WolfAMMControllerV0 old) external onlyOwner {\n\t\t(IUniswapV3Pool pool, address base, address quote, uint256 tokenId,) = old.configSlow();\n\t\t(uint80 cashOutPrice, uint80 buyBackPrice, uint24 minTradePercent) = old.configFast();\n\t\tconfigSlow = TradingConfigSlow(pool, base, quote, tokenId, int8(IERC20(base).decimals()) - int8(IERC20(quote).decimals()));\n\t\tconfigFast = TradingConfigFast(cashOutPrice, buyBackPrice, minTradePercent);\n\n\t\t(uint80 lastTradedPrice, uint80 bestObservedPrice, bool direction, bool providingLiquidity, bool waiting) = old.state();\n\t\ttokenHeld = old.tokenHeld();\n\t\tstate = TradingState(lastTradedPrice, bestObservedPrice, direction, providingLiquidity, waiting);\n\n\t\texecuteRaw();\n\n\t\tITaskEngine taskEngine = automator.getTaskEngine();\n\t\t_queueSelf(taskEngine);\n\n\t\tuint80 price = getTokenPrice();\n\t\temit AutomationStarted(price);\n\t}\n\n\tfunction migrateManually(address base, address quote, uint80 cashOutPrice, uint80 buyBackPrice, uint24 minTradePercent, uint256 tokenId, address _tokenHeld, uint80 lastTradedPrice, uint80 bestObservedPrice, bool direction, bool providingLiquidity, bool waiting) external onlyOwner {\n\t\tIUniswapV3Pool pool = IUniswapV3Pool(utils.findV3PoolFor(base, quote, 0));\n\t\tconfigSlow = TradingConfigSlow(pool, base, quote, tokenId, int8(IERC20(base).decimals()) - int8(IERC20(quote).decimals()));\n\t\tconfigFast = TradingConfigFast(cashOutPrice, buyBackPrice, minTradePercent);\n\n\t\ttokenHeld = _tokenHeld;\n\t\tstate = TradingState(lastTradedPrice, bestObservedPrice, direction, providingLiquidity, waiting);\n\n\t\texecuteRaw();\n\n\t\tITaskEngine taskEngine = automator.getTaskEngine();\n\t\t_queueSelf(taskEngine);\n\n\t\tuint80 price = getTokenPrice();\n\t\temit AutomationStarted(price);\n\t}\n\n\tfunction startAutomation() external onlyOwner {\n\t\tITaskEngine taskEngine = automator.getTaskEngine();\n\t\trequire(taskId == 0 || taskEngine.getTaskById(taskId).outcome != 0, \"Already running\");\n\n\t\t// Reset state\n\t\tuint80 price = getTokenPrice();\n\t\tstate.bestObservedPrice = price;\n\t\tstate.lastTradedPrice = price;\n\n\t\texecuteRaw();\n\n\t\t_queueSelf(taskEngine);\n\n\t\temit AutomationStarted(price);\n\t}\n\n\tfunction stopAutomation() external onlyOwner {\n\t\ttaskId = 0;\n\t\tautomator.transfer(owner(), automator.balanceOf(address(this)));\n\t}\n\n\tfunction _queueSelf(ITaskEngine taskEngine) internal {\n\t\tuint256 bid = taskEngine.minBidFor(GAS_GRANT);\n\t\tautomator.approve(address(taskEngine), bid);\n\t\tuint256 expiration = block.timestamp + 1 weeks;\n\t\ttaskId = taskEngine.queueTask(this, this, expiration, bid, GAS_GRANT, expiration);\n\t}\n\n\tfunction prepareWithdraw(uint256 amtEth) external override {\n\t\trequire(msg.sender == tokenContractAdr);\n\n\t\tif (amtEth > address(holdingContract).balance && tokenHeld != address(0))\n\t\t\tholdingContract.swapTokensInto(tokenHeld, address(0), type(uint256).max, amtEth - address(holdingContract).balance);\n\t}\n\n\tfunction prepareWithdrawAll() external override {\n\t\trequire(msg.sender == tokenContractAdr);\n\n\t\tif (configSlow.tokenId != 0)\n\t\t\ttry holdingContract.closeLiquidity(configSlow.tokenId) {} catch {}\n\t\tif (tokenHeld != address(0))\n\t\t\tholdingContract.swapTokensInto(tokenHeld, address(0), IERC20(tokenHeld).balanceOf(address(holdingContract)), type(uint256).max);\n\t}\n\n\tfunction onDeposit(uint256 howMuch) external override {\n\t\trequire(msg.sender == tokenContractAdr);\n\n\t\t// Swap it in to USDC to keep the value while we wait for a trade to execute\n\t\tif (howMuch >= 5e6 && tokenHeld != address(0))\n\t\t\tholdingContract.swapTokensInto(address(0), tokenHeld, howMuch, type(uint256).max);\n\t}\n\n\n\tfunction getTwapPriceP12(int8 decimalDiff, address base, address quote, uint32 duration) internal view returns (uint80 price12) {\n\t\taddress poolAddress = utils.getPreferredPoolFor(base, quote);\n\n\t\tunchecked {\n\t\t\t// Get timestamps\n\t\t\tuint32[] memory secondsAgos = new uint32[](2);\n\t\t\tsecondsAgos[0] = duration;\n\t\t\tsecondsAgos[1] = 0;\n\n\t\t\t// Observe cumulative tick values\n\t\t\t(int56[] memory tickCumulatives, ) = IUniswapV3Pool(poolAddress).observe(secondsAgos);\n\n\t\t\t// Calculate average tick over the interval\n\t\t\tint24 avgTick = int24((tickCumulatives[1] - tickCumulatives[0]) / int56(uint56(duration)));\n\n\t\t\t// Convert average tick to sqrtPriceX96\n\t\t\tuint160 sqrtPriceX96 = correctPriceDirection(base, quote, TickMath.getSqrtRatioAtTick(avgTick));\n\n\t\t\treturn getPriceFromSqrtPriceX96(decimalDiff, sqrtPriceX96);\n\t\t}\n\t}\n\n\tfunction getTwapPricePX96(address poolAddress, address base, address quote, uint32 duration) internal view returns (uint256 priceX96) {\n\t\tunchecked {\n\t\t\t// Get timestamps\n\t\t\tuint32[] memory secondsAgos = new uint32[](2);\n\t\t\tsecondsAgos[0] = duration;\n\t\t\tsecondsAgos[1] = 0;\n\n\t\t\t// Observe cumulative tick values\n\t\t\t(int56[] memory tickCumulatives, ) = IUniswapV3Pool(poolAddress).observe(secondsAgos);\n\n\t\t\t// Calculate average tick over the interval\n\t\t\tint24 avgTick = int24((tickCumulatives[1] - tickCumulatives[0]) / int56(uint56(duration)));\n\n\t\t\t// Convert average tick to sqrtPriceX96\n\t\t\tuint160 sqrtPriceX96 = correctPriceDirection(base, quote, TickMath.getSqrtRatioAtTick(avgTick));\n\n\t\t\treturn mulDiv(sqrtPriceX96, sqrtPriceX96, 1 << 96);\n\t\t}\n\t}\n\n\t// We bring in some utils to reduce our call depth\n\tfunction safeGetPriceUSDC12Of(address token) internal view returns (uint80 price12) {\n\t\tint8 decimalDiff;\n\t\t\n\t\tunchecked { decimalDiff = int8(IERC20(token).decimals()) - 6; }\n\n\t\treturn getTwapPriceP12(decimalDiff, token, USDC, 2 minutes);\n\t}\n\n\tfunction safeGetPrice12Of(address base, address quote) internal view returns (uint80 price12) {\n\t\tif (quote == address(0)) quote = WETH;\n\n\t\tint8 baseDecimals = int8(IERC20(base).decimals());\n\n\t\tif (quote == USDC)\n\t\t\treturn getTwapPriceP12(baseDecimals - 6, base, USDC, 2 minutes);\n\t\telse if (quote == WETH)\n\t\t\treturn getTwapPriceP12(baseDecimals - 18, base, WETH, 2 minutes);\n\n\t\tunchecked {\n\t\t\tint8 baseDiff = baseDecimals - 6;\n\t\t\tint8 quoteDiff = int8(IERC20(quote).decimals()) - 6;\n\t\t\tuint80 basePrice = getTwapPriceP12(baseDiff, base, USDC, 2 minutes);\n\t\t\tuint80 quotePrice = getTwapPriceP12(quoteDiff, quote, USDC, 2 minutes);\n\t\t\treturn uint80((uint256(basePrice) * 1e12) / quotePrice);\n\t\t}\n\t}\n\n\tfunction correctPriceDirection(address base, address quote, uint160 sqrtPriceX96) public pure returns (uint160 sqrtPriceX96Corrected) {\n\t\tif (base < quote)\n\t\t\treturn sqrtPriceX96;\n\t\telse\n\t\t\treturn uint160((1 << 192) / uint256(sqrtPriceX96));\n\t}\n\n\tfunction getPriceFromSqrtPriceX96(int8 decimalDiff, uint160 sqrtPriceX96) public pure returns (uint80 price_12Decimals) {\n\t\t// multiply by 244140625 then shift right 180 is the same as multiply by 1e12 then shift right by 192\n\t\t// The difference is in gas (likely the former is a little more efficient) and likelyhood of overflow, which is less\n\t\tif (decimalDiff >= 0)\n\t\t\treturn uint80(mulDiv(uint256(sqrtPriceX96) * 244140625, uint256(sqrtPriceX96) * (10**uint8(decimalDiff)), 1 << 180));\n\t\telse\n\t\t\treturn uint80(mulDiv(uint256(sqrtPriceX96) * 244140625, uint256(sqrtPriceX96), (10**uint8(-decimalDiff)) << 180));\n\t}\n\n\tfunction getSqrtPriceX96FromPrice(int8 decimalDiff, uint80 price_12Decimals) public pure returns (uint160 sqrtPriceX96) {\n\t\tuint256 ratioX192 = mulDiv(uint256(price_12Decimals), 1 << 192, 10**uint8(12 + decimalDiff));\n\t\treturn uint160(sqrt(ratioX192));\n\t}\n\n\t// https://ethereum-magicians.org/t/eip-7054-gas-efficient-square-root-calculation-with-binary-search-approach/14539\n\tfunction sqrt(uint x) public pure returns (uint128) {\n\t\tif (x == 0) return 0;\n\t\telse {\n\t\t\tuint xx = x;\n\t\t\tuint r = 1;\n\t\t\tif (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\n\t\t\tif (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\n\t\t\tif (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\n\t\t\tif (xx >= 0x10000) { xx >>= 16; r <<= 8; }\n\t\t\tif (xx >= 0x100) { xx >>= 8; r <<= 4; }\n\t\t\tif (xx >= 0x10) { xx >>= 4; r <<= 2; }\n\t\t\tif (xx >= 0x8) { r <<= 1; }\n\n\t\t\tunchecked {\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t}\n\t\t\tuint r1 = x / r;\n\t\t\treturn uint128 (r < r1 ? r : r1);\n\t\t}\n\t}\n\n\t// From https://arbiscan.io/contractdiffchecker?a2=0x819356bf26d384e7e70cd26c07fc807e6b354f08&a1=0x48e455852669adb747b3d16f2bd8b541d696b697\n\tfunction mulDiv(uint256 a, uint256 b, uint256 denominator) public pure returns (uint256 result) {\n\t\tunchecked {\n\t\t\t// 512-bit multiply [prod1 prod0] = a * b\n\t\t\t// Compute the product mod 2**256 and mod 2**256 - 1\n\t\t\t// then use the Chinese Remainder Theorem to reconstruct\n\t\t\t// the 512 bit result. The result is stored in two 256\n\t\t\t// variables such that product = prod1 * 2**256 + prod0\n\t\t\tuint256 prod0; // Least significant 256 bits of the product\n\t\t\tuint256 prod1; // Most significant 256 bits of the product\n\t\t\tassembly {\n\t\t\t\tlet mm := mulmod(a, b, not(0))\n\t\t\t\tprod0 := mul(a, b)\n\t\t\t\tprod1 := sub(sub(mm, prod0), lt(mm, prod0))\n\t\t\t}\n\n\t\t\t// Handle non-overflow cases, 256 by 256 division\n\t\t\tif (prod1 == 0) {\n\t\t\t\trequire(denominator > 0);\n\t\t\t\tassembly {\n\t\t\t\t\tresult := div(prod0, denominator)\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// Make sure the result is less than 2**256.\n\t\t\t// Also prevents denominator == 0\n\t\t\trequire(denominator > prod1);\n\n\t\t\t///////////////////////////////////////////////\n\t\t\t// 512 by 256 division.\n\t\t\t///////////////////////////////////////////////\n\n\t\t\t// Make division exact by subtracting the remainder from [prod1 prod0]\n\t\t\t// Compute remainder using mulmod\n\t\t\tuint256 remainder;\n\t\t\tassembly {\n\t\t\t\tremainder := mulmod(a, b, denominator)\n\t\t\t}\n\t\t\t// Subtract 256 bit number from 512 bit number\n\t\t\tassembly {\n\t\t\t\tprod1 := sub(prod1, gt(remainder, prod0))\n\t\t\t\tprod0 := sub(prod0, remainder)\n\t\t\t}\n\n\t\t\t// Factor powers of two out of denominator\n\t\t\t// Compute largest power of two divisor of denominator.\n\t\t\t// Always >= 1.\n\t\t\tuint256 twos = (0 - denominator) & denominator;\n\t\t\t// Divide denominator by power of two\n\t\t\tassembly {\n\t\t\t\tdenominator := div(denominator, twos)\n\t\t\t}\n\n\t\t\t// Divide [prod1 prod0] by the factors of two\n\t\t\tassembly {\n\t\t\t\tprod0 := div(prod0, twos)\n\t\t\t}\n\t\t\t// Shift in bits from prod1 into prod0. For this we need\n\t\t\t// to flip `twos` such that it is 2**256 / twos.\n\t\t\t// If twos is zero, then it becomes one\n\t\t\tassembly {\n\t\t\t\ttwos := add(div(sub(0, twos), twos), 1)\n\t\t\t}\n\t\t\tprod0 |= prod1 * twos;\n\n\t\t\t// Invert denominator mod 2**256\n\t\t\t// Now that denominator is an odd number, it has an inverse\n\t\t\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\n\t\t\t// Compute the inverse by starting with a seed that is correct\n\t\t\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\n\t\t\tuint256 inv = (3 * denominator) ^ 2;\n\t\t\t// Now use Newton-Raphson iteration to improve the precision.\n\t\t\t// Thanks to Hensel's lifting lemma, this also works in modular\n\t\t\t// arithmetic, doubling the correct bits in each step.\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**8\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**16\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**32\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**64\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**128\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**256\n\n\t\t\t// Because the division is now exact we can divide by multiplying\n\t\t\t// with the modular inverse of denominator. This will give us the\n\t\t\t// correct result modulo 2**256. Since the precoditions guarantee\n\t\t\t// that the outcome is less than 2**256, this is the final result.\n\t\t\t// We don't need to compute the high bits of the result and prod1\n\t\t\t// is no longer required.\n\t\t\tresult = prod0 * inv;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.9.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint24(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 7770
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}