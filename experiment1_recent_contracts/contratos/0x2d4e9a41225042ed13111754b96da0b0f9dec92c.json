{{
  "language": "Solidity",
  "sources": {
    "contracts/edms/emda-presale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.23;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\r\n\r\n// solhint-disable-next-line interface-starts-with-i\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\n// File: Mainnet/EDMPresaleNew.sol\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Owner cannot be the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\ninterface CustomIER20 is IERC20Metadata {\r\n    function transferAndVest(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract EDMAPresale is ReentrancyGuard, Ownable {\r\n    struct PresaleStage {\r\n        uint256 pricePerToken;  // Price in USD (scaled to 18 decimals)\r\n        uint256 tokensToSell;   // Total tokens allocated for this stage\r\n        uint256 bonusPercentage;    // Bonus percentage for this stage\r\n        uint256 tokensSold;     // Total tokens sold in this stage\r\n        uint256 fundsRaised;    // Total funds raised in USD for this stage\r\n        uint256 bonusGiven;     // Total bonus given\r\n    }\r\n\r\n    uint256 public constant ETH_MULTIPLIER = 10**18;\r\n    uint256 public constant DOUBLE_ETH_MULTIPLIER = ETH_MULTIPLIER * ETH_MULTIPLIER;\r\n    CustomIER20 public edm; // EDMA token\r\n    CustomIER20 public usdt; // USDT token\r\n    AggregatorV3Interface public priceFeed; // Chainlink price feed for ETH/USD\r\n\r\n    uint256 public activeStage; // Active presale stage ID\r\n    uint256 public nextStage;   // ID of the next presale stage\r\n    uint256 public totalFundsRaised; // Total funds raised across all stages\r\n\r\n    bool public isBuyEnabled = true;\r\n\r\n    struct RewardTier {\r\n        uint256 minAmount;\r\n        uint256 percentage;\r\n    }\r\n\r\n    mapping(string => RewardTier) public rewardTiers;\r\n\r\n    struct UserData {\r\n        uint256 investedAmountUSD;\r\n        uint256 receivedTokenAmount;\r\n        uint256 referalRewardUSDAmount;\r\n        bool didInvested;\r\n    }\r\n    mapping(address => UserData) public userData; // wallet address => user's detail\r\n\r\n    mapping(uint256 => PresaleStage) public presaleStages; // Stage ID => Stage Data\r\n    uint256 public stageCount; // Total number of stages created\r\n\r\n    \r\n    event StageCreated(uint256 indexed stageId, uint256 pricePerToken, uint256 tokensToSell, uint256 bonusPercentage);\r\n    event StageUpdated(uint256 indexed stageId, uint256 pricePerToken, uint256 tokensToSell, uint256 bonusPercentage);\r\n    event TokensPurchased(address indexed buyer, uint256 indexed stageId, uint256 usdAmount, uint256 tokens, string method);\r\n    event RewardAdded(address indexed tokenBuyer, address referralAddress, uint256 indexed stageId, uint256 usdAmount, uint256 purchasedTokens, uint256 rewardAmount);\r\n    event RewardClaimed(address indexed user, uint256 claimedRewardAmount, string method);\r\n    event StageActivated(uint256 indexed stageId);\r\n    event FundsWithdrawn(uint256 amount, string method);\r\n\r\n    modifier validReferral(address referalAddress) {\r\n        require(referalAddress != msg.sender, \"Self-referral is not allowed\");\r\n        // require(referalAddress == address(0) || userData[referalAddress].didInvested == true, \"Invalid referral\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _edm,\r\n        address _usdt,\r\n        address _priceFeed\r\n    ) {\r\n        require(_edm != address(0), \"Invalid EDM address\");\r\n        require(_usdt != address(0), \"Invalid USDT token address\");\r\n        require(_priceFeed != address(0), \"Invalid price feed address\");\r\n\r\n        edm = CustomIER20(_edm);\r\n        usdt = CustomIER20(_usdt);\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n\r\n        // Initialize the first two stages\r\n        _createStage(5e16, 20_000_000 , 10); // Stage 1: $0.05\r\n        \r\n        // setting second stage in advance \r\n        _createStage(8e16, 20_000_000 , 5); // Stage 2: $0.08\r\n\r\n\r\n        // Set the first stage as active and the second as next\r\n        activeStage = 0;\r\n        nextStage = 1;\r\n\r\n        // set rewardtiers\r\n        rewardTiers[\"Platinum\"] = RewardTier({minAmount: 5_000, percentage: 10});\r\n        rewardTiers[\"Gold\"] = RewardTier({minAmount: 1_000, percentage: 7});\r\n        rewardTiers[\"Silver\"] = RewardTier({minAmount: 100, percentage: 5});\r\n        rewardTiers[\"Bronze\"] = RewardTier({minAmount: 10, percentage: 3});\r\n    }\r\n\r\n    function _createStage(uint256 pricePerToken, uint256 tokensToSell, uint256 bonusPercentage) internal {\r\n        presaleStages[stageCount] = PresaleStage(pricePerToken, tokensToSell, bonusPercentage, 0, 0, 0);\r\n        emit StageCreated(stageCount, pricePerToken, tokensToSell, bonusPercentage);\r\n        stageCount++;\r\n    }\r\n\r\n    function createNewStage(uint256 pricePerToken, uint256 tokensToSell, uint256 bonusPercentage) external onlyOwner {\r\n        require(pricePerToken > 0, \"Price must be greater than 0\");\r\n        require(tokensToSell > 0, \"Tokens must be greater than 0\");\r\n        \r\n        _createStage(pricePerToken, tokensToSell , bonusPercentage);\r\n    }\r\n\r\n    function activateStage(uint256 stageId) external  onlyOwner {\r\n        require(stageId > activeStage, \"Cannot activate previous stages\");\r\n        require(stageId < stageCount - 1, \"Stage not available\");\r\n        activeStage = stageId;\r\n        nextStage = stageId+1;\r\n        emit StageActivated(activeStage);\r\n    }\r\n\r\n    function updateStage(uint256 stageId, uint256 pricePerToken, uint256 bonusPercentage, uint256 tokensToSell) external onlyOwner {\r\n        presaleStages[stageId].bonusPercentage = bonusPercentage;\r\n        // only udpdate tokens and price if its passed.\r\n        if(tokensToSell > 0) {\r\n            presaleStages[stageId].tokensToSell = tokensToSell;\r\n        }\r\n\r\n        if(pricePerToken > 0) {\r\n            presaleStages[stageId].pricePerToken = pricePerToken;\r\n        }\r\n\r\n        emit StageUpdated(stageId, presaleStages[stageId].pricePerToken, presaleStages[stageId].tokensToSell, bonusPercentage);\r\n    }\r\n\r\n    function buyWithETH(address referalAddress) external payable nonReentrant validReferral(referalAddress) {\r\n        require(isBuyEnabled, \"Purchasing is currently unavailable.\");\r\n        require(msg.value > 0, \"Cannot send 0 ETH\");\r\n        uint256 ethPriceUSD = getETHUSDPrice();\r\n        uint256 usdAmount = (msg.value * ethPriceUSD) / (DOUBLE_ETH_MULTIPLIER);\r\n        _handlePurchase(usdAmount, msg.value, \"ETH\", referalAddress, address(0));\r\n        // (bool success, ) = payable(address(this)).call{value: msg.value}(\"\");\r\n        // require(success, \"ETH transfer failed\");\r\n    }\r\n\r\n    function buyWithUSDT(uint256 usdtAmount, address referalAddress) external nonReentrant validReferral(referalAddress) {\r\n        require(isBuyEnabled, \"Purchasing is currently unavailable.\");\r\n        require(usdtAmount > 0, \"Cannot send 0 USDT\");\r\n        uint256 ourAllowance = usdt.allowance(msg.sender,address(this));\r\n        require(usdtAmount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        (bool success, ) = address(usdt).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                msg.sender,\r\n                address(this),\r\n                usdtAmount * (10**usdt.decimals())\r\n            )\r\n        );\r\n        require(success, \"USDT transfer failed\");\r\n        _handlePurchase(usdtAmount, usdtAmount, \"USDT\", referalAddress, address(0));\r\n    }\r\n\r\n    function sendTokenForUSDInvestment(uint256 usdtAmount, address receipentAddress) external nonReentrant onlyOwner {\r\n        require(isBuyEnabled, \"Purchasing is currently unavailable.\");\r\n        require(usdtAmount > 0, \"Cannot send 0 USDT\");\r\n        _handlePurchase(usdtAmount, usdtAmount, \"USDT\", address(0), receipentAddress);\r\n    }\r\n\r\n    function calculateTokenWithBnus(uint256 usdAmount) public view returns (uint256 tokensToBuy, uint256 tokenBonus) {\r\n        PresaleStage storage stage = presaleStages[activeStage];\r\n        tokensToBuy = (usdAmount * ETH_MULTIPLIER) / stage.pricePerToken;\r\n        tokenBonus = 0;\r\n        if(stage.bonusPercentage > 0) {\r\n            tokenBonus = (tokensToBuy * stage.bonusPercentage) / 100;\r\n        }\r\n        return  (tokensToBuy, tokenBonus);\r\n    }\r\n\r\n\r\n    function calculateTokenWithEth(uint256 ethAmount) external view returns (uint256 tokensToBuy, uint256 tokenBonus) {\r\n        uint256 ethPriceUSD = getETHUSDPrice();\r\n        uint256 usdAmount = (ethAmount * ethPriceUSD) / (DOUBLE_ETH_MULTIPLIER);\r\n        return calculateTokenWithBnus(usdAmount);\r\n    }\r\n\r\n    function _handlePurchase(uint256 usdAmount, uint256 /*paymentAmount*/, string memory method, address referalAddress, address receipentAddress) internal {\r\n        (uint256 tokensToBuy, uint256 tokenBonus) = calculateTokenWithBnus(usdAmount);\r\n        PresaleStage storage stage = presaleStages[activeStage];\r\n        uint256 tokenWithBonus = tokensToBuy+tokenBonus;\r\n\r\n        if (tokensToBuy > stage.tokensToSell) {\r\n            uint256 tokensFromCurrentStage = stage.tokensToSell;\r\n            tokenBonus = (tokensFromCurrentStage * stage.bonusPercentage) / 100; // update bonus;\r\n            // uint256 remainingTokens = tokensToBuy - tokensFromCurrentStage;\r\n            uint256 calToken = tokensFromCurrentStage * stage.pricePerToken;\r\n            uint256 remainingUSD = usdAmount - ((calToken) / ETH_MULTIPLIER);\r\n            stage.tokensToSell = 0;\r\n            stage.tokensSold += tokensFromCurrentStage;\r\n            stage.fundsRaised += ((calToken) / ETH_MULTIPLIER);\r\n            stage.bonusGiven += tokenBonus;\r\n\r\n            _activateNextStage();\r\n            PresaleStage storage next = presaleStages[activeStage];\r\n\r\n            uint256 tokensFromNextStage = (remainingUSD * ETH_MULTIPLIER) / next.pricePerToken;\r\n            require(next.tokensToSell >= tokensFromNextStage, \"Not enough tokens in next stage\");\r\n\r\n            next.tokensToSell =  next.tokensToSell - tokensFromNextStage;\r\n            uint nexttokenBonus = (tokensFromNextStage * next.bonusPercentage) / 100; // update bonus;\r\n            next.tokensSold += tokensFromNextStage;\r\n            next.bonusGiven += nexttokenBonus;\r\n            next.fundsRaised += remainingUSD;\r\n\r\n            // final tokens to be given\r\n            tokenWithBonus = (tokensFromCurrentStage + tokensFromNextStage  + tokenBonus + nexttokenBonus);\r\n            tokensToBuy = (tokensFromCurrentStage + tokensFromNextStage);\r\n        } else {\r\n            stage.tokensToSell -= tokensToBuy;\r\n            stage.tokensSold += tokensToBuy;\r\n            stage.fundsRaised +=  usdAmount;\r\n            stage.bonusGiven += tokenBonus;\r\n            if(stage.tokensToSell <= 0) {\r\n                if(nextStage < stageCount) {\r\n                    _activateNextStage();\r\n                }\r\n            }\r\n        }\r\n\r\n        totalFundsRaised += usdAmount;\r\n\r\n        // update Stats\r\n        address edmReceipentAddress;\r\n        if(receipentAddress == address(0)) {\r\n            edmReceipentAddress = msg.sender;\r\n        } else  {\r\n            edmReceipentAddress = receipentAddress;\r\n        }\r\n        userData[edmReceipentAddress].investedAmountUSD += usdAmount;\r\n        userData[edmReceipentAddress].receivedTokenAmount += tokenWithBonus;\r\n        userData[edmReceipentAddress].didInvested = true;\r\n        emit TokensPurchased(edmReceipentAddress, activeStage, usdAmount, tokenWithBonus, method);\r\n\r\n        // check and generate reward for refferal user.\r\n        if(referalAddress != address(0)) {\r\n            uint256 rewardAmount =  _calculateRewards(usdAmount);\r\n            if(rewardAmount > 0) {\r\n                userData[referalAddress].referalRewardUSDAmount += rewardAmount;\r\n                emit RewardAdded(edmReceipentAddress, referalAddress, activeStage, usdAmount, tokensToBuy, rewardAmount);\r\n            }\r\n        }\r\n\r\n        require(edm.transferAndVest(edmReceipentAddress, tokenWithBonus*ETH_MULTIPLIER), \"Token transfer failed\");\r\n    }\r\n\r\n    function claimUsdtRewards() external  {\r\n        uint256 usdAmount = userData[msg.sender].referalRewardUSDAmount;\r\n        require(usdAmount > 0, \"No rewards found.\");\r\n        userData[msg.sender].referalRewardUSDAmount = 0;\r\n        emit RewardClaimed(msg.sender, usdAmount, \"USDT\");\r\n        (bool success, ) = address(usdt).call(\r\n            abi.encodeWithSignature(\r\n                \"transfer(address,uint256)\",\r\n                msg.sender,\r\n                usdAmount* (10**usdt.decimals())\r\n            )\r\n        );\r\n        require(success, \"Claim failed\");\r\n        // require(usdt.transfer(msg.sender, usdAmount* (10**usdt.decimals())), \"Claim failed\");\r\n    }\r\n\r\n    function claimTokenRewards() external {\r\n        uint256 usdAmount = userData[msg.sender].referalRewardUSDAmount;\r\n        require(usdAmount > 0, \"No rewards found.\");\r\n        PresaleStage storage stage = presaleStages[activeStage];\r\n        uint256 tokensToReward = (usdAmount * ETH_MULTIPLIER) / stage.pricePerToken;\r\n        userData[msg.sender].referalRewardUSDAmount = 0;\r\n        emit RewardClaimed(msg.sender, tokensToReward, \"EDM\");\r\n        require(edm.transferAndVest(msg.sender, tokensToReward*ETH_MULTIPLIER), \"Token transfer failed\");\r\n    }\r\n\r\n    function claimRewards() external {\r\n        uint256 usdAmount = userData[msg.sender].referalRewardUSDAmount;\r\n        require(usdAmount > 0, \"No rewards found.\");\r\n        uint256 ethPriceUSD = getETHUSDPrice();\r\n        uint256 ethAmount = (usdAmount * (DOUBLE_ETH_MULTIPLIER) ) / ethPriceUSD; \r\n        userData[msg.sender].referalRewardUSDAmount = 0;\r\n        emit RewardClaimed(msg.sender, ethAmount, \"ETH\");\r\n        payable(msg.sender).transfer(ethAmount);\r\n    }\r\n\r\n    function _calculateRewards(uint256 usdAmount) public view returns(uint256) {\r\n        if (usdAmount >= rewardTiers[\"Platinum\"].minAmount) {\r\n            return (usdAmount * rewardTiers[\"Platinum\"].percentage) / 100; // 10% reward for Platinum\r\n        } else if (usdAmount >= rewardTiers[\"Gold\"].minAmount) {\r\n            return (usdAmount * rewardTiers[\"Gold\"].percentage) / 100; // 7% reward for Gold\r\n        } else if (usdAmount >= rewardTiers[\"Silver\"].minAmount) {\r\n            return (usdAmount * rewardTiers[\"Silver\"].percentage) / 100; // 5% reward for Silver\r\n        } else if (usdAmount >= rewardTiers[\"Bronze\"].minAmount) {\r\n            return (usdAmount * rewardTiers[\"Bronze\"].percentage) / 100; // 3% reward for Bronze\r\n        } else {\r\n            return 0; // No reward for amounts less than $100\r\n        }\r\n    }\r\n\r\n    function updateRewardTier(string memory tierName, uint256 minAmount, uint256 percentage) public onlyOwner {\r\n        require(percentage > 0, \"Percent must greater than zero\");\r\n        rewardTiers[tierName] = RewardTier({minAmount: minAmount, percentage: percentage});\r\n    }\r\n\r\n    function _activateNextStage() internal {\r\n        require(nextStage < stageCount, \"No more stages available\");\r\n        activeStage = nextStage;\r\n        nextStage++;\r\n        emit StageActivated(activeStage);\r\n    }\r\n\r\n    function getPreSaleStage(uint256 stageId) public view returns (PresaleStage memory stageDetails) {\r\n        stageDetails = presaleStages[stageId];\r\n        return stageDetails;\r\n    }\r\n\r\n    function getRewardTier(string memory tier) public view returns (RewardTier memory rewardTierDetails) {\r\n        rewardTierDetails = rewardTiers[tier];\r\n        return rewardTierDetails;\r\n    }\r\n\r\n    function getETHUSDPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        require(price > 0, \"Invalid ETH price\");\r\n        return uint256(price) * 10 ** 10; // Scale to 18 decimals\r\n    }\r\n\r\n    function withdrawUSDT(uint256 amount, address fundReceiver) external onlyOwner {\r\n        require(fundReceiver != address(0), \"Address must not be 0\");\r\n        require(amount > 0, \"Amount must not be 0\");\r\n        emit FundsWithdrawn(amount, \"USDT\");\r\n        (bool success, ) = address(usdt).call(\r\n            abi.encodeWithSignature(\r\n                \"transfer(address,uint256)\",\r\n                msg.sender,\r\n                amount\r\n            )\r\n        );\r\n        require(success, \"USDT Transfer failed\");\r\n        // usdt.transfer(fundReceiver, amount);\r\n    }\r\n\r\n    function withdrawEDM(uint256 amount, address fundReceiver) external onlyOwner {\r\n        require(fundReceiver != address(0), \"Address must not be 0\");\r\n        require(amount > 0, \"Amount must not be 0\");\r\n        emit FundsWithdrawn(amount, \"EDM\");\r\n        edm.transfer(fundReceiver, amount);\r\n    }\r\n\r\n    function withdrawEth(uint256 amount, address fundReceiver) external onlyOwner {\r\n        require(fundReceiver != address(0), \"Address must not be 0\");\r\n        require(amount > 0, \"Amount must not be 0\");\r\n        emit FundsWithdrawn(amount, \"ETH\");\r\n        payable(fundReceiver).transfer(amount);\r\n    }\r\n\r\n    function toggleBuyEnabled() external onlyOwner {\r\n        isBuyEnabled = !isBuyEnabled;\r\n    }\r\n\r\n    \r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}