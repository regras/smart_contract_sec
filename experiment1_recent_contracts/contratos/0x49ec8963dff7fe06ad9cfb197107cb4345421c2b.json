{"DepositRelayer (1).sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\nimport \"./Owner.sol\";\nimport \"./IERC20.sol\";\n\n contract DepositRelayer is Owner {\n\n    event DepositProcessed(\n        address indexed asset,\n        address indexed user,\n        uint256 indexed amount,\n        uint256 originChainId,\n        address referral\n    );\n\n    function handleRelayLinkDeposit(\n        address token,\n        uint256 amount,\n        address user,\n        uint256 originChainId,\n        address referral\n    ) external {\n        // Should be uncommented\n        // require(msg.sender == RELAY_LINK, \"Invalid caller\");\n        // address vault = preDepositVault[token];\n        // require(vault != address(0), \"Vault not set\");\n        // require(amount \u003e 0, \"Invalid amount\");\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n        // Should be a safeTransferFrom like:\n        // ERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Call the general _deposit function\n        // Should be uncommented\n        // _deposit(token, vault, msg.sender, amount, block.chainid, referral);\n\n        emit DepositProcessed(token, user, amount, originChainId, referral);\n    }\n\n    function rescue(address token) external isOwner {\n        IERC20(token).transfer(\n            msg.sender,\n            IERC20(token).balanceOf(address(this))\n        );\n    }    \n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}"},"Owner.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\ncontract Owner {\n\n    address private owner;\n    \n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    modifier isOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender; \n        emit OwnerSet(address(0), owner);\n    }\n\n    function changeOwner(address newOwner) public isOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}"}}