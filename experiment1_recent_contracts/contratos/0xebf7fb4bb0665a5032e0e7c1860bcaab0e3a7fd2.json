{{
  "language": "Solidity",
  "sources": {
    "src/contracts/pods/EigenPod.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.27;\n\nimport \"@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../libraries/BeaconChainProofs.sol\";\n\nimport \"../mixins/SemVerMixin.sol\";\n\nimport \"../interfaces/IETHPOSDeposit.sol\";\nimport \"../interfaces/IEigenPodManager.sol\";\nimport \"../interfaces/IPausable.sol\";\n\nimport \"./EigenPodPausingConstants.sol\";\nimport \"./EigenPodStorage.sol\";\n\n/**\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice This EigenPod Beacon Proxy implementation adheres to the current Deneb consensus specs\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\n */\ncontract EigenPod is\n    Initializable,\n    ReentrancyGuardUpgradeable,\n    EigenPodPausingConstants,\n    EigenPodStorage,\n    SemVerMixin\n{\n    using SafeERC20 for IERC20;\n    using BeaconChainProofs for *;\n\n    /**\n     *\n     *                            CONSTANTS / IMMUTABLES\n     *\n     */\n\n    /// @notice The beacon chain stores balances in Gwei, rather than wei. This value is used to convert between the two\n    uint256 internal constant GWEI_TO_WEI = 1e9;\n\n    /// @notice The address of the EIP-4788 beacon block root oracle\n    /// (See https://eips.ethereum.org/EIPS/eip-4788)\n    address internal constant BEACON_ROOTS_ADDRESS = 0x000F3df6D732807Ef1319fB7B8bB8522d0Beac02;\n\n    /// @notice The length of the EIP-4788 beacon block root ring buffer\n    uint256 internal constant BEACON_ROOTS_HISTORY_BUFFER_LENGTH = 8191;\n\n    /// @notice The beacon chain deposit contract\n    IETHPOSDeposit public immutable ethPOS;\n\n    /// @notice The single EigenPodManager for EigenLayer\n    IEigenPodManager public immutable eigenPodManager;\n\n    /// @notice This is the genesis time of the beacon state, to help us calculate conversions between slot and timestamp\n    uint64 public immutable GENESIS_TIME;\n\n    /**\n     *\n     *                                  MODIFIERS\n     *\n     */\n\n    /// @notice Callable only by the EigenPodManager\n    modifier onlyEigenPodManager() {\n        require(msg.sender == address(eigenPodManager), OnlyEigenPodManager());\n        _;\n    }\n\n    /// @notice Callable only by the pod's owner\n    modifier onlyEigenPodOwner() {\n        require(msg.sender == podOwner, OnlyEigenPodOwner());\n        _;\n    }\n\n    /// @notice Callable only by the pod's owner or proof submitter\n    modifier onlyOwnerOrProofSubmitter() {\n        require(msg.sender == podOwner || msg.sender == proofSubmitter, OnlyEigenPodOwnerOrProofSubmitter());\n        _;\n    }\n\n    /**\n     * @notice Based on 'Pausable' code, but uses the storage of the EigenPodManager instead of this contract. This construction\n     * is necessary for enabling pausing all EigenPods at the same time (due to EigenPods being Beacon Proxies).\n     * Modifier throws if the `indexed`th bit of `_paused` in the EigenPodManager is 1, i.e. if the `index`th pause switch is flipped.\n     */\n    modifier onlyWhenNotPaused(\n        uint8 index\n    ) {\n        require(!IPausable(address(eigenPodManager)).paused(index), CurrentlyPaused());\n        _;\n    }\n\n    /**\n     *\n     *                               CONSTRUCTOR / INIT\n     *\n     */\n    constructor(\n        IETHPOSDeposit _ethPOS,\n        IEigenPodManager _eigenPodManager,\n        uint64 _GENESIS_TIME,\n        string memory _version\n    ) SemVerMixin(_version) {\n        ethPOS = _ethPOS;\n        eigenPodManager = _eigenPodManager;\n        GENESIS_TIME = _GENESIS_TIME;\n        _disableInitializers();\n    }\n\n    /// @notice Used to initialize the pointers to addresses crucial to the pod's functionality. Called on construction by the EigenPodManager.\n    function initialize(\n        address _podOwner\n    ) external initializer {\n        require(_podOwner != address(0), InputAddressZero());\n        podOwner = _podOwner;\n    }\n\n    /**\n     *\n     *                                 EXTERNAL METHODS\n     *\n     */\n\n    /// @notice payable fallback function that receives ether deposited to the eigenpods contract\n    receive() external payable {\n        emit NonBeaconChainETHReceived(msg.value);\n    }\n\n    /**\n     * @dev Create a checkpoint used to prove this pod's active validator set. Checkpoints are completed\n     * by submitting one checkpoint proof per ACTIVE validator. During the checkpoint process, the total\n     * change in ACTIVE validator balance is tracked, and any validators with 0 balance are marked `WITHDRAWN`.\n     * @dev Once finalized, the pod owner is awarded shares corresponding to:\n     * - the total change in their ACTIVE validator balances\n     * - any ETH in the pod not already awarded shares\n     * @dev A checkpoint cannot be created if the pod already has an outstanding checkpoint. If\n     * this is the case, the pod owner MUST complete the existing checkpoint before starting a new one.\n     * @param revertIfNoBalance Forces a revert if the pod ETH balance is 0. This allows the pod owner\n     * to prevent accidentally starting a checkpoint that will not increase their shares\n     */\n    function startCheckpoint(\n        bool revertIfNoBalance\n    ) external onlyOwnerOrProofSubmitter onlyWhenNotPaused(PAUSED_START_CHECKPOINT) {\n        _startCheckpoint(revertIfNoBalance);\n    }\n\n    /**\n     * @dev Progress the current checkpoint towards completion by submitting one or more validator\n     * checkpoint proofs. Anyone can call this method to submit proofs towards the current checkpoint.\n     * For each validator proven, the current checkpoint's `proofsRemaining` decreases.\n     * @dev If the checkpoint's `proofsRemaining` reaches 0, the checkpoint is finalized.\n     * (see `_updateCheckpoint` for more details)\n     * @dev This method can only be called when there is a currently-active checkpoint.\n     * @param balanceContainerProof proves the beacon's current balance container root against a checkpoint's `beaconBlockRoot`\n     * @param proofs Proofs for one or more validator current balances against the `balanceContainerRoot`\n     */\n    function verifyCheckpointProofs(\n        BeaconChainProofs.BalanceContainerProof calldata balanceContainerProof,\n        BeaconChainProofs.BalanceProof[] calldata proofs\n    ) external onlyWhenNotPaused(PAUSED_EIGENPODS_VERIFY_CHECKPOINT_PROOFS) {\n        uint64 checkpointTimestamp = currentCheckpointTimestamp;\n        require(checkpointTimestamp != 0, NoActiveCheckpoint());\n\n        Checkpoint memory checkpoint = _currentCheckpoint;\n\n        // Verify `balanceContainerProof` against `beaconBlockRoot`\n        BeaconChainProofs.verifyBalanceContainer({\n            proofVersion: _getProofVersion(checkpointTimestamp),\n            beaconBlockRoot: checkpoint.beaconBlockRoot,\n            proof: balanceContainerProof\n        });\n\n        // Process each checkpoint proof submitted\n        uint64 exitedBalancesGwei;\n        for (uint256 i = 0; i < proofs.length; i++) {\n            BeaconChainProofs.BalanceProof calldata proof = proofs[i];\n            ValidatorInfo memory validatorInfo = _validatorPubkeyHashToInfo[proof.pubkeyHash];\n\n            // Validator must be in the ACTIVE state to be provable during a checkpoint.\n            // Validators become ACTIVE when initially proven via verifyWithdrawalCredentials\n            // Validators become WITHDRAWN when a checkpoint proof shows they have 0 balance\n            if (validatorInfo.status != VALIDATOR_STATUS.ACTIVE) {\n                continue;\n            }\n\n            // Ensure we aren't proving a validator twice for the same checkpoint. This will fail if:\n            // - validator submitted twice during this checkpoint\n            // - validator withdrawal credentials verified after checkpoint starts, then submitted\n            //   as a checkpoint proof\n            if (validatorInfo.lastCheckpointedAt >= checkpointTimestamp) {\n                continue;\n            }\n\n            // Process a checkpoint proof for a validator and update its balance.\n            //\n            // If the proof shows the validator has a balance of 0, they are marked `WITHDRAWN`.\n            // The assumption is that if this is the case, any withdrawn ETH was already in\n            // the pod when `startCheckpoint` was originally called.\n            (uint64 prevBalanceGwei, int64 balanceDeltaGwei, uint64 exitedBalanceGwei) = _verifyCheckpointProof({\n                validatorInfo: validatorInfo,\n                checkpointTimestamp: checkpointTimestamp,\n                balanceContainerRoot: balanceContainerProof.balanceContainerRoot,\n                proof: proof\n            });\n\n            checkpoint.proofsRemaining--;\n            checkpoint.prevBeaconBalanceGwei += prevBalanceGwei;\n            checkpoint.balanceDeltasGwei += balanceDeltaGwei;\n            exitedBalancesGwei += exitedBalanceGwei;\n\n            // Record the updated validator in state\n            _validatorPubkeyHashToInfo[proof.pubkeyHash] = validatorInfo;\n            emit ValidatorCheckpointed(checkpointTimestamp, uint40(validatorInfo.validatorIndex));\n        }\n\n        // Update the checkpoint and the total amount attributed to exited validators\n        checkpointBalanceExitedGwei[checkpointTimestamp] += exitedBalancesGwei;\n        _updateCheckpoint(checkpoint);\n    }\n\n    /**\n     * @dev Verify one or more validators have their withdrawal credentials pointed at this EigenPod, and award\n     * shares based on their effective balance. Proven validators are marked `ACTIVE` within the EigenPod, and\n     * future checkpoint proofs will need to include them.\n     * @dev Withdrawal credential proofs MUST NOT be older than `currentCheckpointTimestamp`.\n     * @dev Validators proven via this method MUST NOT have an exit epoch set already.\n     * @param beaconTimestamp the beacon chain timestamp sent to the 4788 oracle contract. Corresponds\n     * to the parent beacon block root against which the proof is verified.\n     * @param stateRootProof proves a beacon state root against a beacon block root\n     * @param validatorIndices a list of validator indices being proven\n     * @param validatorFieldsProofs proofs of each validator's `validatorFields` against the beacon state root\n     * @param validatorFields the fields of the beacon chain \"Validator\" container. See consensus specs for\n     * details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\n     */\n    function verifyWithdrawalCredentials(\n        uint64 beaconTimestamp,\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\n        uint40[] calldata validatorIndices,\n        bytes[] calldata validatorFieldsProofs,\n        bytes32[][] calldata validatorFields\n    ) external onlyOwnerOrProofSubmitter onlyWhenNotPaused(PAUSED_EIGENPODS_VERIFY_CREDENTIALS) {\n        require(\n            (validatorIndices.length == validatorFieldsProofs.length)\n                && (validatorFieldsProofs.length == validatorFields.length),\n            InputArrayLengthMismatch()\n        );\n\n        // Calling this method using a `beaconTimestamp` <= `currentCheckpointTimestamp` would allow\n        // a newly-verified validator to be submitted to `verifyCheckpointProofs`, making progress\n        // on an existing checkpoint.\n        require(beaconTimestamp > currentCheckpointTimestamp, BeaconTimestampTooFarInPast());\n\n        // Verify passed-in `beaconStateRoot` against the beacon block root\n        // forgefmt: disable-next-item\n        BeaconChainProofs.verifyStateRoot({\n            beaconBlockRoot: getParentBlockRoot(beaconTimestamp),\n            proof: stateRootProof\n        });\n\n        uint256 totalAmountToBeRestakedWei;\n        for (uint256 i = 0; i < validatorIndices.length; i++) {\n            // forgefmt: disable-next-item\n            totalAmountToBeRestakedWei += _verifyWithdrawalCredentials(\n                beaconTimestamp,\n                stateRootProof.beaconStateRoot,\n                validatorIndices[i],\n                validatorFieldsProofs[i],\n                validatorFields[i]\n            );\n        }\n\n        // Update the EigenPodManager on this pod's new balance\n        eigenPodManager.recordBeaconChainETHBalanceUpdate({\n            podOwner: podOwner,\n            prevRestakedBalanceWei: 0, // only used for checkpoint balance updates\n            balanceDeltaWei: int256(totalAmountToBeRestakedWei)\n        });\n    }\n\n    /**\n     * @dev Prove that one of this pod's active validators was slashed on the beacon chain. A successful\n     * staleness proof allows the caller to start a checkpoint.\n     *\n     * @dev Note that in order to start a checkpoint, any existing checkpoint must already be completed!\n     * (See `_startCheckpoint` for details)\n     *\n     * @dev Note that this method allows anyone to start a checkpoint as soon as a slashing occurs on the beacon\n     * chain. This is intended to make it easier to external watchers to keep a pod's balance up to date.\n     *\n     * @dev Note too that beacon chain slashings are not instant. There is a delay between the initial slashing event\n     * and the validator's final exit back to the execution layer. During this time, the validator's balance may or\n     * may not drop further due to a correlation penalty. This method allows proof of a slashed validator\n     * to initiate a checkpoint for as long as the validator remains on the beacon chain. Once the validator\n     * has exited and been checkpointed at 0 balance, they are no longer \"checkpoint-able\" and cannot be proven\n     * \"stale\" via this method.\n     * See https://eth2book.info/capella/part3/transition/epoch/#slashings for more info.\n     *\n     * @param beaconTimestamp the beacon chain timestamp sent to the 4788 oracle contract. Corresponds\n     * to the parent beacon block root against which the proof is verified.\n     * @param stateRootProof proves a beacon state root against a beacon block root\n     * @param proof the fields of the beacon chain \"Validator\" container, along with a merkle proof against\n     * the beacon state root. See the consensus specs for more details:\n     * https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\n     *\n     * @dev Staleness conditions:\n     * - Validator's last checkpoint is older than `beaconTimestamp`\n     * - Validator MUST be in `ACTIVE` status in the pod\n     * - Validator MUST be slashed on the beacon chain\n     */\n    function verifyStaleBalance(\n        uint64 beaconTimestamp,\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\n        BeaconChainProofs.ValidatorProof calldata proof\n    ) external onlyWhenNotPaused(PAUSED_START_CHECKPOINT) onlyWhenNotPaused(PAUSED_VERIFY_STALE_BALANCE) {\n        bytes32 validatorPubkey = proof.validatorFields.getPubkeyHash();\n        ValidatorInfo memory validatorInfo = _validatorPubkeyHashToInfo[validatorPubkey];\n\n        // Validator must be eligible for a staleness proof. Generally, this condition\n        // ensures that the staleness proof is newer than the last time we got an update\n        // on this validator.\n        //\n        // Note: It is possible for `validatorInfo.lastCheckpointedAt` to be 0 if\n        // a validator's withdrawal credentials are verified when no checkpoint has\n        // ever been completed in this pod. Technically, this would mean that `beaconTimestamp`\n        // can be any valid EIP-4788 timestamp - because any nonzero value satisfies the\n        // require below.\n        //\n        // However, in practice, if the only update we've seen from a validator is their\n        // `verifyWithdrawalCredentials` proof, any valid `verifyStaleBalance` proof is\n        // necessarily newer. This is because when a validator is initially slashed, their\n        // exit epoch is set. And because `verifyWithdrawalCredentials` rejects validators\n        // that have initiated exits, we know that if we're seeing a proof where the validator\n        // is slashed that it MUST be newer than the `verifyWithdrawalCredentials` proof\n        // (regardless of the relationship between `beaconTimestamp` and `lastCheckpointedAt`).\n        require(beaconTimestamp > validatorInfo.lastCheckpointedAt, BeaconTimestampTooFarInPast());\n\n        // Validator must be checkpoint-able\n        require(validatorInfo.status == VALIDATOR_STATUS.ACTIVE, ValidatorNotActiveInPod());\n\n        // Validator must be slashed on the beacon chain\n        require(proof.validatorFields.isValidatorSlashed(), ValidatorNotSlashedOnBeaconChain());\n\n        // Verify passed-in `beaconStateRoot` against the beacon block root\n        // forgefmt: disable-next-item\n        BeaconChainProofs.verifyStateRoot({\n            beaconBlockRoot: getParentBlockRoot(beaconTimestamp),\n            proof: stateRootProof\n        });\n\n        // Verify Validator container proof against `beaconStateRoot`\n        BeaconChainProofs.verifyValidatorFields({\n            proofVersion: _getProofVersion(beaconTimestamp),\n            beaconStateRoot: stateRootProof.beaconStateRoot,\n            validatorFields: proof.validatorFields,\n            validatorFieldsProof: proof.proof,\n            validatorIndex: uint40(validatorInfo.validatorIndex)\n        });\n\n        // Validator verified to be stale - start a checkpoint\n        _startCheckpoint(false);\n    }\n\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\n    function recoverTokens(\n        IERC20[] memory tokenList,\n        uint256[] memory amountsToWithdraw,\n        address recipient\n    ) external onlyEigenPodOwner onlyWhenNotPaused(PAUSED_NON_PROOF_WITHDRAWALS) {\n        require(tokenList.length == amountsToWithdraw.length, InputArrayLengthMismatch());\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            tokenList[i].safeTransfer(recipient, amountsToWithdraw[i]);\n        }\n    }\n\n    /// @notice Allows the owner of a pod to update the proof submitter, a permissioned\n    /// address that can call `startCheckpoint` and `verifyWithdrawalCredentials`.\n    /// @dev Note that EITHER the podOwner OR proofSubmitter can access these methods,\n    /// so it's fine to set your proofSubmitter to 0 if you want the podOwner to be the\n    /// only address that can call these methods.\n    /// @param newProofSubmitter The new proof submitter address. If set to 0, only the\n    /// pod owner will be able to call `startCheckpoint` and `verifyWithdrawalCredentials`\n    function setProofSubmitter(\n        address newProofSubmitter\n    ) external onlyEigenPodOwner {\n        emit ProofSubmitterUpdated(proofSubmitter, newProofSubmitter);\n        proofSubmitter = newProofSubmitter;\n    }\n\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\n    /// @dev This function only supports staking to a 0x01 validator. For compounding validators, please interact directly with the deposit contract.\n    function stake(\n        bytes calldata pubkey,\n        bytes calldata signature,\n        bytes32 depositDataRoot\n    ) external payable onlyEigenPodManager {\n        // stake on ethpos\n        require(msg.value == 32 ether, MsgValueNot32ETH());\n        ethPOS.deposit{value: 32 ether}(pubkey, _podWithdrawalCredentials(), signature, depositDataRoot);\n        emit EigenPodStaked(pubkey);\n    }\n\n    /**\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\n     * @dev The podOwner must have already proved sufficient withdrawals, so that this pod's `restakedExecutionLayerGwei` exceeds the\n     * `amountWei` input (when converted to GWEI).\n     * @dev `amountWei` is not required to be a whole Gwei amount. Amounts less than a Gwei multiple may be unrecoverable due to Gwei conversion.\n     */\n    function withdrawRestakedBeaconChainETH(address recipient, uint256 amountWei) external onlyEigenPodManager {\n        uint64 amountGwei = uint64(amountWei / GWEI_TO_WEI);\n        amountWei = amountGwei * GWEI_TO_WEI;\n        require(amountGwei <= restakedExecutionLayerGwei, InsufficientWithdrawableBalance());\n        restakedExecutionLayerGwei -= amountGwei;\n        emit RestakedBeaconChainETHWithdrawn(recipient, amountWei);\n        // transfer ETH from pod to `recipient` directly\n        Address.sendValue(payable(recipient), amountWei);\n    }\n\n    /**\n     *\n     *                             INTERNAL FUNCTIONS\n     *\n     */\n\n    /**\n     * @notice internal function that proves an individual validator's withdrawal credentials\n     * @param validatorIndex is the index of the validator being proven\n     * @param validatorFieldsProof is the bytes that prove the ETH validator's  withdrawal credentials against a beacon chain state root\n     * @param validatorFields are the fields of the \"Validator Container\", refer to consensus specs\n     */\n    function _verifyWithdrawalCredentials(\n        uint64 beaconTimestamp,\n        bytes32 beaconStateRoot,\n        uint40 validatorIndex,\n        bytes calldata validatorFieldsProof,\n        bytes32[] calldata validatorFields\n    ) internal returns (uint256) {\n        bytes32 pubkeyHash = validatorFields.getPubkeyHash();\n        ValidatorInfo memory validatorInfo = _validatorPubkeyHashToInfo[pubkeyHash];\n\n        // Withdrawal credential proofs should only be processed for \"INACTIVE\" validators\n        require(validatorInfo.status == VALIDATOR_STATUS.INACTIVE, CredentialsAlreadyVerified());\n\n        // Validator should be active on the beacon chain, or in the process of activating.\n        // This implies the validator has reached the minimum effective balance required\n        // to become active on the beacon chain.\n        //\n        // This check is important because the Pectra upgrade will move any validators that\n        // do NOT have an activation epoch to a \"pending deposit queue,\" temporarily resetting\n        // their current and effective balances to 0. This balance can be restored if a deposit\n        // is made to bring the validator's balance above the minimum activation balance.\n        // (See https://github.com/ethereum/consensus-specs/blob/dev/specs/electra/fork.md#upgrading-the-state)\n        //\n        // In the context of EigenLayer slashing, this temporary reset would allow pod shares\n        // to temporarily decrease, then be restored later. This would effectively prevent these\n        // shares from being slashable on EigenLayer for a short period of time.\n        require(\n            validatorFields.getActivationEpoch() != BeaconChainProofs.FAR_FUTURE_EPOCH, ValidatorInactiveOnBeaconChain()\n        );\n\n        // Validator should not already be in the process of exiting. This is an important property\n        // this method needs to enforce to ensure a validator cannot be already-exited by the time\n        // its withdrawal credentials are verified.\n        //\n        // Note that when a validator initiates an exit, two values are set:\n        // - exit_epoch\n        // - withdrawable_epoch\n        //\n        // The latter of these two values describes an epoch after which the validator's ETH MIGHT\n        // have been exited to the EigenPod, depending on the state of the beacon chain withdrawal\n        // queue.\n        //\n        // Requiring that a validator has not initiated exit by the time the EigenPod sees their\n        // withdrawal credentials guarantees that the validator has not fully exited at this point.\n        //\n        // This is because:\n        // - the earliest beacon chain slot allowed for withdrawal credential proofs is the earliest\n        //   slot available in the EIP-4788 oracle, which keeps the last 8192 slots.\n        // - when initiating an exit, a validator's earliest possible withdrawable_epoch is equal to\n        //   1 + MAX_SEED_LOOKAHEAD + MIN_VALIDATOR_WITHDRAWABILITY_DELAY == 261 epochs (8352 slots).\n        //\n        // (See https://eth2book.info/capella/part3/helper/mutators/#initiate_validator_exit)\n        require(validatorFields.getExitEpoch() == BeaconChainProofs.FAR_FUTURE_EPOCH, ValidatorIsExitingBeaconChain());\n\n        // Ensure the validator's withdrawal credentials are pointed at this pod\n        require(\n            validatorFields.getWithdrawalCredentials() == bytes32(_podWithdrawalCredentials())\n                || validatorFields.getWithdrawalCredentials() == bytes32(_podCompoundingWithdrawalCredentials()),\n            WithdrawalCredentialsNotForEigenPod()\n        );\n\n        // Get the validator's effective balance. Note that this method uses effective balance, while\n        // `verifyCheckpointProofs` uses current balance. Effective balance is updated per-epoch - so it's\n        // less accurate, but is good enough for verifying withdrawal credentials.\n        uint64 restakedBalanceGwei = validatorFields.getEffectiveBalanceGwei();\n\n        // Verify passed-in validatorFields against verified beaconStateRoot:\n        BeaconChainProofs.verifyValidatorFields({\n            proofVersion: _getProofVersion(beaconTimestamp),\n            beaconStateRoot: beaconStateRoot,\n            validatorFields: validatorFields,\n            validatorFieldsProof: validatorFieldsProof,\n            validatorIndex: validatorIndex\n        });\n\n        // Account for validator in future checkpoints. Note that if this pod has never started a\n        // checkpoint before, `lastCheckpointedAt` will be zero here. This is fine because the main\n        // purpose of `lastCheckpointedAt` is to enforce that newly-verified validators are not\n        // eligible to progress already-existing checkpoints - however in this case, no checkpoints exist.\n        activeValidatorCount++;\n        uint64 lastCheckpointedAt =\n            currentCheckpointTimestamp == 0 ? lastCheckpointTimestamp : currentCheckpointTimestamp;\n\n        // Proofs complete - create the validator in state\n        _validatorPubkeyHashToInfo[pubkeyHash] = ValidatorInfo({\n            validatorIndex: validatorIndex,\n            restakedBalanceGwei: restakedBalanceGwei,\n            lastCheckpointedAt: lastCheckpointedAt,\n            status: VALIDATOR_STATUS.ACTIVE\n        });\n\n        // Add the validator's balance to the checkpoint's previous beacon balance\n        // Note that even if this checkpoint is not active, the next one will include\n        // the validator's restaked balance during the checkpoint process\n        _currentCheckpoint.prevBeaconBalanceGwei += restakedBalanceGwei;\n\n        emit ValidatorRestaked(validatorIndex);\n        emit ValidatorBalanceUpdated(validatorIndex, lastCheckpointedAt, restakedBalanceGwei);\n        return restakedBalanceGwei * GWEI_TO_WEI;\n    }\n\n    function _verifyCheckpointProof(\n        ValidatorInfo memory validatorInfo,\n        uint64 checkpointTimestamp,\n        bytes32 balanceContainerRoot,\n        BeaconChainProofs.BalanceProof calldata proof\n    ) internal returns (uint64 prevBalanceGwei, int64 balanceDeltaGwei, uint64 exitedBalanceGwei) {\n        uint40 validatorIndex = uint40(validatorInfo.validatorIndex);\n\n        // Verify validator balance against `balanceContainerRoot`\n        prevBalanceGwei = validatorInfo.restakedBalanceGwei;\n        uint64 newBalanceGwei = BeaconChainProofs.verifyValidatorBalance({\n            balanceContainerRoot: balanceContainerRoot,\n            validatorIndex: validatorIndex,\n            proof: proof\n        });\n\n        // Calculate change in the validator's balance since the last proof\n        if (newBalanceGwei != prevBalanceGwei) {\n            balanceDeltaGwei = int64(newBalanceGwei) - int64(prevBalanceGwei);\n            emit ValidatorBalanceUpdated(validatorIndex, checkpointTimestamp, newBalanceGwei);\n        }\n\n        validatorInfo.restakedBalanceGwei = newBalanceGwei;\n        validatorInfo.lastCheckpointedAt = checkpointTimestamp;\n\n        // If the validator's new balance is 0, mark them withdrawn\n        if (newBalanceGwei == 0) {\n            activeValidatorCount--;\n            validatorInfo.status = VALIDATOR_STATUS.WITHDRAWN;\n            // If we reach this point, `balanceDeltaGwei` should always be negative,\n            // so this should be a safe conversion\n            exitedBalanceGwei = uint64(-balanceDeltaGwei);\n\n            emit ValidatorWithdrawn(checkpointTimestamp, validatorIndex);\n        }\n\n        return (prevBalanceGwei, balanceDeltaGwei, exitedBalanceGwei);\n    }\n\n    /**\n     * @dev Initiate a checkpoint proof by snapshotting both the pod's ETH balance and the\n     * current block's parent block root. After providing a checkpoint proof for each of the\n     * pod's ACTIVE validators, the pod's ETH balance is awarded shares and can be withdrawn.\n     * @dev ACTIVE validators are validators with verified withdrawal credentials (See\n     * `verifyWithdrawalCredentials` for details)\n     * @dev If the pod does not have any ACTIVE validators, the checkpoint is automatically\n     * finalized.\n     * @dev Once started, a checkpoint MUST be completed! It is not possible to start a\n     * checkpoint if the existing one is incomplete.\n     * @param revertIfNoBalance If the available ETH balance for checkpointing is 0 and this is\n     * true, this method will revert\n     */\n    function _startCheckpoint(\n        bool revertIfNoBalance\n    ) internal {\n        require(currentCheckpointTimestamp == 0, CheckpointAlreadyActive());\n\n        // Prevent a checkpoint being completable twice in the same block. This prevents an edge case\n        // where the second checkpoint would not be completable.\n        //\n        // This is because the validators checkpointed in the first checkpoint would have a `lastCheckpointedAt`\n        // value equal to the second checkpoint, causing their proofs to get skipped in `verifyCheckpointProofs`\n        require(lastCheckpointTimestamp != uint64(block.timestamp), CannotCheckpointTwiceInSingleBlock());\n\n        // Snapshot pod balance at the start of the checkpoint, subtracting pod balance that has\n        // previously been credited with shares. Once the checkpoint is finalized, `podBalanceGwei`\n        // will be added to the total validator balance delta and credited as shares.\n        //\n        // Note: On finalization, `podBalanceGwei` is added to `restakedExecutionLayerGwei`\n        // to denote that it has been credited with shares. Because this value is denominated in gwei,\n        // `podBalanceGwei` is also converted to a gwei amount here. This means that any sub-gwei amounts\n        // sent to the pod are not credited with shares and are therefore not withdrawable.\n        // This can be addressed by topping up a pod's balance to a value divisible by 1 gwei.\n        uint64 podBalanceGwei = uint64(address(this).balance / GWEI_TO_WEI) - restakedExecutionLayerGwei;\n\n        // If the caller doesn't want a \"0 balance\" checkpoint, revert\n        if (revertIfNoBalance && podBalanceGwei == 0) {\n            revert NoBalanceToCheckpoint();\n        }\n\n        // Create checkpoint using the previous block's root for proofs, and the current\n        // `activeValidatorCount` as the number of checkpoint proofs needed to finalize\n        // the checkpoint.\n        Checkpoint memory checkpoint = Checkpoint({\n            beaconBlockRoot: getParentBlockRoot(uint64(block.timestamp)),\n            proofsRemaining: uint24(activeValidatorCount),\n            podBalanceGwei: podBalanceGwei,\n            balanceDeltasGwei: 0,\n            prevBeaconBalanceGwei: 0\n        });\n\n        // Place checkpoint in storage. If `proofsRemaining` is 0, the checkpoint\n        // is automatically finalized.\n        currentCheckpointTimestamp = uint64(block.timestamp);\n        _updateCheckpoint(checkpoint);\n\n        emit CheckpointCreated(uint64(block.timestamp), checkpoint.beaconBlockRoot, checkpoint.proofsRemaining);\n    }\n\n    /**\n     * @dev Finish progress on a checkpoint and store it in state.\n     * @dev If the checkpoint has no proofs remaining, it is finalized:\n     * - a share delta is calculated and sent to the `EigenPodManager`\n     * - the checkpointed `podBalanceGwei` is added to `restakedExecutionLayerGwei`\n     * - `lastCheckpointTimestamp` is updated\n     * - `_currentCheckpoint` and `currentCheckpointTimestamp` are deleted\n     */\n    function _updateCheckpoint(\n        Checkpoint memory checkpoint\n    ) internal {\n        if (checkpoint.proofsRemaining != 0) {\n            _currentCheckpoint = checkpoint;\n            return;\n        }\n\n        // Calculate the previous total restaked balance and change in restaked balance\n        // Note: due to how these values are calculated, a negative `balanceDeltaGwei`\n        // should NEVER be greater in magnitude than `prevRestakedBalanceGwei`\n        uint64 prevRestakedBalanceGwei = restakedExecutionLayerGwei + checkpoint.prevBeaconBalanceGwei;\n        int64 balanceDeltaGwei = int64(checkpoint.podBalanceGwei) + checkpoint.balanceDeltasGwei;\n\n        // And native ETH when the checkpoint was started is now considered restaked.\n        // Add it to `restakedExecutionLayerGwei`, which allows it to be withdrawn via\n        // the `DelegationManager` withdrawal queue.\n        restakedExecutionLayerGwei += checkpoint.podBalanceGwei;\n\n        // Finalize the checkpoint by resetting `currentCheckpointTimestamp`.\n        // Note: `_currentCheckpoint` is not deleted, as it is overwritten\n        // when a new checkpoint is started\n        lastCheckpointTimestamp = currentCheckpointTimestamp;\n        delete currentCheckpointTimestamp;\n\n        // Convert shares and delta to wei\n        uint256 prevRestakedBalanceWei = prevRestakedBalanceGwei * GWEI_TO_WEI;\n        int256 balanceDeltaWei = balanceDeltaGwei * int256(GWEI_TO_WEI);\n\n        // Update pod owner's shares\n        emit CheckpointFinalized(lastCheckpointTimestamp, balanceDeltaWei);\n        eigenPodManager.recordBeaconChainETHBalanceUpdate({\n            podOwner: podOwner,\n            prevRestakedBalanceWei: prevRestakedBalanceWei,\n            balanceDeltaWei: balanceDeltaWei\n        });\n    }\n\n    function _podWithdrawalCredentials() internal view returns (bytes memory) {\n        return abi.encodePacked(bytes1(uint8(1)), bytes11(0), address(this));\n    }\n\n    function _podCompoundingWithdrawalCredentials() internal view returns (bytes memory) {\n        return abi.encodePacked(bytes1(uint8(2)), bytes11(0), address(this));\n    }\n\n    ///@notice Calculates the pubkey hash of a validator's pubkey as per SSZ spec\n    function _calculateValidatorPubkeyHash(\n        bytes memory validatorPubkey\n    ) internal pure returns (bytes32) {\n        require(validatorPubkey.length == 48, InvalidPubKeyLength());\n        return sha256(abi.encodePacked(validatorPubkey, bytes16(0)));\n    }\n\n    /**\n     *\n     *                         VIEW FUNCTIONS\n     *\n     */\n\n    /// @inheritdoc IEigenPod\n    function withdrawableRestakedExecutionLayerGwei() external view returns (uint64) {\n        return restakedExecutionLayerGwei;\n    }\n\n    /// @notice Returns the validatorInfo for a given validatorPubkeyHash\n    function validatorPubkeyHashToInfo(\n        bytes32 validatorPubkeyHash\n    ) external view returns (ValidatorInfo memory) {\n        return _validatorPubkeyHashToInfo[validatorPubkeyHash];\n    }\n\n    /// @notice Returns the validatorInfo for a given validatorPubkey\n    function validatorPubkeyToInfo(\n        bytes calldata validatorPubkey\n    ) external view returns (ValidatorInfo memory) {\n        return _validatorPubkeyHashToInfo[_calculateValidatorPubkeyHash(validatorPubkey)];\n    }\n\n    function validatorStatus(\n        bytes32 pubkeyHash\n    ) external view returns (VALIDATOR_STATUS) {\n        return _validatorPubkeyHashToInfo[pubkeyHash].status;\n    }\n\n    /// @notice Returns the validator status for a given validatorPubkey\n    function validatorStatus(\n        bytes calldata validatorPubkey\n    ) external view returns (VALIDATOR_STATUS) {\n        bytes32 validatorPubkeyHash = _calculateValidatorPubkeyHash(validatorPubkey);\n        return _validatorPubkeyHashToInfo[validatorPubkeyHash].status;\n    }\n\n    /// @notice Returns the currently-active checkpoint\n    function currentCheckpoint() public view returns (Checkpoint memory) {\n        return _currentCheckpoint;\n    }\n\n    /// @notice Query the 4788 oracle to get the parent block root of the slot with the given `timestamp`\n    /// @param timestamp of the block for which the parent block root will be returned. MUST correspond\n    /// to an existing slot within the last 24 hours. If the slot at `timestamp` was skipped, this method\n    /// will revert.\n    function getParentBlockRoot(\n        uint64 timestamp\n    ) public view returns (bytes32) {\n        require(block.timestamp - timestamp < BEACON_ROOTS_HISTORY_BUFFER_LENGTH * 12, TimestampOutOfRange());\n\n        (bool success, bytes memory result) = BEACON_ROOTS_ADDRESS.staticcall(abi.encode(timestamp));\n\n        require(success && result.length > 0, InvalidEIP4788Response());\n        return abi.decode(result, (bytes32));\n    }\n\n    /// @notice Returns the PROOF_TYPE depending on the `proofTimestamp` in relation to the fork timestamp.\n    function _getProofVersion(\n        uint64 proofTimestamp\n    ) internal view returns (BeaconChainProofs.ProofVersion) {\n        /// Get the timestamp of the Pectra fork, read from the `EigenPodManager`\n        /// This returns the timestamp of the first non-missed slot at or after the Pectra hard fork\n        uint64 forkTimestamp = eigenPodManager.pectraForkTimestamp();\n        require(forkTimestamp != 0, ForkTimestampZero());\n\n        /// We check if the proofTimestamp is <= pectraForkTimestamp because a `proofTimestamp` at the `pectraForkTimestamp`\n        /// is considered to be Pre-Pectra given the EIP-4788 oracle returns the parent block.\n        return proofTimestamp <= forkTimestamp\n            ? BeaconChainProofs.ProofVersion.DENEB\n            : BeaconChainProofs.ProofVersion.PECTRA;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-v4.9.0/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "src/contracts/libraries/BeaconChainProofs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./Merkle.sol\";\nimport \"../libraries/Endian.sol\";\n\n//Utility library for parsing and PHASE0 beacon chain block headers\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\nlibrary BeaconChainProofs {\n    /// @dev Thrown when a proof is invalid.\n    error InvalidProof();\n    /// @dev Thrown when a proof with an invalid length is provided.\n    error InvalidProofLength();\n    /// @dev Thrown when a validator fields length is invalid.\n    error InvalidValidatorFieldsLength();\n\n    /// @notice Heights of various merkle trees in the beacon chain\n    /// - beaconBlockRoot\n    /// |                                             HEIGHT: BEACON_BLOCK_HEADER_TREE_HEIGHT\n    /// -- beaconStateRoot\n    /// |                                             HEIGHT: BEACON_STATE_TREE_HEIGHT\n    /// validatorContainerRoot, balanceContainerRoot\n    /// |                       |                     HEIGHT: BALANCE_TREE_HEIGHT\n    /// |                       individual balances\n    /// |                                             HEIGHT: VALIDATOR_TREE_HEIGHT\n    /// individual validators\n    uint256 internal constant BEACON_BLOCK_HEADER_TREE_HEIGHT = 3;\n    uint256 internal constant DENEB_BEACON_STATE_TREE_HEIGHT = 5;\n    uint256 internal constant PECTRA_BEACON_STATE_TREE_HEIGHT = 6;\n    uint256 internal constant BALANCE_TREE_HEIGHT = 38;\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\n\n    /// @notice Index of the beaconStateRoot in the `BeaconBlockHeader` container\n    ///\n    /// BeaconBlockHeader = [..., state_root, ...]\n    ///                      0...      3\n    ///\n    /// (See https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader)\n    uint256 internal constant STATE_ROOT_INDEX = 3;\n\n    /// @notice Indices for fields in the `BeaconState` container\n    ///\n    /// BeaconState = [..., validators, balances, ...]\n    ///                0...     11         12\n    ///\n    /// (See https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconstate)\n    uint256 internal constant VALIDATOR_CONTAINER_INDEX = 11;\n    uint256 internal constant BALANCE_CONTAINER_INDEX = 12;\n\n    /// @notice Number of fields in the `Validator` container\n    /// (See https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator)\n    uint256 internal constant VALIDATOR_FIELDS_LENGTH = 8;\n\n    /// @notice Indices for fields in the `Validator` container\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\n    uint256 internal constant VALIDATOR_SLASHED_INDEX = 3;\n    uint256 internal constant VALIDATOR_ACTIVATION_EPOCH_INDEX = 5;\n    uint256 internal constant VALIDATOR_EXIT_EPOCH_INDEX = 6;\n\n    /// @notice Slot/Epoch timings\n    uint64 internal constant SECONDS_PER_SLOT = 12;\n    uint64 internal constant SLOTS_PER_EPOCH = 32;\n    uint64 internal constant SECONDS_PER_EPOCH = SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\n\n    /// @notice `FAR_FUTURE_EPOCH` is used as the default value for certain `Validator`\n    /// fields when a `Validator` is first created on the beacon chain\n    uint64 internal constant FAR_FUTURE_EPOCH = type(uint64).max;\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\n\n    /// @notice The beacon chain version to validate against\n    enum ProofVersion {\n        DENEB,\n        PECTRA\n    }\n\n    /// @notice Contains a beacon state root and a merkle proof verifying its inclusion under a beacon block root\n    struct StateRootProof {\n        bytes32 beaconStateRoot;\n        bytes proof;\n    }\n\n    /// @notice Contains a validator's fields and a merkle proof of their inclusion under a beacon state root\n    struct ValidatorProof {\n        bytes32[] validatorFields;\n        bytes proof;\n    }\n\n    /// @notice Contains a beacon balance container root and a proof of this root under a beacon block root\n    struct BalanceContainerProof {\n        bytes32 balanceContainerRoot;\n        bytes proof;\n    }\n\n    /// @notice Contains a validator balance root and a proof of its inclusion under a balance container root\n    struct BalanceProof {\n        bytes32 pubkeyHash;\n        bytes32 balanceRoot;\n        bytes proof;\n    }\n\n    /**\n     *\n     *              VALIDATOR FIELDS -> BEACON STATE ROOT -> BEACON BLOCK ROOT\n     *\n     */\n\n    /// @notice Verify a merkle proof of the beacon state root against a beacon block root\n    /// @param beaconBlockRoot merkle root of the beacon block\n    /// @param proof the beacon state root and merkle proof of its inclusion under `beaconBlockRoot`\n    function verifyStateRoot(bytes32 beaconBlockRoot, StateRootProof calldata proof) internal view {\n        require(proof.proof.length == 32 * (BEACON_BLOCK_HEADER_TREE_HEIGHT), InvalidProofLength());\n\n        /// This merkle proof verifies the `beaconStateRoot` under the `beaconBlockRoot`\n        /// - beaconBlockRoot\n        /// |                            HEIGHT: BEACON_BLOCK_HEADER_TREE_HEIGHT\n        /// -- beaconStateRoot\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: proof.proof,\n                root: beaconBlockRoot,\n                leaf: proof.beaconStateRoot,\n                index: STATE_ROOT_INDEX\n            }),\n            InvalidProof()\n        );\n    }\n\n    /// @notice Verify a merkle proof of a validator container against a `beaconStateRoot`\n    /// @dev This proof starts at a validator's container root, proves through the validator container root,\n    /// and continues proving to the root of the `BeaconState`\n    /// @dev See https://eth2book.info/capella/part3/containers/dependencies/#validator for info on `Validator` containers\n    /// @dev See https://eth2book.info/capella/part3/containers/state/#beaconstate for info on `BeaconState` containers\n    /// @param beaconStateRoot merkle root of the `BeaconState` container\n    /// @param validatorFields an individual validator's fields. These are merklized to form a `validatorRoot`,\n    /// which is used as the leaf to prove against `beaconStateRoot`\n    /// @param validatorFieldsProof a merkle proof of inclusion of `validatorFields` under `beaconStateRoot`\n    /// @param validatorIndex the validator's unique index\n    function verifyValidatorFields(\n        ProofVersion proofVersion,\n        bytes32 beaconStateRoot,\n        bytes32[] calldata validatorFields,\n        bytes calldata validatorFieldsProof,\n        uint40 validatorIndex\n    ) internal view {\n        require(validatorFields.length == VALIDATOR_FIELDS_LENGTH, InvalidValidatorFieldsLength());\n\n        uint256 beaconStateTreeHeight = getBeaconStateTreeHeight(proofVersion);\n\n        /// Note: the reason we use `VALIDATOR_TREE_HEIGHT + 1` here is because the merklization process for\n        /// this container includes hashing the root of the validator tree with the length of the validator list\n        require(\n            validatorFieldsProof.length == 32 * ((VALIDATOR_TREE_HEIGHT + 1) + beaconStateTreeHeight),\n            InvalidProofLength()\n        );\n\n        // Merkleize `validatorFields` to get the leaf to prove\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\n\n        /// This proof combines two proofs, so its index accounts for the relative position of leaves in two trees:\n        /// - beaconStateRoot\n        /// |                            HEIGHT: BEACON_STATE_TREE_HEIGHT\n        /// -- validatorContainerRoot\n        /// |                            HEIGHT: VALIDATOR_TREE_HEIGHT + 1\n        /// ---- validatorRoot\n        uint256 index = (VALIDATOR_CONTAINER_INDEX << (VALIDATOR_TREE_HEIGHT + 1)) | uint256(validatorIndex);\n\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: validatorFieldsProof,\n                root: beaconStateRoot,\n                leaf: validatorRoot,\n                index: index\n            }),\n            InvalidProof()\n        );\n    }\n\n    /**\n     *\n     *          VALIDATOR BALANCE -> BALANCE CONTAINER ROOT -> BEACON BLOCK ROOT\n     *\n     */\n\n    /// @notice Verify a merkle proof of the beacon state's balances container against the beacon block root\n    /// @dev This proof starts at the balance container root, proves through the beacon state root, and\n    /// continues proving through the beacon block root. As a result, this proof will contain elements\n    /// of a `StateRootProof` under the same block root, with the addition of proving the balances field\n    /// within the beacon state.\n    /// @dev This is used to make checkpoint proofs more efficient, as a checkpoint will verify multiple balances\n    /// against the same balance container root.\n    /// @param beaconBlockRoot merkle root of the beacon block\n    /// @param proof a beacon balance container root and merkle proof of its inclusion under `beaconBlockRoot`\n    function verifyBalanceContainer(\n        ProofVersion proofVersion,\n        bytes32 beaconBlockRoot,\n        BalanceContainerProof calldata proof\n    ) internal view {\n        uint256 beaconStateTreeHeight = getBeaconStateTreeHeight(proofVersion);\n\n        require(\n            proof.proof.length == 32 * (BEACON_BLOCK_HEADER_TREE_HEIGHT + beaconStateTreeHeight), InvalidProofLength()\n        );\n\n        /// This proof combines two proofs, so its index accounts for the relative position of leaves in two trees:\n        /// - beaconBlockRoot\n        /// |                            HEIGHT: BEACON_BLOCK_HEADER_TREE_HEIGHT\n        /// -- beaconStateRoot\n        /// |                            HEIGHT: BEACON_STATE_TREE_HEIGHT\n        /// ---- balancesContainerRoot\n        uint256 index = (STATE_ROOT_INDEX << (beaconStateTreeHeight)) | BALANCE_CONTAINER_INDEX;\n\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: proof.proof,\n                root: beaconBlockRoot,\n                leaf: proof.balanceContainerRoot,\n                index: index\n            }),\n            InvalidProof()\n        );\n    }\n\n    /// @notice Verify a merkle proof of a validator's balance against the beacon state's `balanceContainerRoot`\n    /// @param balanceContainerRoot the merkle root of all validators' current balances\n    /// @param validatorIndex the index of the validator whose balance we are proving\n    /// @param proof the validator's associated balance root and a merkle proof of inclusion under `balanceContainerRoot`\n    /// @return validatorBalanceGwei the validator's current balance (in gwei)\n    function verifyValidatorBalance(\n        bytes32 balanceContainerRoot,\n        uint40 validatorIndex,\n        BalanceProof calldata proof\n    ) internal view returns (uint64 validatorBalanceGwei) {\n        /// Note: the reason we use `BALANCE_TREE_HEIGHT + 1` here is because the merklization process for\n        /// this container includes hashing the root of the balances tree with the length of the balances list\n        require(proof.proof.length == 32 * (BALANCE_TREE_HEIGHT + 1), InvalidProofLength());\n\n        /// When merkleized, beacon chain balances are combined into groups of 4 called a `balanceRoot`. The merkle\n        /// proof here verifies that this validator's `balanceRoot` is included in the `balanceContainerRoot`\n        /// - balanceContainerRoot\n        /// |                            HEIGHT: BALANCE_TREE_HEIGHT\n        /// -- balanceRoot\n        uint256 balanceIndex = uint256(validatorIndex / 4);\n\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: proof.proof,\n                root: balanceContainerRoot,\n                leaf: proof.balanceRoot,\n                index: balanceIndex\n            }),\n            InvalidProof()\n        );\n\n        /// Extract the individual validator's balance from the `balanceRoot`\n        return getBalanceAtIndex(proof.balanceRoot, validatorIndex);\n    }\n\n    /**\n     * @notice Parses a balanceRoot to get the uint64 balance of a validator.\n     * @dev During merkleization of the beacon state balance tree, four uint64 values are treated as a single\n     * leaf in the merkle tree. We use validatorIndex % 4 to determine which of the four uint64 values to\n     * extract from the balanceRoot.\n     * @param balanceRoot is the combination of 4 validator balances being proven for\n     * @param validatorIndex is the index of the validator being proven for\n     * @return The validator's balance, in Gwei\n     */\n    function getBalanceAtIndex(bytes32 balanceRoot, uint40 validatorIndex) internal pure returns (uint64) {\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\n        return Endian.fromLittleEndianUint64(bytes32((uint256(balanceRoot) << bitShiftAmount)));\n    }\n\n    /// @notice Indices for fields in the `Validator` container:\n    /// 0: pubkey\n    /// 1: withdrawal credentials\n    /// 2: effective balance\n    /// 3: slashed?\n    /// 4: activation eligibility epoch\n    /// 5: activation epoch\n    /// 6: exit epoch\n    /// 7: withdrawable epoch\n    ///\n    /// (See https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator)\n\n    /// @dev Retrieves a validator's pubkey hash\n    function getPubkeyHash(\n        bytes32[] memory validatorFields\n    ) internal pure returns (bytes32) {\n        return validatorFields[VALIDATOR_PUBKEY_INDEX];\n    }\n\n    /// @dev Retrieves a validator's withdrawal credentials\n    function getWithdrawalCredentials(\n        bytes32[] memory validatorFields\n    ) internal pure returns (bytes32) {\n        return validatorFields[VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX];\n    }\n\n    /// @dev Retrieves a validator's effective balance (in gwei)\n    function getEffectiveBalanceGwei(\n        bytes32[] memory validatorFields\n    ) internal pure returns (uint64) {\n        return Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_BALANCE_INDEX]);\n    }\n\n    /// @dev Retrieves a validator's activation epoch\n    function getActivationEpoch(\n        bytes32[] memory validatorFields\n    ) internal pure returns (uint64) {\n        return Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_ACTIVATION_EPOCH_INDEX]);\n    }\n\n    /// @dev Retrieves true IFF a validator is marked slashed\n    function isValidatorSlashed(\n        bytes32[] memory validatorFields\n    ) internal pure returns (bool) {\n        return validatorFields[VALIDATOR_SLASHED_INDEX] != 0;\n    }\n\n    /// @dev Retrieves a validator's exit epoch\n    function getExitEpoch(\n        bytes32[] memory validatorFields\n    ) internal pure returns (uint64) {\n        return Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_EXIT_EPOCH_INDEX]);\n    }\n\n    /// @dev We check if the proofTimestamp is <= pectraForkTimestamp because a `proofTimestamp` at the `pectraForkTimestamp`\n    ///      is considered to be Pre-Pectra given the EIP-4788 oracle returns the parent block.\n    function getBeaconStateTreeHeight(\n        ProofVersion proofVersion\n    ) internal pure returns (uint256) {\n        return proofVersion == ProofVersion.DENEB ? DENEB_BEACON_STATE_TREE_HEIGHT : PECTRA_BEACON_STATE_TREE_HEIGHT;\n    }\n}\n"
    },
    "src/contracts/mixins/SemVerMixin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ISemVerMixin.sol\";\nimport \"@openzeppelin-upgrades/contracts/utils/ShortStringsUpgradeable.sol\";\n\n/// @title SemVerMixin\n/// @notice A mixin contract that provides semantic versioning functionality.\n/// @dev Follows SemVer 2.0.0 specification (https://semver.org/).\nabstract contract SemVerMixin is ISemVerMixin {\n    using ShortStringsUpgradeable for *;\n\n    /// @notice The semantic version string for this contract, stored as a ShortString for gas efficiency.\n    /// @dev Follows SemVer 2.0.0 specification (https://semver.org/). Prefixed with 'v' (e.g., \"v1.2.3\").\n    ShortString internal immutable _VERSION;\n\n    /// @notice Initializes the contract with a semantic version string.\n    /// @param _version The SemVer-formatted version string (e.g., \"v1.2.3\")\n    /// @dev Version should follow SemVer 2.0.0 format with 'v' prefix: vMAJOR.MINOR.PATCH\n    constructor(\n        string memory _version\n    ) {\n        _VERSION = _version.toShortString();\n    }\n\n    /// @inheritdoc ISemVerMixin\n    function version() public view virtual returns (string memory) {\n        return _VERSION.toString();\n    }\n\n    /// @notice Returns the major version of the contract.\n    /// @dev Supports single digit major versions (e.g., \"v1\" for version \"v1.2.3\")\n    /// @return The major version string (e.g., \"v1\" for version \"v1.2.3\")\n    function _majorVersion() internal view returns (string memory) {\n        bytes memory v = bytes(_VERSION.toString());\n        return string(bytes.concat(v[0], v[1]));\n    }\n}\n"
    },
    "src/contracts/interfaces/IETHPOSDeposit.sol": {
      "content": "// ┏━━━┓━┏┓━┏┓━━┏━━━┓━━┏━━━┓━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━┏┓━━━━━┏━━━┓━━━━━━━━━┏┓━━━━━━━━━━━━━━┏┓━\n// ┃┏━━┛┏┛┗┓┃┃━━┃┏━┓┃━━┃┏━┓┃━━━━┗┓┏┓┃━━━━━━━━━━━━━━━━━━┏┛┗┓━━━━┃┏━┓┃━━━━━━━━┏┛┗┓━━━━━━━━━━━━┏┛┗┓\n// ┃┗━━┓┗┓┏┛┃┗━┓┗┛┏┛┃━━┃┃━┃┃━━━━━┃┃┃┃┏━━┓┏━━┓┏━━┓┏━━┓┏┓┗┓┏┛━━━━┃┃━┗┛┏━━┓┏━┓━┗┓┏┛┏━┓┏━━┓━┏━━┓┗┓┏┛\n// ┃┏━━┛━┃┃━┃┏┓┃┏━┛┏┛━━┃┃━┃┃━━━━━┃┃┃┃┃┏┓┃┃┏┓┃┃┏┓┃┃━━┫┣┫━┃┃━━━━━┃┃━┏┓┃┏┓┃┃┏┓┓━┃┃━┃┏┛┗━┓┃━┃┏━┛━┃┃━\n// ┃┗━━┓━┃┗┓┃┃┃┃┃┃┗━┓┏┓┃┗━┛┃━━━━┏┛┗┛┃┃┃━┫┃┗┛┃┃┗┛┃┣━━┃┃┃━┃┗┓━━━━┃┗━┛┃┃┗┛┃┃┃┃┃━┃┗┓┃┃━┃┗┛┗┓┃┗━┓━┃┗┓\n// ┗━━━┛━┗━┛┗┛┗┛┗━━━┛┗┛┗━━━┛━━━━┗━━━┛┗━━┛┃┏━┛┗━━┛┗━━┛┗┛━┗━┛━━━━┗━━━┛┗━━┛┗┛┗┛━┗━┛┗┛━┗━━━┛┗━━┛━┗━┛\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┃┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┗┛━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n// SPDX-License-Identifier: CC0-1.0\n\npragma solidity >=0.5.0;\n\n// This interface is designed to be compatible with the Vyper version.\n/// @notice This is the Ethereum 2.0 deposit contract interface.\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\ninterface IETHPOSDeposit {\n    /// @notice A processed deposit event.\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\n\n    /// @notice Submit a Phase 0 DepositData object.\n    /// @param pubkey A BLS12-381 public key.\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\n    /// @param signature A BLS12-381 signature.\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\n    /// Used as a protection against malformed input.\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n    /// @notice Query the current deposit root hash.\n    /// @return The deposit root hash.\n    function get_deposit_root() external view returns (bytes32);\n\n    /// @notice Query the current deposit count.\n    /// @return The deposit count encoded as a little endian 64-bit number.\n    function get_deposit_count() external view returns (bytes memory);\n}\n"
    },
    "src/contracts/interfaces/IEigenPodManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\";\nimport \"./IETHPOSDeposit.sol\";\nimport \"./IStrategyManager.sol\";\nimport \"./IEigenPod.sol\";\nimport \"./IShareManager.sol\";\nimport \"./IPausable.sol\";\nimport \"./IStrategy.sol\";\nimport \"./ISemVerMixin.sol\";\n\ninterface IEigenPodManagerErrors {\n    /// @dev Thrown when caller is not a EigenPod.\n    error OnlyEigenPod();\n    /// @dev Thrown when caller is not DelegationManager.\n    error OnlyDelegationManager();\n    /// @dev Thrown when caller already has an EigenPod.\n    error EigenPodAlreadyExists();\n    /// @dev Thrown when shares is not a multiple of gwei.\n    error SharesNotMultipleOfGwei();\n    /// @dev Thrown when shares would result in a negative integer.\n    error SharesNegative();\n    /// @dev Thrown when the strategy is not the beaconChainETH strategy.\n    error InvalidStrategy();\n    /// @dev Thrown when the pods shares are negative and a beacon chain balance update is attempted.\n    /// The podOwner should complete legacy withdrawal first.\n    error LegacyWithdrawalsNotCompleted();\n    /// @dev Thrown when caller is not the proof timestamp setter\n    error OnlyProofTimestampSetter();\n}\n\ninterface IEigenPodManagerEvents {\n    /// @notice Emitted to notify the deployment of an EigenPod\n    event PodDeployed(address indexed eigenPod, address indexed podOwner);\n\n    /// @notice Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\n    event BeaconChainETHDeposited(address indexed podOwner, uint256 amount);\n\n    /// @notice Emitted when the balance of an EigenPod is updated\n    event PodSharesUpdated(address indexed podOwner, int256 sharesDelta);\n\n    /// @notice Emitted every time the total shares of a pod are updated\n    event NewTotalShares(address indexed podOwner, int256 newTotalShares);\n\n    /// @notice Emitted when a withdrawal of beacon chain ETH is completed\n    event BeaconChainETHWithdrawalCompleted(\n        address indexed podOwner,\n        uint256 shares,\n        uint96 nonce,\n        address delegatedAddress,\n        address withdrawer,\n        bytes32 withdrawalRoot\n    );\n\n    /// @notice Emitted when a staker's beaconChainSlashingFactor is updated\n    event BeaconChainSlashingFactorDecreased(\n        address staker, uint64 prevBeaconChainSlashingFactor, uint64 newBeaconChainSlashingFactor\n    );\n\n    /// @notice Emitted when an operator is slashed and shares to be burned are increased\n    event BurnableETHSharesIncreased(uint256 shares);\n\n    /// @notice Emitted when the Pectra fork timestamp is updated\n    event PectraForkTimestampSet(uint64 newPectraForkTimestamp);\n\n    /// @notice Emitted when the proof timestamp setter is updated\n    event ProofTimestampSetterSet(address newProofTimestampSetter);\n}\n\ninterface IEigenPodManagerTypes {\n    /**\n     * @notice The amount of beacon chain slashing experienced by a pod owner as a proportion of WAD\n     * @param isSet whether the slashingFactor has ever been updated. Used to distinguish between\n     * a value of \"0\" and an uninitialized value.\n     * @param slashingFactor the proportion of the pod owner's balance that has been decreased due to\n     * slashing or other beacon chain balance decreases.\n     * @dev NOTE: if !isSet, `slashingFactor` should be treated as WAD. `slashingFactor` is monotonically\n     * decreasing and can hit 0 if fully slashed.\n     */\n    struct BeaconChainSlashingFactor {\n        bool isSet;\n        uint64 slashingFactor;\n    }\n}\n\n/**\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\ninterface IEigenPodManager is\n    IEigenPodManagerErrors,\n    IEigenPodManagerEvents,\n    IEigenPodManagerTypes,\n    IShareManager,\n    IPausable,\n    ISemVerMixin\n{\n    /**\n     * @notice Creates an EigenPod for the sender.\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\n     * @dev Returns EigenPod address\n     */\n    function createPod() external returns (address);\n\n    /**\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\n     * Also creates an EigenPod for the sender if they don't have one already.\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\n     * @param signature The validator's signature of the deposit data.\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\n     */\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\n\n    /**\n     * @notice Adds any positive share delta to the pod owner's deposit shares, and delegates them to the pod\n     * owner's operator (if applicable). A negative share delta does NOT impact the pod owner's deposit shares,\n     * but will reduce their beacon chain slashing factor and delegated shares accordingly.\n     * @param podOwner is the pod owner whose balance is being updated.\n     * @param prevRestakedBalanceWei is the total amount restaked through the pod before the balance update, including\n     * any amount currently in the withdrawal queue.\n     * @param balanceDeltaWei is the amount the balance changed\n     * @dev Callable only by the podOwner's EigenPod contract.\n     * @dev Reverts if `sharesDelta` is not a whole Gwei amount\n     */\n    function recordBeaconChainETHBalanceUpdate(\n        address podOwner,\n        uint256 prevRestakedBalanceWei,\n        int256 balanceDeltaWei\n    ) external;\n\n    /// @notice Sets the address that can set proof timestamps\n    function setProofTimestampSetter(\n        address newProofTimestampSetter\n    ) external;\n\n    /// @notice Sets the Pectra fork timestamp, only callable by `proofTimestampSetter`\n    function setPectraForkTimestamp(\n        uint64 timestamp\n    ) external;\n\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\n    function ownerToPod(\n        address podOwner\n    ) external view returns (IEigenPod);\n\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\n    function getPod(\n        address podOwner\n    ) external view returns (IEigenPod);\n\n    /// @notice The ETH2 Deposit Contract\n    function ethPOS() external view returns (IETHPOSDeposit);\n\n    /// @notice Beacon proxy to which the EigenPods point\n    function eigenPodBeacon() external view returns (IBeacon);\n\n    /// @notice Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\n    function hasPod(\n        address podOwner\n    ) external view returns (bool);\n\n    /// @notice Returns the number of EigenPods that have been created\n    function numPods() external view returns (uint256);\n\n    /**\n     * @notice Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\n     * @dev The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can\n     * decrease between the pod owner queuing and completing a withdrawal.\n     * When the pod owner's shares would otherwise increase, this \"deficit\" is decreased first _instead_.\n     * Likewise, when a withdrawal is completed, this \"deficit\" is decreased and the withdrawal amount is decreased; We can think of this\n     * as the withdrawal \"paying off the deficit\".\n     */\n    function podOwnerDepositShares(\n        address podOwner\n    ) external view returns (int256);\n\n    /// @notice returns canonical, virtual beaconChainETH strategy\n    function beaconChainETHStrategy() external view returns (IStrategy);\n\n    /**\n     * @notice Returns the historical sum of proportional balance decreases a pod owner has experienced when\n     * updating their pod's balance.\n     */\n    function beaconChainSlashingFactor(\n        address staker\n    ) external view returns (uint64);\n\n    /// @notice Returns the accumulated amount of beacon chain ETH Strategy shares\n    function burnableETHShares() external view returns (uint256);\n\n    /// @notice Returns the timestamp of the Pectra hard fork\n    /// @dev Specifically, this returns the timestamp of the first non-missed slot at or after the Pectra hard fork\n    function pectraForkTimestamp() external view returns (uint64);\n}\n"
    },
    "src/contracts/interfaces/IPausable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"../interfaces/IPauserRegistry.sol\";\n\n/**\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\n * These functions should be permissioned as \"onlyPauser\" which defers to a `PauserRegistry` for determining access control.\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \"paused\"), and if you unpause,\n * you can only flip (any number of) switches to off/0 (aka \"paused\").\n * If you want a pauseXYZ function that just flips a single bit / \"pausing flag\", it will:\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\n * 2) update the paused state to this new value\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\n */\ninterface IPausable {\n    /// @dev Thrown when caller is not pauser.\n    error OnlyPauser();\n    /// @dev Thrown when caller is not unpauser.\n    error OnlyUnpauser();\n    /// @dev Thrown when currently paused.\n    error CurrentlyPaused();\n    /// @dev Thrown when invalid `newPausedStatus` is provided.\n    error InvalidNewPausedStatus();\n    /// @dev Thrown when a null address input is provided.\n    error InputAddressZero();\n\n    /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\n    event Paused(address indexed account, uint256 newPausedStatus);\n\n    /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\n    event Unpaused(address indexed account, uint256 newPausedStatus);\n\n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\n    function pauserRegistry() external view returns (IPauserRegistry);\n\n    /**\n     * @notice This function is used to pause an EigenLayer contract's functionality.\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\n     */\n    function pause(\n        uint256 newPausedStatus\n    ) external;\n\n    /**\n     * @notice Alias for `pause(type(uint256).max)`.\n     */\n    function pauseAll() external;\n\n    /**\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\n     */\n    function unpause(\n        uint256 newPausedStatus\n    ) external;\n\n    /// @notice Returns the current paused status as a uint256.\n    function paused() external view returns (uint256);\n\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\n    function paused(\n        uint8 index\n    ) external view returns (bool);\n}\n"
    },
    "src/contracts/pods/EigenPodPausingConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.27;\n\n/**\n * @title Constants shared between 'EigenPod' and 'EigenPodManager' contracts.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\nabstract contract EigenPodPausingConstants {\n    /// @notice Index for flag that pauses creation of new EigenPods when set. See EigenPodManager code for details.\n    uint8 internal constant PAUSED_NEW_EIGENPODS = 0;\n\n    // Deprecated\n    // uint8 internal constant PAUSED_WITHDRAW_RESTAKED_ETH = 1;\n\n    /// @notice Index for flag that pauses the deposit related functions *of the EigenPods* when set. see EigenPod code for details.\n    uint8 internal constant PAUSED_EIGENPODS_VERIFY_CREDENTIALS = 2;\n\n    // Deprecated\n    // uint8 internal constant PAUSED_EIGENPODS_VERIFY_BALANCE_UPDATE = 3;\n\n    // Deprecated\n    // uint8 internal constant PAUSED_EIGENPODS_VERIFY_WITHDRAWAL = 4;\n\n    /// @notice Pausability for EigenPod's \"accidental transfer\" withdrawal methods\n    uint8 internal constant PAUSED_NON_PROOF_WITHDRAWALS = 5;\n\n    uint8 internal constant PAUSED_START_CHECKPOINT = 6;\n\n    /// @notice Index for flag that pauses the `verifyCheckpointProofs` function *of the EigenPods* when set. see EigenPod code for details.\n    uint8 internal constant PAUSED_EIGENPODS_VERIFY_CHECKPOINT_PROOFS = 7;\n\n    uint8 internal constant PAUSED_VERIFY_STALE_BALANCE = 8;\n}\n"
    },
    "src/contracts/pods/EigenPodStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.27;\n\nimport \"../interfaces/IEigenPod.sol\";\n\nabstract contract EigenPodStorage is IEigenPod {\n    /// @notice The owner of this EigenPod\n    address public podOwner;\n\n    /// @notice DEPRECATED: previously used to track the time when restaking was activated\n    uint64 internal __deprecated_mostRecentWithdrawalTimestamp;\n\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from the Beacon Chain but not from EigenLayer),\n    uint64 internal restakedExecutionLayerGwei;\n\n    /// @notice DEPRECATED: previously used to track whether a pod had activated restaking\n    bool internal __deprecated_hasRestaked;\n\n    /// @notice DEPRECATED: previously tracked withdrawals proven per validator\n    mapping(bytes32 => mapping(uint64 => bool)) internal __deprecated_provenWithdrawal;\n\n    /// @notice This is a mapping that tracks a validator's information by their pubkey hash\n    mapping(bytes32 => ValidatorInfo) internal _validatorPubkeyHashToInfo;\n\n    /// @notice DEPRECATED: previously used to track ETH sent to the fallback function\n    uint256 internal __deprecated_nonBeaconChainETHBalanceWei;\n\n    /// @notice DEPRECATED: previously used to track claimed partial withdrawals\n    uint64 __deprecated_sumOfPartialWithdrawalsClaimedGwei;\n\n    /// @notice Number of validators with proven withdrawal credentials, who do not have proven full withdrawals\n    uint256 public activeValidatorCount;\n\n    /// @notice The timestamp of the last checkpoint finalized\n    uint64 public lastCheckpointTimestamp;\n\n    /// @notice The timestamp of the currently-active checkpoint. Will be 0 if there is not active checkpoint\n    uint64 public currentCheckpointTimestamp;\n\n    /// @notice For each checkpoint, the total balance attributed to exited validators, in gwei\n    ///\n    /// NOTE that the values added to this mapping are NOT guaranteed to capture the entirety of a validator's\n    /// exit - rather, they capture the total change in a validator's balance when a checkpoint shows their\n    /// balance change from nonzero to zero. While a change from nonzero to zero DOES guarantee that a validator\n    /// has been fully exited, it is possible that the magnitude of this change does not capture what is\n    /// typically thought of as a \"full exit.\"\n    ///\n    /// For example:\n    /// 1. Consider a validator was last checkpointed at 32 ETH before exiting. Once the exit has been processed,\n    /// it is expected that the validator's exited balance is calculated to be `32 ETH`.\n    /// 2. However, before `startCheckpoint` is called, a deposit is made to the validator for 1 ETH. The beacon\n    /// chain will automatically withdraw this ETH, but not until the withdrawal sweep passes over the validator\n    /// again. Until this occurs, the validator's current balance (used for checkpointing) is 1 ETH.\n    /// 3. If `startCheckpoint` is called at this point, the balance delta calculated for this validator will be\n    /// `-31 ETH`, and because the validator has a nonzero balance, it is not marked WITHDRAWN.\n    /// 4. After the exit is processed by the beacon chain, a subsequent `startCheckpoint` and checkpoint proof\n    /// will calculate a balance delta of `-1 ETH` and attribute a 1 ETH exit to the validator.\n    ///\n    /// If this edge case impacts your usecase, it should be possible to mitigate this by monitoring for deposits\n    /// to your exited validators, and waiting to call `startCheckpoint` until those deposits have been automatically\n    /// exited.\n    ///\n    /// Additional edge cases this mapping does not cover:\n    /// - If a validator is slashed, their balance exited will reflect their original balance rather than the slashed amount\n    /// - The final partial withdrawal for an exited validator will be likely be included in this mapping.\n    ///   i.e. if a validator was last checkpointed at 32.1 ETH before exiting, the next checkpoint will calculate their\n    ///   \"exited\" amount to be 32.1 ETH rather than 32 ETH.\n    mapping(uint64 => uint64) public checkpointBalanceExitedGwei;\n\n    /// @notice The current checkpoint, if there is one active\n    Checkpoint internal _currentCheckpoint;\n\n    /// @notice An address with permissions to call `startCheckpoint` and `verifyWithdrawalCredentials`, set\n    /// by the podOwner. This role exists to allow a podOwner to designate a hot wallet that can call\n    /// these methods, allowing the podOwner to remain a cold wallet that is only used to manage funds.\n    /// @dev If this address is NOT set, only the podOwner can call `startCheckpoint` and `verifyWithdrawalCredentials`\n    address public proofSubmitter;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[35] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v4.9.0/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts-v4.9.0/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "lib/openzeppelin-contracts-v4.9.0/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "src/contracts/libraries/Merkle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary Merkle {\n    error InvalidProofLength();\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\n     */\n    function verifyInclusionKeccak(\n        bytes memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint256 index\n    ) internal pure returns (bool) {\n        return processInclusionProofKeccak(proof, leaf, index) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     * @dev If the proof length is 0 then the leaf hash is returned.\n     *\n     * _Available since v4.4._\n     *\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\n     */\n    function processInclusionProofKeccak(\n        bytes memory proof,\n        bytes32 leaf,\n        uint256 index\n    ) internal pure returns (bytes32) {\n        require(proof.length % 32 == 0, InvalidProofLength());\n        bytes32 computedHash = leaf;\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            if (index % 2 == 0) {\n                // if ith bit of index is 0, then computedHash is a left sibling\n                assembly {\n                    mstore(0x00, computedHash)\n                    mstore(0x20, mload(add(proof, i)))\n                    computedHash := keccak256(0x00, 0x40)\n                    index := div(index, 2)\n                }\n            } else {\n                // if ith bit of index is 1, then computedHash is a right sibling\n                assembly {\n                    mstore(0x00, mload(add(proof, i)))\n                    mstore(0x20, computedHash)\n                    computedHash := keccak256(0x00, 0x40)\n                    index := div(index, 2)\n                }\n            }\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * Note this is for a Merkle tree using the sha256 hash function\n     */\n    function verifyInclusionSha256(\n        bytes memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint256 index\n    ) internal view returns (bool) {\n        return processInclusionProofSha256(proof, leaf, index) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * _Available since v4.4._\n     *\n     * Note this is for a Merkle tree using the sha256 hash function\n     */\n    function processInclusionProofSha256(\n        bytes memory proof,\n        bytes32 leaf,\n        uint256 index\n    ) internal view returns (bytes32) {\n        require(proof.length != 0 && proof.length % 32 == 0, InvalidProofLength());\n        bytes32[1] memory computedHash = [leaf];\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            if (index % 2 == 0) {\n                // if ith bit of index is 0, then computedHash is a left sibling\n                assembly {\n                    mstore(0x00, mload(computedHash))\n                    mstore(0x20, mload(add(proof, i)))\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) { revert(0, 0) }\n                    index := div(index, 2)\n                }\n            } else {\n                // if ith bit of index is 1, then computedHash is a right sibling\n                assembly {\n                    mstore(0x00, mload(add(proof, i)))\n                    mstore(0x20, mload(computedHash))\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) { revert(0, 0) }\n                    index := div(index, 2)\n                }\n            }\n        }\n        return computedHash[0];\n    }\n\n    /**\n     * @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\n     *  @param leaves the leaves of the merkle tree\n     *  @return The computed Merkle root of the tree.\n     *  @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\n     */\n    function merkleizeSha256(\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32) {\n        //there are half as many nodes in the layer above the leaves\n        uint256 numNodesInLayer = leaves.length / 2;\n        //create a layer to store the internal nodes\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\n        //fill the layer with the pairwise hashes of the leaves\n        for (uint256 i = 0; i < numNodesInLayer; i++) {\n            layer[i] = sha256(abi.encodePacked(leaves[2 * i], leaves[2 * i + 1]));\n        }\n        //the next layer above has half as many nodes\n        numNodesInLayer /= 2;\n        //while we haven't computed the root\n        while (numNodesInLayer != 0) {\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\n            for (uint256 i = 0; i < numNodesInLayer; i++) {\n                layer[i] = sha256(abi.encodePacked(layer[2 * i], layer[2 * i + 1]));\n            }\n            //the next layer above has half as many nodes\n            numNodesInLayer /= 2;\n        }\n        //the first node in the layer is the root\n        return layer[0];\n    }\n}\n"
    },
    "src/contracts/libraries/Endian.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nlibrary Endian {\n    /**\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\n     * @return n The big endian-formatted uint64\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\n     * through a right-shift/shr operation.\n     */\n    function fromLittleEndianUint64(\n        bytes32 lenum\n    ) internal pure returns (uint64 n) {\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\n        n = uint64(uint256(lenum >> 192));\n        // forgefmt: disable-next-item\n        return (n >> 56) | \n            ((0x00FF000000000000 & n) >> 40) | \n            ((0x0000FF0000000000 & n) >> 24) | \n            ((0x000000FF00000000 & n) >> 8)  | \n            ((0x00000000FF000000 & n) << 8)  | \n            ((0x0000000000FF0000 & n) << 24) | \n            ((0x000000000000FF00 & n) << 40) | \n            ((0x00000000000000FF & n) << 56);\n    }\n}\n"
    },
    "src/contracts/interfaces/ISemVerMixin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/// @title ISemVerMixin\n/// @notice A mixin interface that provides semantic versioning functionality.\n/// @dev Follows SemVer 2.0.0 specification (https://semver.org/)\ninterface ISemVerMixin {\n    /// @notice Returns the semantic version string of the contract.\n    /// @return The version string in SemVer format (e.g., \"v1.1.1\")\n    function version() external view returns (string memory);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/ShortStringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlotUpgradeable.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStringsUpgradeable {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlotUpgradeable.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v4.9.0/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "src/contracts/interfaces/IStrategyManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"./IStrategy.sol\";\nimport \"./IShareManager.sol\";\nimport \"./IDelegationManager.sol\";\nimport \"./IEigenPodManager.sol\";\nimport \"./ISemVerMixin.sol\";\n\ninterface IStrategyManagerErrors {\n    /// @dev Thrown when total strategies deployed exceeds max.\n    error MaxStrategiesExceeded();\n    /// @dev Thrown when call attempted from address that's not delegation manager.\n    error OnlyDelegationManager();\n    /// @dev Thrown when call attempted from address that's not strategy whitelister.\n    error OnlyStrategyWhitelister();\n    /// @dev Thrown when provided `shares` amount is too high.\n    error SharesAmountTooHigh();\n    /// @dev Thrown when provided `shares` amount is zero.\n    error SharesAmountZero();\n    /// @dev Thrown when provided `staker` address is null.\n    error StakerAddressZero();\n    /// @dev Thrown when provided `strategy` not found.\n    error StrategyNotFound();\n    /// @dev Thrown when attempting to deposit to a non-whitelisted strategy.\n    error StrategyNotWhitelisted();\n}\n\ninterface IStrategyManagerEvents {\n    /**\n     * @notice Emitted when a new deposit occurs on behalf of `staker`.\n     * @param staker Is the staker who is depositing funds into EigenLayer.\n     * @param strategy Is the strategy that `staker` has deposited into.\n     * @param shares Is the number of new shares `staker` has been granted in `strategy`.\n     */\n    event Deposit(address staker, IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted when the `strategyWhitelister` is changed\n    event StrategyWhitelisterChanged(address previousAddress, address newAddress);\n\n    /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\n    event StrategyAddedToDepositWhitelist(IStrategy strategy);\n\n    /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\n    event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\n\n    /// @notice Emitted when an operator is slashed and shares to be burned are increased\n    event BurnableSharesIncreased(IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted when shares are burned\n    event BurnableSharesDecreased(IStrategy strategy, uint256 shares);\n}\n\n/**\n * @title Interface for the primary entrypoint for funds into EigenLayer.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice See the `StrategyManager` contract itself for implementation details.\n */\ninterface IStrategyManager is IStrategyManagerErrors, IStrategyManagerEvents, IShareManager, ISemVerMixin {\n    /**\n     * @notice Initializes the strategy manager contract. Sets the `pauserRegistry` (currently **not** modifiable after being set),\n     * and transfers contract ownership to the specified `initialOwner`.\n     * @param initialOwner Ownership of this contract is transferred to this address.\n     * @param initialStrategyWhitelister The initial value of `strategyWhitelister` to set.\n     * @param initialPausedStatus The initial value of `_paused` to set.\n     */\n    function initialize(\n        address initialOwner,\n        address initialStrategyWhitelister,\n        uint256 initialPausedStatus\n    ) external;\n\n    /**\n     * @notice Deposits `amount` of `token` into the specified `strategy` and credits shares to the caller\n     * @param strategy the strategy that handles `token`\n     * @param token the token from which the `amount` will be transferred\n     * @param amount the number of tokens to deposit\n     * @return depositShares the number of deposit shares credited to the caller\n     * @dev The caller must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n     *\n     * WARNING: Be extremely cautious when depositing tokens that do not strictly adhere to ERC20 standards.\n     * Tokens that diverge significantly from ERC20 norms can cause unexpected behavior in token balances for\n     * that strategy, e.g. ERC-777 tokens allowing cross-contract reentrancy.\n     */\n    function depositIntoStrategy(\n        IStrategy strategy,\n        IERC20 token,\n        uint256 amount\n    ) external returns (uint256 depositShares);\n\n    /**\n     * @notice Deposits `amount` of `token` into the specified `strategy` and credits shares to the `staker`\n     * Note tokens are transferred from `msg.sender`, NOT from `staker`. This method allows the caller, using a\n     * signature, to deposit their tokens to another staker's balance.\n     * @param strategy the strategy that handles `token`\n     * @param token the token from which the `amount` will be transferred\n     * @param amount the number of tokens to transfer from the caller to the strategy\n     * @param staker the staker that the deposited assets will be credited to\n     * @param expiry the timestamp at which the signature expires\n     * @param signature a valid ECDSA or EIP-1271 signature from `staker`\n     * @return depositShares the number of deposit shares credited to `staker`\n     * @dev The caller must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n     *\n     * WARNING: Be extremely cautious when depositing tokens that do not strictly adhere to ERC20 standards.\n     * Tokens that diverge significantly from ERC20 norms can cause unexpected behavior in token balances for\n     * that strategy, e.g. ERC-777 tokens allowing cross-contract reentrancy.\n     */\n    function depositIntoStrategyWithSignature(\n        IStrategy strategy,\n        IERC20 token,\n        uint256 amount,\n        address staker,\n        uint256 expiry,\n        bytes memory signature\n    ) external returns (uint256 depositShares);\n\n    /**\n     * @notice Burns Strategy shares for the given strategy by calling into the strategy to transfer\n     * to the default burn address.\n     * @param strategy The strategy to burn shares in.\n     */\n    function burnShares(\n        IStrategy strategy\n    ) external;\n\n    /**\n     * @notice Owner-only function to change the `strategyWhitelister` address.\n     * @param newStrategyWhitelister new address for the `strategyWhitelister`.\n     */\n    function setStrategyWhitelister(\n        address newStrategyWhitelister\n    ) external;\n\n    /**\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\n     */\n    function addStrategiesToDepositWhitelist(\n        IStrategy[] calldata strategiesToWhitelist\n    ) external;\n\n    /**\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\n     */\n    function removeStrategiesFromDepositWhitelist(\n        IStrategy[] calldata strategiesToRemoveFromWhitelist\n    ) external;\n\n    /// @notice Returns bool for whether or not `strategy` is whitelisted for deposit\n    function strategyIsWhitelistedForDeposit(\n        IStrategy strategy\n    ) external view returns (bool);\n\n    /**\n     * @notice Get all details on the staker's deposits and corresponding shares\n     * @return (staker's strategies, shares in these strategies)\n     */\n    function getDeposits(\n        address staker\n    ) external view returns (IStrategy[] memory, uint256[] memory);\n\n    function getStakerStrategyList(\n        address staker\n    ) external view returns (IStrategy[] memory);\n\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\n    function stakerStrategyListLength(\n        address staker\n    ) external view returns (uint256);\n\n    /// @notice Returns the current shares of `user` in `strategy`\n    function stakerDepositShares(address user, IStrategy strategy) external view returns (uint256 shares);\n\n    /// @notice Returns the single, central Delegation contract of EigenLayer\n    function delegation() external view returns (IDelegationManager);\n\n    /// @notice Returns the address of the `strategyWhitelister`\n    function strategyWhitelister() external view returns (address);\n\n    /// @notice Returns the burnable shares of a strategy\n    function getBurnableShares(\n        IStrategy strategy\n    ) external view returns (uint256);\n\n    /**\n     * @notice Gets every strategy with burnable shares and the amount of burnable shares in each said strategy\n     *\n     * WARNING: This operation can copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Users should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function getStrategiesWithBurnableShares() external view returns (address[] memory, uint256[] memory);\n\n    /**\n     * @param staker The address of the staker.\n     * @param strategy The strategy to deposit into.\n     * @param token The token to deposit.\n     * @param amount The amount of `token` to deposit.\n     * @param nonce The nonce of the staker.\n     * @param expiry The expiry of the signature.\n     * @return The EIP-712 signable digest hash.\n     */\n    function calculateStrategyDepositDigestHash(\n        address staker,\n        IStrategy strategy,\n        IERC20 token,\n        uint256 amount,\n        uint256 nonce,\n        uint256 expiry\n    ) external view returns (bytes32);\n}\n"
    },
    "src/contracts/interfaces/IEigenPod.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../libraries/BeaconChainProofs.sol\";\nimport \"./ISemVerMixin.sol\";\nimport \"./IEigenPodManager.sol\";\n\ninterface IEigenPodErrors {\n    /// @dev Thrown when msg.sender is not the EPM.\n    error OnlyEigenPodManager();\n    /// @dev Thrown when msg.sender is not the pod owner.\n    error OnlyEigenPodOwner();\n    /// @dev Thrown when msg.sender is not owner or the proof submitter.\n    error OnlyEigenPodOwnerOrProofSubmitter();\n    /// @dev Thrown when attempting an action that is currently paused.\n    error CurrentlyPaused();\n\n    /// Invalid Inputs\n\n    /// @dev Thrown when an address of zero is provided.\n    error InputAddressZero();\n    /// @dev Thrown when two array parameters have mismatching lengths.\n    error InputArrayLengthMismatch();\n    /// @dev Thrown when `validatorPubKey` length is not equal to 48-bytes.\n    error InvalidPubKeyLength();\n    /// @dev Thrown when provided timestamp is out of range.\n    error TimestampOutOfRange();\n\n    /// Checkpoints\n\n    /// @dev Thrown when no active checkpoints are found.\n    error NoActiveCheckpoint();\n    /// @dev Thrown if an uncompleted checkpoint exists.\n    error CheckpointAlreadyActive();\n    /// @dev Thrown if there's not a balance available to checkpoint.\n    error NoBalanceToCheckpoint();\n    /// @dev Thrown when attempting to create a checkpoint twice within a given block.\n    error CannotCheckpointTwiceInSingleBlock();\n\n    /// Withdrawing\n\n    /// @dev Thrown when amount exceeds `restakedExecutionLayerGwei`.\n    error InsufficientWithdrawableBalance();\n\n    /// Validator Status\n\n    /// @dev Thrown when a validator's withdrawal credentials have already been verified.\n    error CredentialsAlreadyVerified();\n    /// @dev Thrown if the provided proof is not valid for this EigenPod.\n    error WithdrawalCredentialsNotForEigenPod();\n    /// @dev Thrown when a validator is not in the ACTIVE status in the pod.\n    error ValidatorNotActiveInPod();\n    /// @dev Thrown when validator is not active yet on the beacon chain.\n    error ValidatorInactiveOnBeaconChain();\n    /// @dev Thrown if a validator is exiting the beacon chain.\n    error ValidatorIsExitingBeaconChain();\n    /// @dev Thrown when a validator has not been slashed on the beacon chain.\n    error ValidatorNotSlashedOnBeaconChain();\n\n    /// Misc\n\n    /// @dev Thrown when an invalid block root is returned by the EIP-4788 oracle.\n    error InvalidEIP4788Response();\n    /// @dev Thrown when attempting to send an invalid amount to the beacon deposit contract.\n    error MsgValueNot32ETH();\n    /// @dev Thrown when provided `beaconTimestamp` is too far in the past.\n    error BeaconTimestampTooFarInPast();\n    /// @dev Thrown when the pectraForkTimestamp returned from the EigenPodManager is zero\n    error ForkTimestampZero();\n}\n\ninterface IEigenPodTypes {\n    enum VALIDATOR_STATUS {\n        INACTIVE, // doesnt exist\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\n        WITHDRAWN // withdrawn from the Beacon Chain\n\n    }\n\n    struct ValidatorInfo {\n        // index of the validator in the beacon chain\n        uint64 validatorIndex;\n        // amount of beacon chain ETH restaked on EigenLayer in gwei\n        uint64 restakedBalanceGwei;\n        //timestamp of the validator's most recent balance update\n        uint64 lastCheckpointedAt;\n        // status of the validator\n        VALIDATOR_STATUS status;\n    }\n\n    struct Checkpoint {\n        bytes32 beaconBlockRoot;\n        uint24 proofsRemaining;\n        uint64 podBalanceGwei;\n        int64 balanceDeltasGwei;\n        uint64 prevBeaconBalanceGwei;\n    }\n}\n\ninterface IEigenPodEvents is IEigenPodTypes {\n    /// @notice Emitted when an ETH validator stakes via this eigenPod\n    event EigenPodStaked(bytes pubkey);\n\n    /// @notice Emitted when a pod owner updates the proof submitter address\n    event ProofSubmitterUpdated(address prevProofSubmitter, address newProofSubmitter);\n\n    /// @notice Emitted when an ETH validator's withdrawal credentials are successfully verified to be pointed to this eigenPod\n    event ValidatorRestaked(uint40 validatorIndex);\n\n    /// @notice Emitted when an ETH validator's  balance is proven to be updated.  Here newValidatorBalanceGwei\n    //  is the validator's balance that is credited on EigenLayer.\n    event ValidatorBalanceUpdated(uint40 validatorIndex, uint64 balanceTimestamp, uint64 newValidatorBalanceGwei);\n\n    /// @notice Emitted when restaked beacon chain ETH is withdrawn from the eigenPod.\n    event RestakedBeaconChainETHWithdrawn(address indexed recipient, uint256 amount);\n\n    /// @notice Emitted when ETH is received via the `receive` fallback\n    event NonBeaconChainETHReceived(uint256 amountReceived);\n\n    /// @notice Emitted when a checkpoint is created\n    event CheckpointCreated(\n        uint64 indexed checkpointTimestamp, bytes32 indexed beaconBlockRoot, uint256 validatorCount\n    );\n\n    /// @notice Emitted when a checkpoint is finalized\n    event CheckpointFinalized(uint64 indexed checkpointTimestamp, int256 totalShareDeltaWei);\n\n    /// @notice Emitted when a validator is proven for a given checkpoint\n    event ValidatorCheckpointed(uint64 indexed checkpointTimestamp, uint40 indexed validatorIndex);\n\n    /// @notice Emitted when a validaor is proven to have 0 balance at a given checkpoint\n    event ValidatorWithdrawn(uint64 indexed checkpointTimestamp, uint40 indexed validatorIndex);\n}\n\n/**\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\n */\ninterface IEigenPod is IEigenPodErrors, IEigenPodEvents, ISemVerMixin {\n    /// @notice Used to initialize the pointers to contracts crucial to the pod's functionality, in beacon proxy construction from EigenPodManager\n    function initialize(\n        address owner\n    ) external;\n\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\n    /// @dev This function only supports staking to a 0x01 validator. For compounding validators, please interact directly with the deposit contract.\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\n\n    /**\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\n     * @dev The podOwner must have already proved sufficient withdrawals, so that this pod's `restakedExecutionLayerGwei` exceeds the\n     * `amountWei` input (when converted to GWEI).\n     * @dev Reverts if `amountWei` is not a whole Gwei amount\n     */\n    function withdrawRestakedBeaconChainETH(address recipient, uint256 amount) external;\n\n    /**\n     * @dev Create a checkpoint used to prove this pod's active validator set. Checkpoints are completed\n     * by submitting one checkpoint proof per ACTIVE validator. During the checkpoint process, the total\n     * change in ACTIVE validator balance is tracked, and any validators with 0 balance are marked `WITHDRAWN`.\n     * @dev Once finalized, the pod owner is awarded shares corresponding to:\n     * - the total change in their ACTIVE validator balances\n     * - any ETH in the pod not already awarded shares\n     * @dev A checkpoint cannot be created if the pod already has an outstanding checkpoint. If\n     * this is the case, the pod owner MUST complete the existing checkpoint before starting a new one.\n     * @param revertIfNoBalance Forces a revert if the pod ETH balance is 0. This allows the pod owner\n     * to prevent accidentally starting a checkpoint that will not increase their shares\n     */\n    function startCheckpoint(\n        bool revertIfNoBalance\n    ) external;\n\n    /**\n     * @dev Progress the current checkpoint towards completion by submitting one or more validator\n     * checkpoint proofs. Anyone can call this method to submit proofs towards the current checkpoint.\n     * For each validator proven, the current checkpoint's `proofsRemaining` decreases.\n     * @dev If the checkpoint's `proofsRemaining` reaches 0, the checkpoint is finalized.\n     * (see `_updateCheckpoint` for more details)\n     * @dev This method can only be called when there is a currently-active checkpoint.\n     * @param balanceContainerProof proves the beacon's current balance container root against a checkpoint's `beaconBlockRoot`\n     * @param proofs Proofs for one or more validator current balances against the `balanceContainerRoot`\n     */\n    function verifyCheckpointProofs(\n        BeaconChainProofs.BalanceContainerProof calldata balanceContainerProof,\n        BeaconChainProofs.BalanceProof[] calldata proofs\n    ) external;\n\n    /**\n     * @dev Verify one or more validators have their withdrawal credentials pointed at this EigenPod, and award\n     * shares based on their effective balance. Proven validators are marked `ACTIVE` within the EigenPod, and\n     * future checkpoint proofs will need to include them.\n     * @dev Withdrawal credential proofs MUST NOT be older than `currentCheckpointTimestamp`.\n     * @dev Validators proven via this method MUST NOT have an exit epoch set already.\n     * @param beaconTimestamp the beacon chain timestamp sent to the 4788 oracle contract. Corresponds\n     * to the parent beacon block root against which the proof is verified.\n     * @param stateRootProof proves a beacon state root against a beacon block root\n     * @param validatorIndices a list of validator indices being proven\n     * @param validatorFieldsProofs proofs of each validator's `validatorFields` against the beacon state root\n     * @param validatorFields the fields of the beacon chain \"Validator\" container. See consensus specs for\n     * details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\n     */\n    function verifyWithdrawalCredentials(\n        uint64 beaconTimestamp,\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\n        uint40[] calldata validatorIndices,\n        bytes[] calldata validatorFieldsProofs,\n        bytes32[][] calldata validatorFields\n    ) external;\n\n    /**\n     * @dev Prove that one of this pod's active validators was slashed on the beacon chain. A successful\n     * staleness proof allows the caller to start a checkpoint.\n     *\n     * @dev Note that in order to start a checkpoint, any existing checkpoint must already be completed!\n     * (See `_startCheckpoint` for details)\n     *\n     * @dev Note that this method allows anyone to start a checkpoint as soon as a slashing occurs on the beacon\n     * chain. This is intended to make it easier to external watchers to keep a pod's balance up to date.\n     *\n     * @dev Note too that beacon chain slashings are not instant. There is a delay between the initial slashing event\n     * and the validator's final exit back to the execution layer. During this time, the validator's balance may or\n     * may not drop further due to a correlation penalty. This method allows proof of a slashed validator\n     * to initiate a checkpoint for as long as the validator remains on the beacon chain. Once the validator\n     * has exited and been checkpointed at 0 balance, they are no longer \"checkpoint-able\" and cannot be proven\n     * \"stale\" via this method.\n     * See https://eth2book.info/capella/part3/transition/epoch/#slashings for more info.\n     *\n     * @param beaconTimestamp the beacon chain timestamp sent to the 4788 oracle contract. Corresponds\n     * to the parent beacon block root against which the proof is verified.\n     * @param stateRootProof proves a beacon state root against a beacon block root\n     * @param proof the fields of the beacon chain \"Validator\" container, along with a merkle proof against\n     * the beacon state root. See the consensus specs for more details:\n     * https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\n     *\n     * @dev Staleness conditions:\n     * - Validator's last checkpoint is older than `beaconTimestamp`\n     * - Validator MUST be in `ACTIVE` status in the pod\n     * - Validator MUST be slashed on the beacon chain\n     */\n    function verifyStaleBalance(\n        uint64 beaconTimestamp,\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\n        BeaconChainProofs.ValidatorProof calldata proof\n    ) external;\n\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\n    function recoverTokens(IERC20[] memory tokenList, uint256[] memory amountsToWithdraw, address recipient) external;\n\n    /// @notice Allows the owner of a pod to update the proof submitter, a permissioned\n    /// address that can call `startCheckpoint` and `verifyWithdrawalCredentials`.\n    /// @dev Note that EITHER the podOwner OR proofSubmitter can access these methods,\n    /// so it's fine to set your proofSubmitter to 0 if you want the podOwner to be the\n    /// only address that can call these methods.\n    /// @param newProofSubmitter The new proof submitter address. If set to 0, only the\n    /// pod owner will be able to call `startCheckpoint` and `verifyWithdrawalCredentials`\n    function setProofSubmitter(\n        address newProofSubmitter\n    ) external;\n\n    /**\n     *\n     *                                VIEW METHODS\n     *\n     */\n\n    /// @notice An address with permissions to call `startCheckpoint` and `verifyWithdrawalCredentials`, set\n    /// by the podOwner. This role exists to allow a podOwner to designate a hot wallet that can call\n    /// these methods, allowing the podOwner to remain a cold wallet that is only used to manage funds.\n    /// @dev If this address is NOT set, only the podOwner can call `startCheckpoint` and `verifyWithdrawalCredentials`\n    function proofSubmitter() external view returns (address);\n\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer),\n    function withdrawableRestakedExecutionLayerGwei() external view returns (uint64);\n\n    /// @notice The single EigenPodManager for EigenLayer\n    function eigenPodManager() external view returns (IEigenPodManager);\n\n    /// @notice The owner of this EigenPod\n    function podOwner() external view returns (address);\n\n    /// @notice Returns the validatorInfo struct for the provided pubkeyHash\n    function validatorPubkeyHashToInfo(\n        bytes32 validatorPubkeyHash\n    ) external view returns (ValidatorInfo memory);\n\n    /// @notice Returns the validatorInfo struct for the provided pubkey\n    function validatorPubkeyToInfo(\n        bytes calldata validatorPubkey\n    ) external view returns (ValidatorInfo memory);\n\n    /// @notice This returns the status of a given validator\n    function validatorStatus(\n        bytes32 pubkeyHash\n    ) external view returns (VALIDATOR_STATUS);\n\n    /// @notice This returns the status of a given validator pubkey\n    function validatorStatus(\n        bytes calldata validatorPubkey\n    ) external view returns (VALIDATOR_STATUS);\n\n    /// @notice Number of validators with proven withdrawal credentials, who do not have proven full withdrawals\n    function activeValidatorCount() external view returns (uint256);\n\n    /// @notice The timestamp of the last checkpoint finalized\n    function lastCheckpointTimestamp() external view returns (uint64);\n\n    /// @notice The timestamp of the currently-active checkpoint. Will be 0 if there is not active checkpoint\n    function currentCheckpointTimestamp() external view returns (uint64);\n\n    /// @notice Returns the currently-active checkpoint\n    function currentCheckpoint() external view returns (Checkpoint memory);\n\n    /// @notice For each checkpoint, the total balance attributed to exited validators, in gwei\n    ///\n    /// NOTE that the values added to this mapping are NOT guaranteed to capture the entirety of a validator's\n    /// exit - rather, they capture the total change in a validator's balance when a checkpoint shows their\n    /// balance change from nonzero to zero. While a change from nonzero to zero DOES guarantee that a validator\n    /// has been fully exited, it is possible that the magnitude of this change does not capture what is\n    /// typically thought of as a \"full exit.\"\n    ///\n    /// For example:\n    /// 1. Consider a validator was last checkpointed at 32 ETH before exiting. Once the exit has been processed,\n    /// it is expected that the validator's exited balance is calculated to be `32 ETH`.\n    /// 2. However, before `startCheckpoint` is called, a deposit is made to the validator for 1 ETH. The beacon\n    /// chain will automatically withdraw this ETH, but not until the withdrawal sweep passes over the validator\n    /// again. Until this occurs, the validator's current balance (used for checkpointing) is 1 ETH.\n    /// 3. If `startCheckpoint` is called at this point, the balance delta calculated for this validator will be\n    /// `-31 ETH`, and because the validator has a nonzero balance, it is not marked WITHDRAWN.\n    /// 4. After the exit is processed by the beacon chain, a subsequent `startCheckpoint` and checkpoint proof\n    /// will calculate a balance delta of `-1 ETH` and attribute a 1 ETH exit to the validator.\n    ///\n    /// If this edge case impacts your usecase, it should be possible to mitigate this by monitoring for deposits\n    /// to your exited validators, and waiting to call `startCheckpoint` until those deposits have been automatically\n    /// exited.\n    ///\n    /// Additional edge cases this mapping does not cover:\n    /// - If a validator is slashed, their balance exited will reflect their original balance rather than the slashed amount\n    /// - The final partial withdrawal for an exited validator will be likely be included in this mapping.\n    ///   i.e. if a validator was last checkpointed at 32.1 ETH before exiting, the next checkpoint will calculate their\n    ///   \"exited\" amount to be 32.1 ETH rather than 32 ETH.\n    function checkpointBalanceExitedGwei(\n        uint64\n    ) external view returns (uint64);\n\n    /// @notice Query the 4788 oracle to get the parent block root of the slot with the given `timestamp`\n    /// @param timestamp of the block for which the parent block root will be returned. MUST correspond\n    /// to an existing slot within the last 24 hours. If the slot at `timestamp` was skipped, this method\n    /// will revert.\n    function getParentBlockRoot(\n        uint64 timestamp\n    ) external view returns (bytes32);\n}\n"
    },
    "src/contracts/interfaces/IShareManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.27;\n\nimport \"../libraries/SlashingLib.sol\";\nimport \"./IStrategy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Interface for a `IShareManager` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice This contract is used by the DelegationManager as a unified interface to interact with the EigenPodManager and StrategyManager\n */\ninterface IShareManager {\n    /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\n    /// @dev strategy must be beaconChainETH when talking to the EigenPodManager\n    /// @return updatedShares the staker's deposit shares after decrement\n    function removeDepositShares(\n        address staker,\n        IStrategy strategy,\n        uint256 depositSharesToRemove\n    ) external returns (uint256);\n\n    /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\n    /// @dev strategy must be beaconChainETH when talking to the EigenPodManager\n    /// @return existingDepositShares the shares the staker had before any were added\n    /// @return addedShares the new shares added to the staker's balance\n    function addShares(address staker, IStrategy strategy, uint256 shares) external returns (uint256, uint256);\n\n    /// @notice Used by the DelegationManager to convert deposit shares to tokens and send them to a staker\n    /// @dev strategy must be beaconChainETH when talking to the EigenPodManager\n    /// @dev token is not validated when talking to the EigenPodManager\n    function withdrawSharesAsTokens(address staker, IStrategy strategy, IERC20 token, uint256 shares) external;\n\n    /// @notice Returns the current shares of `user` in `strategy`\n    /// @dev strategy must be beaconChainETH when talking to the EigenPodManager\n    /// @dev returns 0 if the user has negative shares\n    function stakerDepositShares(address user, IStrategy strategy) external view returns (uint256 depositShares);\n\n    /**\n     * @notice Increase the amount of burnable shares for a given Strategy. This is called by the DelegationManager\n     * when an operator is slashed in EigenLayer.\n     * @param strategy The strategy to burn shares in.\n     * @param addedSharesToBurn The amount of added shares to burn.\n     * @dev This function is only called by the DelegationManager when an operator is slashed.\n     */\n    function increaseBurnableShares(IStrategy strategy, uint256 addedSharesToBurn) external;\n}\n"
    },
    "src/contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../libraries/SlashingLib.sol\";\nimport \"./ISemVerMixin.sol\";\n\ninterface IStrategyErrors {\n    /// @dev Thrown when called by an account that is not strategy manager.\n    error OnlyStrategyManager();\n    /// @dev Thrown when new shares value is zero.\n    error NewSharesZero();\n    /// @dev Thrown when total shares exceeds max.\n    error TotalSharesExceedsMax();\n    /// @dev Thrown when amount shares is greater than total shares.\n    error WithdrawalAmountExceedsTotalDeposits();\n    /// @dev Thrown when attempting an action with a token that is not accepted.\n    error OnlyUnderlyingToken();\n\n    /// StrategyBaseWithTVLLimits\n\n    /// @dev Thrown when `maxPerDeposit` exceeds max.\n    error MaxPerDepositExceedsMax();\n    /// @dev Thrown when balance exceeds max total deposits.\n    error BalanceExceedsMaxTotalDeposits();\n}\n\ninterface IStrategyEvents {\n    /**\n     * @notice Used to emit an event for the exchange rate between 1 share and underlying token in a strategy contract\n     * @param rate is the exchange rate in wad 18 decimals\n     * @dev Tokens that do not have 18 decimals must have offchain services scale the exchange rate by the proper magnitude\n     */\n    event ExchangeRateEmitted(uint256 rate);\n\n    /**\n     * Used to emit the underlying token and its decimals on strategy creation\n     * @notice token\n     * @param token is the ERC20 token of the strategy\n     * @param decimals are the decimals of the ERC20 token in the strategy\n     */\n    event StrategyTokenSet(IERC20 token, uint8 decimals);\n}\n\n/**\n * @title Minimal interface for an `Strategy` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\n */\ninterface IStrategy is IStrategyErrors, IStrategyEvents, ISemVerMixin {\n    /**\n     * @notice Used to deposit tokens into this Strategy\n     * @param token is the ERC20 token being deposited\n     * @param amount is the amount of token being deposited\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\n     * @return newShares is the number of new shares issued at the current exchange ratio.\n     */\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\n\n    /**\n     * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\n     * @param recipient is the address to receive the withdrawn funds\n     * @param token is the ERC20 token being transferred out\n     * @param amountShares is the amount of shares being withdrawn\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n     * other functions, and individual share balances are recorded in the strategyManager as well.\n     */\n    function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\n\n    /**\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n     * For a staker using this function and trying to calculate the amount of underlying tokens they have in total they\n     * should input into `amountShares` their withdrawable shares read from the `DelegationManager` contract.\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function sharesToUnderlying(\n        uint256 amountShares\n    ) external returns (uint256);\n\n    /**\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n     * @return The amount of shares corresponding to the input `amountUnderlying`.  This is used as deposit shares\n     * in the `StrategyManager` contract.\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function underlyingToShares(\n        uint256 amountUnderlying\n    ) external returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\n     */\n    function userUnderlying(\n        address user\n    ) external returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\n     * querying the `strategyManager` contract\n     */\n    function shares(\n        address user\n    ) external view returns (uint256);\n\n    /**\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n     * For a staker using this function and trying to calculate the amount of underlying tokens they have in total they\n     * should input into `amountShares` their withdrawable shares read from the `DelegationManager` contract.\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function sharesToUnderlyingView(\n        uint256 amountShares\n    ) external view returns (uint256);\n\n    /**\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n     * @return The amount of shares corresponding to the input `amountUnderlying`. This is used as deposit shares\n     * in the `StrategyManager` contract.\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function underlyingToSharesView(\n        uint256 amountUnderlying\n    ) external view returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\n     */\n    function userUnderlyingView(\n        address user\n    ) external view returns (uint256);\n\n    /// @notice The underlying token for shares in this Strategy\n    function underlyingToken() external view returns (IERC20);\n\n    /// @notice The total number of extant shares in this Strategy\n    function totalShares() external view returns (uint256);\n\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\n    function explanation() external view returns (string memory);\n}\n"
    },
    "src/contracts/interfaces/IPauserRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\n/**\n * @title Interface for the `PauserRegistry` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\ninterface IPauserRegistry {\n    error OnlyUnpauser();\n    error InputAddressZero();\n\n    event PauserStatusChanged(address pauser, bool canPause);\n\n    event UnpauserChanged(address previousUnpauser, address newUnpauser);\n\n    /// @notice Mapping of addresses to whether they hold the pauser role.\n    function isPauser(\n        address pauser\n    ) external view returns (bool);\n\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\n    function unpauser() external view returns (address);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "src/contracts/interfaces/IDelegationManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"./IStrategy.sol\";\nimport \"./IPauserRegistry.sol\";\nimport \"./ISignatureUtilsMixin.sol\";\nimport \"../libraries/SlashingLib.sol\";\n\ninterface IDelegationManagerErrors {\n    /// @dev Thrown when caller is neither the StrategyManager or EigenPodManager contract.\n    error OnlyStrategyManagerOrEigenPodManager();\n    /// @dev Thrown when msg.sender is not the EigenPodManager\n    error OnlyEigenPodManager();\n    /// @dev Throw when msg.sender is not the AllocationManager\n    error OnlyAllocationManager();\n\n    /// Delegation Status\n\n    /// @dev Thrown when an operator attempts to undelegate.\n    error OperatorsCannotUndelegate();\n    /// @dev Thrown when an account is actively delegated.\n    error ActivelyDelegated();\n    /// @dev Thrown when an account is not actively delegated.\n    error NotActivelyDelegated();\n    /// @dev Thrown when `operator` is not a registered operator.\n    error OperatorNotRegistered();\n\n    /// Invalid Inputs\n\n    /// @dev Thrown when attempting to execute an action that was not queued.\n    error WithdrawalNotQueued();\n    /// @dev Thrown when caller cannot undelegate on behalf of a staker.\n    error CallerCannotUndelegate();\n    /// @dev Thrown when two array parameters have mismatching lengths.\n    error InputArrayLengthMismatch();\n    /// @dev Thrown when input arrays length is zero.\n    error InputArrayLengthZero();\n\n    /// Slashing\n\n    /// @dev Thrown when an operator has been fully slashed(maxMagnitude is 0) for a strategy.\n    /// or if the staker has had been natively slashed to the point of their beaconChainScalingFactor equalling 0.\n    error FullySlashed();\n\n    /// Signatures\n\n    /// @dev Thrown when attempting to spend a spent eip-712 salt.\n    error SaltSpent();\n\n    /// Withdrawal Processing\n\n    /// @dev Thrown when attempting to withdraw before delay has elapsed.\n    error WithdrawalDelayNotElapsed();\n    /// @dev Thrown when withdrawer is not the current caller.\n    error WithdrawerNotCaller();\n}\n\ninterface IDelegationManagerTypes {\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\n    struct OperatorDetails {\n        /// @notice DEPRECATED -- this field is no longer used, payments are handled in RewardsCoordinator.sol\n        address __deprecated_earningsReceiver;\n        /**\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \"forced undelegations\".\n         * @dev Signature verification follows these rules:\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \"magic value\".\n         */\n        address delegationApprover;\n        /// @notice DEPRECATED -- this field is no longer used. An analogous field is the `allocationDelay` stored in the AllocationManager\n        uint32 __deprecated_stakerOptOutWindowBlocks;\n    }\n\n    /**\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\n     */\n    struct DelegationApproval {\n        // the staker who is delegating\n        address staker;\n        // the operator being delegated to\n        address operator;\n        // the operator's provided salt\n        bytes32 salt;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n\n    /**\n     * @dev A struct representing an existing queued withdrawal. After the withdrawal delay has elapsed, this withdrawal can be completed via `completeQueuedWithdrawal`.\n     * A `Withdrawal` is created by the `DelegationManager` when `queueWithdrawals` is called. The `withdrawalRoots` hashes returned by `queueWithdrawals` can be used\n     * to fetch the corresponding `Withdrawal` from storage (via `getQueuedWithdrawal`).\n     *\n     * @param staker The address that queued the withdrawal\n     * @param delegatedTo The address that the staker was delegated to at the time the withdrawal was queued. Used to determine if additional slashing occurred before\n     * this withdrawal became completable.\n     * @param withdrawer The address that will call the contract to complete the withdrawal. Note that this will always equal `staker`; alternate withdrawers are not\n     * supported at this time.\n     * @param nonce The staker's `cumulativeWithdrawalsQueued` at time of queuing. Used to ensure withdrawals have unique hashes.\n     * @param startBlock The block number when the withdrawal was queued.\n     * @param strategies The strategies requested for withdrawal when the withdrawal was queued\n     * @param scaledShares The staker's deposit shares requested for withdrawal, scaled by the staker's `depositScalingFactor`. Upon completion, these will be\n     * scaled by the appropriate slashing factor as of the withdrawal's completable block. The result is what is actually withdrawable.\n     */\n    struct Withdrawal {\n        address staker;\n        address delegatedTo;\n        address withdrawer;\n        uint256 nonce;\n        uint32 startBlock;\n        IStrategy[] strategies;\n        uint256[] scaledShares;\n    }\n\n    /**\n     * @param strategies The strategies to withdraw from\n     * @param depositShares For each strategy, the number of deposit shares to withdraw. Deposit shares can\n     * be queried via `getDepositedShares`.\n     * NOTE: The number of shares ultimately received when a withdrawal is completed may be lower depositShares\n     * if the staker or their delegated operator has experienced slashing.\n     * @param __deprecated_withdrawer This field is ignored. The only party that may complete a withdrawal\n     * is the staker that originally queued it. Alternate withdrawers are not supported.\n     */\n    struct QueuedWithdrawalParams {\n        IStrategy[] strategies;\n        uint256[] depositShares;\n        address __deprecated_withdrawer;\n    }\n}\n\ninterface IDelegationManagerEvents is IDelegationManagerTypes {\n    // @notice Emitted when a new operator registers in EigenLayer and provides their delegation approver.\n    event OperatorRegistered(address indexed operator, address delegationApprover);\n\n    /// @notice Emitted when an operator updates their delegation approver\n    event DelegationApproverUpdated(address indexed operator, address newDelegationApprover);\n\n    /**\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n     */\n    event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\n\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\n    event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\n    event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted when @param staker delegates to @param operator.\n    event StakerDelegated(address indexed staker, address indexed operator);\n\n    /// @notice Emitted when @param staker undelegates from @param operator.\n    event StakerUndelegated(address indexed staker, address indexed operator);\n\n    /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\n    event StakerForceUndelegated(address indexed staker, address indexed operator);\n\n    /// @notice Emitted when a staker's depositScalingFactor is updated\n    event DepositScalingFactorUpdated(address staker, IStrategy strategy, uint256 newDepositScalingFactor);\n\n    /**\n     * @notice Emitted when a new withdrawal is queued.\n     * @param withdrawalRoot Is the hash of the `withdrawal`.\n     * @param withdrawal Is the withdrawal itself.\n     * @param sharesToWithdraw Is an array of the expected shares that were queued for withdrawal corresponding to the strategies in the `withdrawal`.\n     */\n    event SlashingWithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal, uint256[] sharesToWithdraw);\n\n    /// @notice Emitted when a queued withdrawal is completed\n    event SlashingWithdrawalCompleted(bytes32 withdrawalRoot);\n\n    /// @notice Emitted whenever an operator's shares are slashed for a given strategy\n    event OperatorSharesSlashed(address indexed operator, IStrategy strategy, uint256 totalSlashedShares);\n}\n\n/**\n * @title DelegationManager\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\n * - enabling anyone to register as an operator in EigenLayer\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ninterface IDelegationManager is ISignatureUtilsMixin, IDelegationManagerErrors, IDelegationManagerEvents {\n    /**\n     * @dev Initializes the initial owner and paused status.\n     */\n    function initialize(address initialOwner, uint256 initialPausedStatus) external;\n\n    /**\n     * @notice Registers the caller as an operator in EigenLayer.\n     * @param initDelegationApprover is an address that, if set, must provide a signature when stakers delegate\n     * to an operator.\n     * @param allocationDelay The delay before allocations take effect.\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n     *\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n     * @dev This function will revert if the caller is already delegated to an operator.\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n     */\n    function registerAsOperator(\n        address initDelegationApprover,\n        uint32 allocationDelay,\n        string calldata metadataURI\n    ) external;\n\n    /**\n     * @notice Updates an operator's stored `delegationApprover`.\n     * @param operator is the operator to update the delegationApprover for\n     * @param newDelegationApprover is the new delegationApprover for the operator\n     *\n     * @dev The caller must have previously registered as an operator in EigenLayer.\n     */\n    function modifyOperatorDetails(address operator, address newDelegationApprover) external;\n\n    /**\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n     * @param operator The operator to update metadata for\n     * @param metadataURI The URI for metadata associated with an operator\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n     */\n    function updateOperatorMetadataURI(address operator, string calldata metadataURI) external;\n\n    /**\n     * @notice Caller delegates their stake to an operator.\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\n     * @param approverSignatureAndExpiry (optional) Verifies the operator approves of this delegation\n     * @param approverSalt (optional) A unique single use value tied to an individual signature.\n     * @dev The signature/salt are used ONLY if the operator has configured a delegationApprover.\n     * If they have not, these params can be left empty.\n     */\n    function delegateTo(\n        address operator,\n        SignatureWithExpiry memory approverSignatureAndExpiry,\n        bytes32 approverSalt\n    ) external;\n\n    /**\n     * @notice Undelegates the staker from their operator and queues a withdrawal for all of their shares\n     * @param staker The account to be undelegated\n     * @return withdrawalRoots The roots of the newly queued withdrawals, if a withdrawal was queued. Returns\n     * an empty array if none was queued.\n     *\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"\n     * @dev Reverts if the `staker` is not delegated to an operator\n     */\n    function undelegate(\n        address staker\n    ) external returns (bytes32[] memory withdrawalRoots);\n\n    /**\n     * @notice Undelegates the staker from their current operator, and redelegates to `newOperator`\n     * Queues a withdrawal for all of the staker's withdrawable shares. These shares will only be\n     * delegated to `newOperator` AFTER the withdrawal is completed.\n     * @dev This method acts like a call to `undelegate`, then `delegateTo`\n     * @param newOperator the new operator that will be delegated all assets\n     * @dev NOTE: the following 2 params are ONLY checked if `newOperator` has a `delegationApprover`.\n     * If not, they can be left empty.\n     * @param newOperatorApproverSig A signature from the operator's `delegationApprover`\n     * @param approverSalt A unique single use value tied to the approver's signature\n     */\n    function redelegate(\n        address newOperator,\n        SignatureWithExpiry memory newOperatorApproverSig,\n        bytes32 approverSalt\n    ) external returns (bytes32[] memory withdrawalRoots);\n\n    /**\n     * @notice Allows a staker to queue a withdrawal of their deposit shares. The withdrawal can be\n     * completed after the MIN_WITHDRAWAL_DELAY_BLOCKS via either of the completeQueuedWithdrawal methods.\n     *\n     * While in the queue, these shares are removed from the staker's balance, as well as from their operator's\n     * delegated share balance (if applicable). Note that while in the queue, deposit shares are still subject\n     * to slashing. If any slashing has occurred, the shares received may be less than the queued deposit shares.\n     *\n     * @dev To view all the staker's strategies/deposit shares that can be queued for withdrawal, see `getDepositedShares`\n     * @dev To view the current conversion between a staker's deposit shares and withdrawable shares, see `getWithdrawableShares`\n     */\n    function queueWithdrawals(\n        QueuedWithdrawalParams[] calldata params\n    ) external returns (bytes32[] memory);\n\n    /**\n     * @notice Used to complete a queued withdrawal\n     * @param withdrawal The withdrawal to complete\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n     * @param tokens For each `withdrawal.strategies`, the underlying token of the strategy\n     * NOTE: if `receiveAsTokens` is false, the `tokens` array is unused and can be filled with default values. However, `tokens.length` MUST still be equal to `withdrawal.strategies.length`.\n     * NOTE: For the `beaconChainETHStrategy`, the corresponding `tokens` value is ignored (can be 0).\n     * @param receiveAsTokens If true, withdrawn shares will be converted to tokens and sent to the caller. If false, the caller receives shares that can be delegated to an operator.\n     * NOTE: if the caller receives shares and is currently delegated to an operator, the received shares are\n     * automatically delegated to the caller's current operator.\n     */\n    function completeQueuedWithdrawal(\n        Withdrawal calldata withdrawal,\n        IERC20[] calldata tokens,\n        bool receiveAsTokens\n    ) external;\n\n    /**\n     * @notice Used to complete multiple queued withdrawals\n     * @param withdrawals Array of Withdrawals to complete. See `completeQueuedWithdrawal` for the usage of a single Withdrawal.\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\n     */\n    function completeQueuedWithdrawals(\n        Withdrawal[] calldata withdrawals,\n        IERC20[][] calldata tokens,\n        bool[] calldata receiveAsTokens\n    ) external;\n\n    /**\n     * @notice Called by a share manager when a staker's deposit share balance in a strategy increases.\n     * This method delegates any new shares to an operator (if applicable), and updates the staker's\n     * deposit scaling factor regardless.\n     * @param staker The address whose deposit shares have increased\n     * @param strategy The strategy in which shares have been deposited\n     * @param prevDepositShares The number of deposit shares the staker had in the strategy prior to the increase\n     * @param addedShares The number of deposit shares added by the staker\n     *\n     * @dev Note that if the either the staker's current operator has been slashed 100% for `strategy`, OR the\n     * staker has been slashed 100% on the beacon chain such that the calculated slashing factor is 0, this\n     * method WILL REVERT.\n     */\n    function increaseDelegatedShares(\n        address staker,\n        IStrategy strategy,\n        uint256 prevDepositShares,\n        uint256 addedShares\n    ) external;\n\n    /**\n     * @notice If the staker is delegated, decreases its operator's shares in response to\n     * a decrease in balance in the beaconChainETHStrategy\n     * @param staker the staker whose operator's balance will be decreased\n     * @param curDepositShares the current deposit shares held by the staker\n     * @param beaconChainSlashingFactorDecrease the amount that the staker's beaconChainSlashingFactor has decreased by\n     * @dev Note: `beaconChainSlashingFactorDecrease` are assumed to ALWAYS be < 1 WAD.\n     * These invariants are maintained in the EigenPodManager.\n     */\n    function decreaseDelegatedShares(\n        address staker,\n        uint256 curDepositShares,\n        uint64 beaconChainSlashingFactorDecrease\n    ) external;\n\n    /**\n     * @notice Decreases the operators shares in storage after a slash and increases the burnable shares by calling\n     * into either the StrategyManager or EigenPodManager (if the strategy is beaconChainETH).\n     * @param operator The operator to decrease shares for\n     * @param strategy The strategy to decrease shares for\n     * @param prevMaxMagnitude the previous maxMagnitude of the operator\n     * @param newMaxMagnitude the new maxMagnitude of the operator\n     * @dev Callable only by the AllocationManager\n     * @dev Note: Assumes `prevMaxMagnitude <= newMaxMagnitude`. This invariant is maintained in\n     * the AllocationManager.\n     */\n    function slashOperatorShares(\n        address operator,\n        IStrategy strategy,\n        uint64 prevMaxMagnitude,\n        uint64 newMaxMagnitude\n    ) external;\n\n    /**\n     *\n     *                         VIEW FUNCTIONS\n     *\n     */\n\n    /**\n     * @notice returns the address of the operator that `staker` is delegated to.\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n     */\n    function delegatedTo(\n        address staker\n    ) external view returns (address);\n\n    /**\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n     * @dev Salts are used in the `delegateTo` function. Note that this function only processes the delegationApprover's\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n     */\n    function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\n\n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n    function cumulativeWithdrawalsQueued(\n        address staker\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n     */\n    function isDelegated(\n        address staker\n    ) external view returns (bool);\n\n    /**\n     * @notice Returns true is an operator has previously registered for delegation.\n     */\n    function isOperator(\n        address operator\n    ) external view returns (bool);\n\n    /**\n     * @notice Returns the delegationApprover account for an operator\n     */\n    function delegationApprover(\n        address operator\n    ) external view returns (address);\n\n    /**\n     * @notice Returns the shares that an operator has delegated to them in a set of strategies\n     * @param operator the operator to get shares for\n     * @param strategies the strategies to get shares for\n     */\n    function getOperatorShares(\n        address operator,\n        IStrategy[] memory strategies\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @notice Returns the shares that a set of operators have delegated to them in a set of strategies\n     * @param operators the operators to get shares for\n     * @param strategies the strategies to get shares for\n     */\n    function getOperatorsShares(\n        address[] memory operators,\n        IStrategy[] memory strategies\n    ) external view returns (uint256[][] memory);\n\n    /**\n     * @notice Returns amount of withdrawable shares from an operator for a strategy that is still in the queue\n     * and therefore slashable. Note that the *actual* slashable amount could be less than this value as this doesn't account\n     * for amounts that have already been slashed. This assumes that none of the shares have been slashed.\n     * @param operator the operator to get shares for\n     * @param strategy the strategy to get shares for\n     * @return the amount of shares that are slashable in the withdrawal queue for an operator and a strategy\n     */\n    function getSlashableSharesInQueue(address operator, IStrategy strategy) external view returns (uint256);\n\n    /**\n     * @notice Given a staker and a set of strategies, return the shares they can queue for withdrawal and the\n     * corresponding depositShares.\n     * This value depends on which operator the staker is delegated to.\n     * The shares amount returned is the actual amount of Strategy shares the staker would receive (subject\n     * to each strategy's underlying shares to token ratio).\n     */\n    function getWithdrawableShares(\n        address staker,\n        IStrategy[] memory strategies\n    ) external view returns (uint256[] memory withdrawableShares, uint256[] memory depositShares);\n\n    /**\n     * @notice Returns the number of shares in storage for a staker and all their strategies\n     */\n    function getDepositedShares(\n        address staker\n    ) external view returns (IStrategy[] memory, uint256[] memory);\n\n    /**\n     * @notice Returns the scaling factor applied to a staker's deposits for a given strategy\n     */\n    function depositScalingFactor(address staker, IStrategy strategy) external view returns (uint256);\n\n    /**\n     * @notice Returns the Withdrawal associated with a `withdrawalRoot`.\n     * @param withdrawalRoot The hash identifying the queued withdrawal.\n     * @return withdrawal The withdrawal details.\n     */\n    function queuedWithdrawals(\n        bytes32 withdrawalRoot\n    ) external view returns (Withdrawal memory withdrawal);\n\n    /**\n     * @notice Returns the Withdrawal and corresponding shares associated with a `withdrawalRoot`\n     * @param withdrawalRoot The hash identifying the queued withdrawal\n     * @return withdrawal The withdrawal details\n     * @return shares Array of shares corresponding to each strategy in the withdrawal\n     * @dev The shares are what a user would receive from completing a queued withdrawal, assuming all slashings are applied\n     * @dev Withdrawals queued before the slashing release cannot be queried with this method\n     */\n    function getQueuedWithdrawal(\n        bytes32 withdrawalRoot\n    ) external view returns (Withdrawal memory withdrawal, uint256[] memory shares);\n\n    /**\n     * @notice Returns all queued withdrawals and their corresponding shares for a staker.\n     * @param staker The address of the staker to query withdrawals for.\n     * @return withdrawals Array of Withdrawal structs containing details about each queued withdrawal.\n     * @return shares 2D array of shares, where each inner array corresponds to the strategies in the withdrawal.\n     * @dev The shares are what a user would receive from completing a queued withdrawal, assuming all slashings are applied.\n     */\n    function getQueuedWithdrawals(\n        address staker\n    ) external view returns (Withdrawal[] memory withdrawals, uint256[][] memory shares);\n\n    /// @notice Returns a list of queued withdrawal roots for the `staker`.\n    /// NOTE that this only returns withdrawals queued AFTER the slashing release.\n    function getQueuedWithdrawalRoots(\n        address staker\n    ) external view returns (bytes32[] memory);\n\n    /**\n     * @notice Converts shares for a set of strategies to deposit shares, likely in order to input into `queueWithdrawals`.\n     * This function will revert from a division by 0 error if any of the staker's strategies have a slashing factor of 0.\n     * @param staker the staker to convert shares for\n     * @param strategies the strategies to convert shares for\n     * @param withdrawableShares the shares to convert\n     * @return the deposit shares\n     * @dev will be a few wei off due to rounding errors\n     */\n    function convertToDepositShares(\n        address staker,\n        IStrategy[] memory strategies,\n        uint256[] memory withdrawableShares\n    ) external view returns (uint256[] memory);\n\n    /// @notice Returns the keccak256 hash of `withdrawal`.\n    function calculateWithdrawalRoot(\n        Withdrawal memory withdrawal\n    ) external pure returns (bytes32);\n\n    /**\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` function.\n     * @param staker The account delegating their stake\n     * @param operator The account receiving delegated stake\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n     * @param approverSalt A unique and single use value associated with the approver signature.\n     * @param expiry Time after which the approver's signature becomes invalid\n     */\n    function calculateDelegationApprovalDigestHash(\n        address staker,\n        address operator,\n        address _delegationApprover,\n        bytes32 approverSalt,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /// @notice return address of the beaconChainETHStrategy\n    function beaconChainETHStrategy() external view returns (IStrategy);\n\n    /**\n     * @notice Returns the minimum withdrawal delay in blocks to pass for withdrawals queued to be completable.\n     * Also applies to legacy withdrawals so any withdrawals not completed prior to the slashing upgrade will be subject\n     * to this longer delay.\n     * @dev Backwards-compatible interface to return the internal `MIN_WITHDRAWAL_DELAY_BLOCKS` value\n     * @dev Previous value in storage was deprecated. See `__deprecated_minWithdrawalDelayBlocks`\n     */\n    function minWithdrawalDelayBlocks() external view returns (uint32);\n\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\n}\n"
    },
    "src/contracts/libraries/SlashingLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.27;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin-upgrades/contracts/utils/math/SafeCastUpgradeable.sol\";\n\n/// @dev All scaling factors have `1e18` as an initial/default value. This value is represented\n/// by the constant `WAD`, which is used to preserve precision with uint256 math.\n///\n/// When applying scaling factors, they are typically multiplied/divided by `WAD`, allowing this\n/// constant to act as a \"1\" in mathematical formulae.\nuint64 constant WAD = 1e18;\n\n/*\n * There are 2 types of shares:\n *      1. deposit shares\n *          - These can be converted to an amount of tokens given a strategy\n *              - by calling `sharesToUnderlying` on the strategy address (they're already tokens \n *              in the case of EigenPods)\n *          - These live in the storage of the EigenPodManager and individual StrategyManager strategies \n *      2. withdrawable shares\n *          - For a staker, this is the amount of shares that they can withdraw\n *          - For an operator, the shares delegated to them are equal to the sum of their stakers'\n *            withdrawable shares\n *\n * Along with a slashing factor, the DepositScalingFactor is used to convert between the two share types.\n */\nstruct DepositScalingFactor {\n    uint256 _scalingFactor;\n}\n\nusing SlashingLib for DepositScalingFactor global;\n\nlibrary SlashingLib {\n    using Math for uint256;\n    using SlashingLib for uint256;\n    using SafeCastUpgradeable for uint256;\n\n    // WAD MATH\n\n    function mulWad(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x.mulDiv(y, WAD);\n    }\n\n    function divWad(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x.mulDiv(WAD, y);\n    }\n\n    /**\n     * @notice Used explicitly for calculating slashed magnitude, we want to ensure even in the\n     * situation where an operator is slashed several times and precision has been lost over time,\n     * an incoming slashing request isn't rounded down to 0 and an operator is able to avoid slashing penalties.\n     */\n    function mulWadRoundUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x.mulDiv(y, WAD, Math.Rounding.Up);\n    }\n\n    // GETTERS\n\n    function scalingFactor(\n        DepositScalingFactor memory dsf\n    ) internal pure returns (uint256) {\n        return dsf._scalingFactor == 0 ? WAD : dsf._scalingFactor;\n    }\n\n    function scaleForQueueWithdrawal(\n        DepositScalingFactor memory dsf,\n        uint256 depositSharesToWithdraw\n    ) internal pure returns (uint256) {\n        return depositSharesToWithdraw.mulWad(dsf.scalingFactor());\n    }\n\n    function scaleForCompleteWithdrawal(uint256 scaledShares, uint256 slashingFactor) internal pure returns (uint256) {\n        return scaledShares.mulWad(slashingFactor);\n    }\n\n    /**\n     * @notice Scales shares according to the difference in an operator's magnitude before and\n     * after being slashed. This is used to calculate the number of slashable shares in the\n     * withdrawal queue.\n     * NOTE: max magnitude is guaranteed to only ever decrease.\n     */\n    function scaleForBurning(\n        uint256 scaledShares,\n        uint64 prevMaxMagnitude,\n        uint64 newMaxMagnitude\n    ) internal pure returns (uint256) {\n        return scaledShares.mulWad(prevMaxMagnitude - newMaxMagnitude);\n    }\n\n    function update(\n        DepositScalingFactor storage dsf,\n        uint256 prevDepositShares,\n        uint256 addedShares,\n        uint256 slashingFactor\n    ) internal {\n        if (prevDepositShares == 0) {\n            // If this is the staker's first deposit or they are delegating to an operator,\n            // the slashing factor is inverted and applied to the existing DSF. This has the\n            // effect of \"forgiving\" prior slashing for any subsequent deposits.\n            dsf._scalingFactor = dsf.scalingFactor().divWad(slashingFactor);\n            return;\n        }\n\n        /**\n         * Base Equations:\n         * (1) newShares = currentShares + addedShares\n         * (2) newDepositShares = prevDepositShares + addedShares\n         * (3) newShares = newDepositShares * newDepositScalingFactor * slashingFactor\n         *\n         * Plugging (1) into (3):\n         * (4) newDepositShares * newDepositScalingFactor * slashingFactor = currentShares + addedShares\n         *\n         * Solving for newDepositScalingFactor\n         * (5) newDepositScalingFactor = (currentShares + addedShares) / (newDepositShares * slashingFactor)\n         *\n         * Plugging in (2) into (5):\n         * (7) newDepositScalingFactor = (currentShares + addedShares) / ((prevDepositShares + addedShares) * slashingFactor)\n         * Note that magnitudes must be divided by WAD for precision. Thus,\n         *\n         * (8) newDepositScalingFactor = WAD * (currentShares + addedShares) / ((prevDepositShares + addedShares) * slashingFactor / WAD)\n         * (9) newDepositScalingFactor = (currentShares + addedShares) * WAD / (prevDepositShares + addedShares) * WAD / slashingFactor\n         */\n\n        // Step 1: Calculate Numerator\n        uint256 currentShares = dsf.calcWithdrawable(prevDepositShares, slashingFactor);\n\n        // Step 2: Compute currentShares + addedShares\n        uint256 newShares = currentShares + addedShares;\n\n        // Step 3: Calculate newDepositScalingFactor\n        /// forgefmt: disable-next-item\n        uint256 newDepositScalingFactor = newShares\n            .divWad(prevDepositShares + addedShares)\n            .divWad(slashingFactor);\n\n        dsf._scalingFactor = newDepositScalingFactor;\n    }\n\n    /// @dev Reset the staker's DSF for a strategy by setting it to 0. This is the same\n    /// as setting it to WAD (see the `scalingFactor` getter above).\n    ///\n    /// A DSF is reset when a staker reduces their deposit shares to 0, either by queueing\n    /// a withdrawal, or undelegating from their operator. This ensures that subsequent\n    /// delegations/deposits do not use a stale DSF (e.g. from a prior operator).\n    function reset(\n        DepositScalingFactor storage dsf\n    ) internal {\n        dsf._scalingFactor = 0;\n    }\n\n    // CONVERSION\n\n    function calcWithdrawable(\n        DepositScalingFactor memory dsf,\n        uint256 depositShares,\n        uint256 slashingFactor\n    ) internal pure returns (uint256) {\n        /// forgefmt: disable-next-item\n        return depositShares\n            .mulWad(dsf.scalingFactor())\n            .mulWad(slashingFactor);\n    }\n\n    function calcDepositShares(\n        DepositScalingFactor memory dsf,\n        uint256 withdrawableShares,\n        uint256 slashingFactor\n    ) internal pure returns (uint256) {\n        /// forgefmt: disable-next-item\n        return withdrawableShares\n            .divWad(dsf.scalingFactor())\n            .divWad(slashingFactor);\n    }\n\n    function calcSlashedAmount(\n        uint256 operatorShares,\n        uint256 prevMaxMagnitude,\n        uint256 newMaxMagnitude\n    ) internal pure returns (uint256) {\n        // round up mulDiv so we don't overslash\n        return operatorShares - operatorShares.mulDiv(newMaxMagnitude, prevMaxMagnitude, Math.Rounding.Up);\n    }\n}\n"
    },
    "src/contracts/interfaces/ISignatureUtilsMixin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"./ISemVerMixin.sol\";\n\ninterface ISignatureUtilsMixinErrors {\n    /// @notice Thrown when a signature is invalid.\n    error InvalidSignature();\n    /// @notice Thrown when a signature has expired.\n    error SignatureExpired();\n}\n\ninterface ISignatureUtilsMixinTypes {\n    /// @notice Struct that bundles together a signature and an expiration time for the signature.\n    /// @dev Used primarily for stack management.\n    struct SignatureWithExpiry {\n        // the signature itself, formatted as a single bytes object\n        bytes signature;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n\n    /// @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature.\n    /// @dev Used primarily for stack management.\n    struct SignatureWithSaltAndExpiry {\n        // the signature itself, formatted as a single bytes object\n        bytes signature;\n        // the salt used to generate the signature\n        bytes32 salt;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n}\n\n/**\n * @title The interface for common signature utilities.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\ninterface ISignatureUtilsMixin is ISignatureUtilsMixinErrors, ISignatureUtilsMixinTypes, ISemVerMixin {\n    /// @notice Computes the EIP-712 domain separator used for signature validation.\n    /// @dev The domain separator is computed according to EIP-712 specification, using:\n    ///      - The hardcoded name \"EigenLayer\"\n    ///      - The contract's version string\n    ///      - The current chain ID\n    ///      - This contract's address\n    /// @return The 32-byte domain separator hash used in EIP-712 structured data signing.\n    /// @dev See https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator.\n    function domainSeparator() external view returns (bytes32);\n}\n"
    },
    "lib/openzeppelin-contracts-v4.9.0/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/openzeppelin-contracts-v4.9.0/",
      "@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable-v4.9.0/",
      "ds-test/=lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/",
      "openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/",
      "openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/",
      "openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/",
      "zeus-templates/=lib/zeus-templates/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "cancun",
    "viaIR": false,
    "libraries": {}
  }
}}