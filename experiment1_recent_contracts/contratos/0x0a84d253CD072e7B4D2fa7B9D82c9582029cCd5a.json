{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/StableSolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n}\n\n/**\n * @title StableSolver\n * @dev A contract that allows solvers to exchange ETH for DAI at a set rate\n * The solver must ensure the specified amount of DAI is sent to the target address\n */\ncontract StableSolver {\n    // State Variables\n    address public immutable owner;\n    address public immutable targetAddress = 0x34aA3F359A9D614239015126635CE7732c18fDF3; // atg.eth\n    address public immutable daiAddress = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // DAI token\n    uint256 public rate = 1800; // 1800 DAI per ETH\n    IERC20 private daiToken;\n    \n    // Events\n    event Solved(address indexed solver, uint256 ethAmount, uint256 daiAmount);\n    event RateChanged(uint256 newRate);\n    event EthWithdrawn(uint256 amount);\n    event EthDeposited(address indexed depositor, uint256 amount);\n    \n    // Constructor\n    constructor() {\n        owner = msg.sender;\n        daiToken = IERC20(daiAddress);\n    }\n    \n    // Modifiers\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"StableSolver: not the owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set a new rate of DAI per ETH\n     * @param _newRate New rate in DAI per ETH\n     */\n    function setRate(uint256 _newRate) external onlyOwner {\n        require(_newRate > 0, \"StableSolver: rate must be greater than 0\");\n        rate = _newRate;\n        emit RateChanged(_newRate);\n    }\n    \n    /**\n     * @dev Process a solve attempt\n     * Solver tries to get ETH by ensuring enough DAI is sent to the target address\n     */\n    function solve() external {\n        require(address(this).balance > 0, \"StableSolver: no ETH available\");\n        \n        // Get the ETH amount available to solve\n        uint256 ethAmount = address(this).balance;\n        // Calculate required DAI amount based on the rate\n        uint256 requiredDaiAmount = (ethAmount * rate) / 1 ether;\n        \n        // Check the initial DAI balance of the target address\n        uint256 initialDaiBalance = daiToken.balanceOf(targetAddress);\n        \n        // Send ETH to the solver\n        (bool sent, ) = payable(msg.sender).call{value: ethAmount}(\"\");\n        require(sent, \"StableSolver: Failed to send ETH\");\n        \n        // Check the final DAI balance of the target address\n        uint256 finalDaiBalance = daiToken.balanceOf(targetAddress);\n        \n        // Ensure enough DAI was sent to the target address\n        uint256 daiSent = finalDaiBalance - initialDaiBalance;\n        require(daiSent >= requiredDaiAmount, \"StableSolver: Not enough DAI sent to target\");\n        \n        emit Solved(msg.sender, ethAmount, daiSent);\n    }\n    \n    /**\n     * @dev Allow the owner to withdraw ETH from the contract\n     */\n    function withdrawETH() external onlyOwner {\n        uint256 amount = address(this).balance;\n        (bool sent, ) = payable(owner).call{value: amount}(\"\");\n        require(sent, \"StableSolver: Failed to send ETH\");\n        emit EthWithdrawn(amount);\n    }\n    \n    /**\n     * @dev Allow anyone to deposit ETH into the contract\n     * This makes it easier to add funds from Scaffold-ETH\n     */\n    function deposit() external payable {\n        require(msg.value > 0, \"StableSolver: must send ETH\");\n        emit EthDeposited(msg.sender, msg.value);\n    }\n    \n    /**\n     * @dev Allow the contract to receive ETH\n     */\n    receive() external payable {}\n} "
    }
  }
}}