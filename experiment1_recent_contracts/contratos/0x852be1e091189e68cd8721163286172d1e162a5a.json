{{
  "language": "Solidity",
  "sources": {
    "src/lib/TimeOperations.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.28;\n\nimport {BokkyPooBahsDateTimeLibrary} from \"BokkyPooBahsDateTimeLibrary/contracts/BokkyPooBahsDateTimeLibrary.sol\";\n\nenum DURATION {\n    DAY,\n    WEEK,\n    MONTH,\n    QUARTER,\n    YEAR\n}\n\nstruct PeriodOfTime {\n    uint256 frequency;\n    uint256 duration;\n}\n\n/**\n * @title Time Operations Library\n * @notice Library to do high level time operations\n * @author Libre\n */\nlibrary TimeOperations {\n    /**\n     * @notice Calculates a lookback based on a period of time\n     * @param _period The defined lookback period\n     * @param _time Time to lookback from\n     * @return Timestamp of the lookback\n     */\n    function lookback(PeriodOfTime memory _period, uint256 _time) public pure returns (uint256) {\n        uint256 timestamp;\n        if (_period.duration == uint256(DURATION.DAY)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.subDays(_time, _period.frequency);\n        } else if (_period.duration == uint256(DURATION.WEEK)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.subDays(_time, _period.frequency * 7);\n        } else if (_period.duration == uint256(DURATION.MONTH)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.subMonths(_time, _period.frequency);\n        } else if (_period.duration == uint256(DURATION.QUARTER)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.subMonths(_time, _period.frequency * 3);\n        } else if (_period.duration == uint256(DURATION.YEAR)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.subYears(_time, _period.frequency);\n        }\n        return timestamp;\n    }\n\n    /**\n     * @notice Calculates a lookforward based on a period of time\n     * @param _period The defined lookforward period\n     * @param _time Time to lookforward from\n     * @return Timestamp of the lookforward\n     */\n    function lookforward(PeriodOfTime memory _period, uint256 _time) public pure returns (uint256) {\n        uint256 timestamp;\n        if (_period.duration == uint256(DURATION.DAY)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.addDays(_time, _period.frequency);\n        } else if (_period.duration == uint256(DURATION.WEEK)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.addDays(_time, _period.frequency * 7);\n        } else if (_period.duration == uint256(DURATION.MONTH)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.addMonths(_time, _period.frequency);\n        } else if (_period.duration == uint256(DURATION.QUARTER)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.addMonths(_time, _period.frequency * 3);\n        } else if (_period.duration == uint256(DURATION.YEAR)) {\n            timestamp = BokkyPooBahsDateTimeLibrary.addYears(_time, _period.frequency);\n        }\n        return timestamp;\n    }\n\n    /**\n     * @notice Given a start time and current time, calculates the current period\n     * and its start/end times based on the period definition\n     * @param _period The defined period (frequency and duration)\n     * @param _start The start time of the first period\n     * @param _time Current time to find the period for\n     * @return Number of the period, start of the period, end of the period\n     */\n    function currentPeriod(PeriodOfTime memory _period, uint256 _start, uint256 _time)\n        public\n        pure\n        returns (uint256, uint256, uint256)\n    {\n        function(uint256, uint256) internal pure returns (uint256) addTime;\n        uint256 periodSize;\n\n        if (_period.duration == uint256(DURATION.DAY)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addDays;\n            periodSize = _period.frequency;\n        } else if (_period.duration == uint256(DURATION.WEEK)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addDays;\n            periodSize = _period.frequency * 7;\n        } else if (_period.duration == uint256(DURATION.MONTH)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addMonths;\n            periodSize = _period.frequency;\n        } else if (_period.duration == uint256(DURATION.QUARTER)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addMonths;\n            periodSize = _period.frequency * 3;\n        } else if (_period.duration == uint256(DURATION.YEAR)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addYears;\n            periodSize = _period.frequency;\n        }\n\n        if (_time <= _start) {\n            return (1, _start, addTime(_start, periodSize));\n        }\n\n        // Calculate how many complete periods have passed since start\n        uint256 periodsPassed;\n        if (_period.duration == uint256(DURATION.DAY) || _period.duration == uint256(DURATION.WEEK)) {\n            periodsPassed = BokkyPooBahsDateTimeLibrary.diffDays(_start, _time) / periodSize;\n        } else if (_period.duration == uint256(DURATION.MONTH) || _period.duration == uint256(DURATION.QUARTER)) {\n            periodsPassed = BokkyPooBahsDateTimeLibrary.diffMonths(_start, _time) / periodSize;\n        } else {\n            periodsPassed = BokkyPooBahsDateTimeLibrary.diffYears(_start, _time) / periodSize;\n        }\n\n        // Current period is the next period after the last complete period\n        uint256 currentPeriodNumber = periodsPassed + 1;\n\n        // Calculate start and end times of the current period\n        uint256 periodStart = addTime(_start, periodSize * (currentPeriodNumber - 1));\n        uint256 periodEnd = addTime(_start, periodSize * currentPeriodNumber);\n\n        return (currentPeriodNumber, periodStart, periodEnd);\n    }\n\n    /**\n     * @notice Given a start time of periods repeating, calculate the start and end of a specific n(th) period\n     * @param _repeatedPeriod The period of time that is repeated in the range\n     * @param _periodNumber The number of the period to calculate the start and end of\n     * @param _start The start of the range as UNIX timestamp\n     * @return The start and end of the _periodNumber(th) period in the range\n     * @return The start and end of the _periodNumber(th) period in the range\n     */\n    function getPeriodInterval(PeriodOfTime memory _repeatedPeriod, uint256 _periodNumber, uint256 _start)\n        public\n        pure\n        returns (uint256, uint256)\n    {\n        if (_periodNumber == 0) {\n            revert(\"Invalid period number\");\n        }\n\n        function(uint256, uint256) internal pure returns (uint256) addTime;\n\n        uint256 start;\n        uint256 end;\n\n        if (_repeatedPeriod.duration == uint256(DURATION.DAY)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addDays;\n        } else if (_repeatedPeriod.duration == uint256(DURATION.WEEK)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addDays;\n            _repeatedPeriod.frequency *= 7; // use it as weeks\n        } else if (_repeatedPeriod.duration == uint256(DURATION.MONTH)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addMonths;\n        } else if (_repeatedPeriod.duration == uint256(DURATION.QUARTER)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addMonths;\n            _repeatedPeriod.frequency *= 3; // use it as quarters\n        } else if (_repeatedPeriod.duration == uint256(DURATION.YEAR)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addYears;\n        }\n        start = addTime(_start, _repeatedPeriod.frequency * (_periodNumber - 1));\n        end = addTime(_start, _repeatedPeriod.frequency * _periodNumber);\n        return (start, end);\n    }\n\n    /**\n     * @notice Given a range of time, calculates the how many times a period is repeated in it\n     * @param _period The period of time to be repeated in the interval\n     * @param _start The start of the interval as UNIX timestamp\n     * @param _end The end of the interval as UNIX timestamp\n     */\n    function getNumberOfPeriods(PeriodOfTime memory _period, uint256 _start, uint256 _end)\n        public\n        pure\n        returns (uint256)\n    {\n        uint256 numberOfPeriods;\n        if (_period.duration == uint256(DURATION.DAY)) {\n            numberOfPeriods = BokkyPooBahsDateTimeLibrary.diffDays(_start, _end) / _period.frequency;\n        } else if (_period.duration == uint256(DURATION.WEEK)) {\n            _period.frequency *= 7; // use it as weeks\n            numberOfPeriods = BokkyPooBahsDateTimeLibrary.diffDays(_start, _end) / _period.frequency;\n        } else if (_period.duration == uint256(DURATION.MONTH)) {\n            numberOfPeriods = BokkyPooBahsDateTimeLibrary.diffMonths(_start, _end) / _period.frequency;\n        } else if (_period.duration == uint256(DURATION.QUARTER)) {\n            _period.frequency *= 3; // use it as quarters\n            numberOfPeriods = BokkyPooBahsDateTimeLibrary.diffMonths(_start, _end) / _period.frequency;\n        } else if (_period.duration == uint256(DURATION.YEAR)) {\n            numberOfPeriods = BokkyPooBahsDateTimeLibrary.diffYears(_start, _end) / _period.frequency;\n        }\n        return numberOfPeriods;\n    }\n\n    /**\n     * @notice Given the start of a period, calculates the end of the period\n     * @param _period The period of time to calculate the end of\n     * @param _start The start of the period as UNIX timestamp\n     * @return The end of the period as UNIX timestamp\n     */\n    function getPeriodEnd(PeriodOfTime memory _period, uint256 _start) public pure returns (uint256) {\n        function(uint256, uint256) internal pure returns (uint256) addTime;\n\n        if (_period.duration == uint256(DURATION.DAY)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addDays;\n        } else if (_period.duration == uint256(DURATION.WEEK)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addDays;\n            _period.frequency *= 7; // use it as weeks\n        } else if (_period.duration == uint256(DURATION.MONTH)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addMonths;\n        } else if (_period.duration == uint256(DURATION.QUARTER)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addMonths;\n            _period.frequency *= 3; // use it as quarters\n        } else if (_period.duration == uint256(DURATION.YEAR)) {\n            addTime = BokkyPooBahsDateTimeLibrary.addYears;\n        }\n\n        return addTime(_start, _period.frequency);\n    }\n\n    /**\n     * @notice Converts a period of time to days\n     * @param _period A period of time to convert to days\n     */\n    function toDays(PeriodOfTime memory _period) public pure returns (uint256) {\n        if (_period.duration == uint256(DURATION.DAY)) {\n            return _period.frequency;\n        } else if (_period.duration == uint256(DURATION.WEEK)) {\n            return _period.frequency * 7;\n        } else if (_period.duration == uint256(DURATION.MONTH)) {\n            return _period.frequency * 30;\n        } else if (_period.duration == uint256(DURATION.QUARTER)) {\n            return _period.frequency * 90;\n        } else if (_period.duration == uint256(DURATION.YEAR)) {\n            return _period.frequency * 365;\n        } else {\n            revert(\"Invalid duration\");\n        }\n    }\n}\n"
    },
    "lib/BokkyPooBahsDateTimeLibrary/contracts/BokkyPooBahsDateTimeLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's DateTime Library v1.01\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n// ----------------------------------------------------------------------------\n\nlibrary BokkyPooBahsDateTimeLibrary {\n\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint constant SECONDS_PER_HOUR = 60 * 60;\n    uint constant SECONDS_PER_MINUTE = 60;\n    int constant OFFSET19700101 = 2440588;\n\n    uint constant DOW_MON = 1;\n    uint constant DOW_TUE = 2;\n    uint constant DOW_WED = 3;\n    uint constant DOW_THU = 4;\n    uint constant DOW_FRI = 5;\n    uint constant DOW_SAT = 6;\n    uint constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\n        require(year >= 1970);\n        int _year = int(year);\n        int _month = int(month);\n        int _day = int(day);\n\n        int __days = _day\n          - 32075\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n          - OFFSET19700101;\n\n        _days = uint(__days);\n    }\n\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n        int __days = int(_days);\n\n        int L = __days + 68569 + OFFSET19700101;\n        int N = 4 * L / 146097;\n        L = L - (146097 * N + 3) / 4;\n        int _year = 4000 * (L + 1) / 1461001;\n        L = L - 1461 * _year / 4 + 31;\n        int _month = 80 * L / 2447;\n        int _day = L - 2447 * _month / 80;\n        L = _month / 11;\n        _month = _month + 2 - 12 * L;\n        _year = 100 * (N - 49) + _year + L;\n\n        year = uint(_year);\n        month = uint(_month);\n        day = uint(_day);\n    }\n\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\n    }\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\n    }\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n        secs = secs % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n        second = secs % SECONDS_PER_MINUTE;\n    }\n\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\n        if (year >= 1970 && month > 0 && month <= 12) {\n            uint daysInMonth = _getDaysInMonth(year, month);\n            if (day > 0 && day <= daysInMonth) {\n                valid = true;\n            }\n        }\n    }\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\n        if (isValidDate(year, month, day)) {\n            if (hour < 24 && minute < 60 && second < 60) {\n                valid = true;\n            }\n        }\n    }\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        leapYear = _isLeapYear(year);\n    }\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n    }\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\n    }\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\n    }\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        daysInMonth = _getDaysInMonth(year, month);\n    }\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            daysInMonth = 31;\n        } else if (month != 2) {\n            daysInMonth = 30;\n        } else {\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n        }\n    }\n    // 1 = Monday, 7 = Sunday\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\n        uint _days = timestamp / SECONDS_PER_DAY;\n        dayOfWeek = (_days + 3) % 7 + 1;\n    }\n\n    function getYear(uint timestamp) internal pure returns (uint year) {\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n    function getMonth(uint timestamp) internal pure returns (uint month) {\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n    function getDay(uint timestamp) internal pure returns (uint day) {\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n    function getHour(uint timestamp) internal pure returns (uint hour) {\n        uint secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n    }\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\n        uint secs = timestamp % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n    }\n    function getSecond(uint timestamp) internal pure returns (uint second) {\n        second = timestamp % SECONDS_PER_MINUTE;\n    }\n\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year += _years;\n        uint daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        month += _months;\n        year += (month - 1) / 12;\n        month = (month - 1) % 12 + 1;\n        uint daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\n        require(newTimestamp >= timestamp);\n    }\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp >= timestamp);\n    }\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp + _seconds;\n        require(newTimestamp >= timestamp);\n    }\n\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year -= _years;\n        uint daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint yearMonth = year * 12 + (month - 1) - _months;\n        year = yearMonth / 12;\n        month = yearMonth % 12 + 1;\n        uint daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\n        require(newTimestamp <= timestamp);\n    }\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp <= timestamp);\n    }\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp - _seconds;\n        require(newTimestamp <= timestamp);\n    }\n\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\n        require(fromTimestamp <= toTimestamp);\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _years = toYear - fromYear;\n    }\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\n        require(fromTimestamp <= toTimestamp);\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\n    }\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\n        require(fromTimestamp <= toTimestamp);\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\n    }\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\n        require(fromTimestamp <= toTimestamp);\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\n    }\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\n        require(fromTimestamp <= toTimestamp);\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\n    }\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\n        require(fromTimestamp <= toTimestamp);\n        _seconds = toTimestamp - fromTimestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "BokkyPooBahsDateTimeLibrary/=lib/BokkyPooBahsDateTimeLibrary/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin-contracts/",
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "risc0/=lib/risc0-ethereum/contracts/src/",
      "eas-contracts/=lib/eas-contracts/contracts/",
      "safe-contracts/=lib/safe-contracts/contracts/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "risc0-ethereum/=lib/risc0-ethereum/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "cancun",
    "viaIR": false,
    "libraries": {
      "src/lib/SortedLinkedList.sol": {
        "SortedLinkedList": "0x07B879C1bAaeeDe4dbC7383f6342556Ef144b27F"
      },
      "src/lib/TimeOperations.sol": {
        "TimeOperations": "0x852BE1E091189E68cD8721163286172d1e162a5a"
      },
      "src/utils/GatewayUtils.sol": {
        "GatewayUtils": "0xaB8b3a4CDdcf7B83C57880926Ba940F388897D11"
      }
    }
  }
}}