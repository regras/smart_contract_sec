{{
  "language": "Solidity",
  "sources": {
    "contracts/SuiBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./utils/CommitteeUpgradeable.sol\";\nimport \"./interfaces/ISuiBridge.sol\";\nimport \"./interfaces/IBridgeVault.sol\";\nimport \"./interfaces/IBridgeLimiter.sol\";\nimport \"./interfaces/IBridgeConfig.sol\";\n\n/// @title SuiBridge\n/// @notice This contract implements a token bridge that enables users to deposit and withdraw\n/// supported tokens to and from other chains. The bridge supports the transfer of Ethereum and ERC20\n/// tokens. Bridge operations are managed by a committee of Sui validators that are responsible\n/// for verifying and processing bridge messages. The bridge is designed to be upgradeable and\n/// can be paused in case of an emergency. The bridge also enforces limits on the amount of\n/// assets that can be withdrawn to prevent abuse.\ncontract SuiBridge is ISuiBridge, CommitteeUpgradeable, PausableUpgradeable {\n    /* ========== STATE VARIABLES ========== */\n\n    mapping(uint64 nonce => bool isProcessed) public isTransferProcessed;\n    IBridgeVault public vault;\n    IBridgeLimiter public limiter;\n\n    uint8 constant SUI_ADDRESS_LENGTH = 32;\n\n    /* ========== INITIALIZER ========== */\n\n    /// @notice Initializes the SuiBridge contract with the provided parameters.\n    /// @dev this function should be called directly after deployment (see OpenZeppelin upgradeable standards).\n    /// @param _committee The address of the committee contract.\n    /// @param _vault The address of the bridge vault contract.\n    /// @param _limiter The address of the bridge limiter contract.\n    function initialize(address _committee, address _vault, address _limiter)\n        external\n        initializer\n    {\n        __CommitteeUpgradeable_init(_committee);\n        __Pausable_init();\n        vault = IBridgeVault(_vault);\n        limiter = IBridgeLimiter(_limiter);\n    }\n\n    /* ========== EXTERNAL FUNCTIONS ========== */\n\n    /// @notice Allows the caller to provide signatures that enable the transfer of tokens to\n    /// the recipient address indicated within the message payload.\n    /// @dev `message.chainID` represents the sending chain ID. Receiving chain ID needs to match\n    /// this bridge's chain ID (this chain).\n    /// @param signatures The array of signatures.\n    /// @param message The BridgeUtils containing the transfer details.\n    function transferBridgedTokensWithSignatures(\n        bytes[] memory signatures,\n        BridgeUtils.Message memory message\n    )\n        external\n        nonReentrant\n        verifyMessageAndSignatures(message, signatures, BridgeUtils.TOKEN_TRANSFER)\n        onlySupportedChain(message.chainID)\n    {\n        // verify that message has not been processed\n        require(!isTransferProcessed[message.nonce], \"SuiBridge: Message already processed\");\n\n        IBridgeConfig config = committee.config();\n\n        BridgeUtils.TokenTransferPayload memory tokenTransferPayload =\n            BridgeUtils.decodeTokenTransferPayload(message.payload);\n\n        // verify target chain ID is this chain ID\n        require(\n            tokenTransferPayload.targetChain == config.chainID(), \"SuiBridge: Invalid target chain\"\n        );\n\n        // convert amount to ERC20 token decimals\n        uint256 erc20AdjustedAmount = BridgeUtils.convertSuiToERC20Decimal(\n            IERC20Metadata(config.tokenAddressOf(tokenTransferPayload.tokenID)).decimals(),\n            config.tokenSuiDecimalOf(tokenTransferPayload.tokenID),\n            tokenTransferPayload.amount\n        );\n\n        _transferTokensFromVault(\n            message.chainID,\n            tokenTransferPayload.tokenID,\n            tokenTransferPayload.recipientAddress,\n            erc20AdjustedAmount\n        );\n\n        // mark message as processed\n        isTransferProcessed[message.nonce] = true;\n\n        emit TokensClaimed(\n            message.chainID,\n            message.nonce,\n            config.chainID(),\n            tokenTransferPayload.tokenID,\n            erc20AdjustedAmount,\n            tokenTransferPayload.senderAddress,\n            tokenTransferPayload.recipientAddress\n        );\n    }\n\n    /// @notice Executes an emergency operation with the provided signatures and message.\n    /// @dev If the given operation is to freeze and the bridge is already frozen, the operation\n    /// will revert.\n    /// @param signatures The array of signatures to verify.\n    /// @param message The BridgeUtils containing the details of the operation.\n    function executeEmergencyOpWithSignatures(\n        bytes[] memory signatures,\n        BridgeUtils.Message memory message\n    )\n        external\n        nonReentrant\n        verifyMessageAndSignatures(message, signatures, BridgeUtils.EMERGENCY_OP)\n    {\n        // decode the emergency op message\n        bool isFreezing = BridgeUtils.decodeEmergencyOpPayload(message.payload);\n\n        if (isFreezing) _pause();\n        else _unpause();\n\n        emit EmergencyOperation(message.nonce, isFreezing);\n    }\n\n    /// @notice Enables the caller to deposit supported tokens to be bridged to a given\n    /// destination chain.\n    /// @dev The provided tokenID and destinationChainID must be supported. The caller must\n    /// have approved this contract to transfer the given token.\n    /// @param tokenID The ID of the token to be bridged.\n    /// @param amount The amount of tokens to be bridged.\n    /// @param recipientAddress The address on the Sui chain where the tokens will be sent.\n    /// @param destinationChainID The ID of the destination chain.\n    function bridgeERC20(\n        uint64 tokenID,\n        uint256 amount,\n        bytes memory recipientAddress,\n        uint8 destinationChainID\n    ) external whenNotPaused nonReentrant onlySupportedChain(destinationChainID) {\n        require(\n            recipientAddress.length == SUI_ADDRESS_LENGTH,\n            \"SuiBridge: Invalid recipient address length\"\n        );\n\n        IBridgeConfig config = committee.config();\n\n        require(config.isTokenSupported(tokenID), \"SuiBridge: Unsupported token\");\n\n        address tokenAddress = config.tokenAddressOf(tokenID);\n\n        // check that the bridge contract has allowance to transfer the tokens\n        require(\n            IERC20(tokenAddress).allowance(msg.sender, address(this)) >= amount,\n            \"SuiBridge: Insufficient allowance\"\n        );\n        if (tokenID == BridgeUtils.USDC || tokenID == BridgeUtils.USDT) {\n            require(amount < limiter.getUsdMaxLimit(), \"SuiBridge: USD Exceed Limit\");\n        }\n\n        // calculate old vault balance\n        uint256 oldBalance = IERC20(tokenAddress).balanceOf(address(vault));\n\n        // Transfer the tokens from the contract to the vault\n        SafeERC20.safeTransferFrom(IERC20(tokenAddress), msg.sender, address(vault), amount);\n\n        // calculate new vault balance\n        uint256 newBalance = IERC20(tokenAddress).balanceOf(address(vault));\n\n        // calculate the amount transferred\n        uint256 amountTransfered = newBalance - oldBalance;\n\n        // Adjust the amount\n        uint64 suiAdjustedAmount = BridgeUtils.convertERC20ToSuiDecimal(\n            IERC20Metadata(tokenAddress).decimals(),\n            config.tokenSuiDecimalOf(tokenID),\n            amountTransfered\n        );\n\n        emit TokensDeposited(\n            config.chainID(),\n            nonces[BridgeUtils.TOKEN_TRANSFER],\n            destinationChainID,\n            tokenID,\n            suiAdjustedAmount,\n            msg.sender,\n            recipientAddress\n        );\n\n        // increment token transfer nonce\n        nonces[BridgeUtils.TOKEN_TRANSFER]++;\n    }\n\n    /// @notice Enables the caller to deposit Eth to be bridged to a given destination chain.\n    /// @dev The provided destinationChainID must be supported.\n    /// @param recipientAddress The address on the destination chain where Eth will be sent.\n    /// @param destinationChainID The ID of the destination chain.\n    function bridgeETH(bytes memory recipientAddress, uint8 destinationChainID)\n        external\n        payable\n        whenNotPaused\n        nonReentrant\n        onlySupportedChain(destinationChainID)\n    {\n        require(\n            recipientAddress.length == SUI_ADDRESS_LENGTH,\n            \"SuiBridge: Invalid recipient address length\"\n        );\n\n        uint256 amount = msg.value;\n\n        // Transfer the unwrapped ETH to the target address\n        (bool success,) = payable(address(vault)).call{value: amount}(\"\");\n        require(success, \"SuiBridge: Failed to transfer ETH to vault\");\n\n        // Adjust the amount to emit.\n        IBridgeConfig config = committee.config();\n\n        // Adjust the amount\n        uint64 suiAdjustedAmount = BridgeUtils.convertERC20ToSuiDecimal(\n            IERC20Metadata(config.tokenAddressOf(BridgeUtils.ETH)).decimals(),\n            config.tokenSuiDecimalOf(BridgeUtils.ETH),\n            amount\n        );\n\n        emit TokensDeposited(\n            config.chainID(),\n            nonces[BridgeUtils.TOKEN_TRANSFER],\n            destinationChainID,\n            BridgeUtils.ETH,\n            suiAdjustedAmount,\n            msg.sender,\n            recipientAddress\n        );\n\n        // increment token transfer nonce\n        nonces[BridgeUtils.TOKEN_TRANSFER]++;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /// @dev Transfers tokens from the vault to a target address.\n    /// @param sendingChainID The ID of the chain from which the tokens are being transferred.\n    /// @param tokenID The ID of the token being transferred.\n    /// @param recipientAddress The address to which the tokens are being transferred.\n    /// @param amount The amount of tokens being transferred.\n    function _transferTokensFromVault(\n        uint8 sendingChainID,\n        uint64 tokenID,\n        address recipientAddress,\n        uint256 amount\n    ) private whenNotPaused limitNotExceeded(sendingChainID, tokenID, amount) {\n        address tokenAddress = committee.config().tokenAddressOf(tokenID);\n\n        // Check that the token address is supported\n        require(tokenAddress != address(0), \"SuiBridge: Unsupported token\");\n\n        // transfer eth if token type is eth\n        if (tokenID == BridgeUtils.ETH) {\n            vault.transferETH(payable(recipientAddress), amount);\n        } else {\n            // transfer tokens from vault to target address\n            vault.transferERC20(tokenAddress, recipientAddress, amount);\n        }\n\n        // update amount bridged\n        limiter.recordBridgeTransfers(sendingChainID, tokenID, amount);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    /// @dev Requires the amount being transferred does not exceed the bridge limit in\n    /// the last 24 hours.\n    /// @param tokenID The ID of the token being transferred.\n    /// @param amount The amount of tokens being transferred.\n    modifier limitNotExceeded(uint8 chainID, uint64 tokenID, uint256 amount) {\n        require(\n            !limiter.willAmountExceedLimit(chainID, tokenID, amount),\n            \"SuiBridge: Amount exceeds bridge limit\"\n        );\n        _;\n    }\n\n    /// @dev Requires the target chain ID is supported.\n    /// @param targetChainID The ID of the target chain.\n    modifier onlySupportedChain(uint8 targetChainID) {\n        require(\n            committee.config().isChainSupported(targetChainID),\n            \"SuiBridge: Target chain not supported\"\n        );\n        _;\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-upgradeable-5.0.1/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "contracts/utils/CommitteeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"../interfaces/IBridgeCommittee.sol\";\nimport \"./MessageVerifier.sol\";\n\n/// @title CommitteeUpgradeable\n/// @notice This contract enables message signature verification using a BridgeCommittee contract,\n/// in addition to providing an interface for upgradeability via signed message verification.\n/// @dev The contract is intended to be inherited by contracts that require message verification and\n/// upgradeability.\nabstract contract CommitteeUpgradeable is\n    UUPSUpgradeable,\n    MessageVerifier,\n    ReentrancyGuardUpgradeable\n{\n    /* ========== STATE VARIABLES ========== */\n\n    bool private _upgradeAuthorized;\n    // upgradeablity storage gap\n    uint256[50] private __gap;\n\n    /* ========== INITIALIZER ========== */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function __CommitteeUpgradeable_init(address _committee) internal onlyInitializing {\n        __ReentrancyGuard_init();\n        __MessageVerifier_init(_committee);\n        committee = IBridgeCommittee(_committee);\n    }\n\n    /* ========== EXTERNAL FUNCTIONS ========== */\n\n    /// @notice Enables the upgrade of the inheriting contract by verifying the provided signatures.\n    /// @dev The function will revert if the provided signatures or message is invalid.\n    /// @param signatures The array of signatures to be verified.\n    /// @param message The BridgeUtils to be verified.\n    function upgradeWithSignatures(bytes[] memory signatures, BridgeUtils.Message memory message)\n        external\n        nonReentrant\n        verifyMessageAndSignatures(message, signatures, BridgeUtils.UPGRADE)\n    {\n        // decode the upgrade payload\n        (address proxy, address implementation, bytes memory callData) =\n            BridgeUtils.decodeUpgradePayload(message.payload);\n\n        // verify proxy address\n        require(proxy == address(this), \"CommitteeUpgradeable: Invalid proxy address\");\n\n        // authorize upgrade\n        _upgradeAuthorized = true;\n        // upgrade contract\n        upgradeToAndCall(implementation, callData);\n\n        emit ContractUpgraded(message.nonce, proxy, implementation);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /// @notice Authorizes the upgrade of the inheriting contract.\n    /// @dev The _upgradeAuthorized state variable can only be set with the upgradeWithSignatures\n    /// function, meaning that the upgrade can only be authorized by the committee.\n    function _authorizeUpgrade(address) internal override {\n        require(_upgradeAuthorized, \"CommitteeUpgradeable: Unauthorized upgrade\");\n        _upgradeAuthorized = false;\n    }\n\n    /// @notice Event emitted when the contract is upgraded\n    /// @param nonce The nonce of the upgrade message.\n    /// @param proxy The address of the proxy contract.\n    /// @param implementation The address of the new implementation.\n    event ContractUpgraded(uint256 nonce, address proxy, address implementation);\n}\n"
    },
    "contracts/interfaces/ISuiBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title ISuiBridge\n/// @dev Interface for the Sui Bridge contract.\ninterface ISuiBridge {\n    /// @notice Emitted when tokens are deposited to be bridged.\n    /// @param sourceChainID The ID of the source chain (this chain).\n    /// @param nonce The nonce of the transaction on source chain.\n    /// @param destinationChainID The ID of the destination chain.\n    /// @param tokenID The code of the token.\n    /// @param suiAdjustedAmount The amount of tokens to transfer, adjusted for Sui decimals.\n    /// @param senderAddress The address of the sender.\n    /// @param recipientAddress The address of the sender.\n    event TokensDeposited(\n        uint8 indexed sourceChainID,\n        uint64 indexed nonce,\n        uint8 indexed destinationChainID,\n        uint64 tokenID,\n        uint64 suiAdjustedAmount,\n        address senderAddress,\n        bytes recipientAddress\n    );\n\n    /// @notice Emitted when bridged tokens are transferred to the recipient address.\n    /// @param sourceChainID The ID of the source chain.\n    /// @param nonce The nonce of the transaction on source chain.\n    /// @param destinationChainID The ID of the destination chain (this chain).\n    /// @param tokenID The code of the token.\n    /// @param erc20AdjustedAmount The amount of tokens claimed, adjusted for ERC20 decimals.\n    /// @param senderAddress The address of the sender.\n    /// @param recipientAddress The address of the sender.\n    // event BridgedTokensTransferred(\n    event TokensClaimed(\n        uint8 indexed sourceChainID,\n        uint64 indexed nonce,\n        uint8 indexed destinationChainID,\n        uint64 tokenID,\n        uint256 erc20AdjustedAmount,\n        bytes senderAddress,\n        address recipientAddress\n    );\n\n    /// @notice Emitted when the bridge is paused or unpaused.\n    /// @param nonce The governance action nonce.\n    /// @param paused A boolean indicating whether the bridge is paused or not.\n    event EmergencyOperation(uint64 nonce, bool paused);\n}\n"
    },
    "contracts/interfaces/IBridgeVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title IBridgeVault\n/// @dev Interface for the BridgeVault contract.\ninterface IBridgeVault {\n    /// @notice Transfers ERC20 tokens from the BridgeVault contract to a target address.\n    /// @param tokenAddress The address of the ERC20 token.\n    /// @param recipientAddress The address to transfer the tokens to.\n    /// @param amount The amount of tokens to transfer.\n    function transferERC20(address tokenAddress, address recipientAddress, uint256 amount) external;\n\n    /// @notice Transfers ETH from the BridgeVault contract to a target address.\n    /// @param recipientAddress The address to transfer the ETH to.\n    /// @param amount The amount of ETH to transfer.\n    function transferETH(address payable recipientAddress, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IBridgeLimiter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title IBridgeLimiter\n/// @notice Interface for the BridgeLimiter contract.\ninterface IBridgeLimiter {\n    /// @notice Updates the bridge transfers for a specific token ID and amount. Only the contract\n    /// owner can call this function (intended to be the SuiBridge contract).\n    /// @dev The amount must be greater than 0 and must not exceed the rolling window limit.\n    /// @param chainID The ID of the chain to record the transfer for.\n    /// @param tokenID The ID of the token.\n    /// @param amount The amount of tokens to be transferred.\n    function recordBridgeTransfers(uint8 chainID, uint64 tokenID, uint256 amount) external;\n\n    /// @notice Returns whether the total amount, including the given token amount, will exceed the totalLimit.\n    /// @dev The function will calculate the given token amount in USD.\n    /// @param chainID The ID of the chain to check limit for.\n    /// @param tokenID The ID of the token.\n    /// @param amount The amount of the token.\n    /// @return boolean indicating whether the total amount will exceed the limit.\n    function willAmountExceedLimit(uint8 chainID, uint64 tokenID, uint256 amount)\n        external\n        view\n        returns (bool);\n\n    function getUsdMaxLimit()external view returns (uint64 limit);\n\n\n    // We no longer emit this event but keep it here for ABI compatibility.\n    /// @dev (deprecated, not in use) Emitted when the hourly transfer amount is updated.\n    /// @param hourUpdated The hour that was updated.\n    /// @param amount The amount in USD transferred.\n    event HourlyTransferAmountUpdated(uint32 hourUpdated, uint256 amount);\n\n    /// @dev Emitted when the total limit is updated.\n    /// @param nonce The governance action nonce.\n    /// @param sourceChainID The ID of the source chain.\n    /// @param newLimit The new limit in USD with 4 decimal places (e.g. 10000 -> $1)\n    event LimitUpdatedV2(uint64 nonce, uint8 sourceChainID, uint64 newLimit);\n\n    /// @dev (deprecated in favor of LimitUpdatedV2)\n    event LimitUpdated(uint8 sourceChainID, uint64 newLimit);\n}\n"
    },
    "contracts/interfaces/IBridgeConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title IBridgeConfig\n/// @dev Interface for the BridgeConfig contract.\ninterface IBridgeConfig {\n    /* ========== STRUCTS ========== */\n\n    /// @notice The data struct for the supported bridge tokens.\n    struct Token {\n        address tokenAddress;\n        uint8 suiDecimal;\n        bool native;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /// @notice Returns the address of the token with the given ID.\n    /// @param tokenID The ID of the token.\n    /// @return address of the provided token.\n    function tokenAddressOf(uint64 tokenID) external view returns (address);\n\n    /// @notice Returns the sui decimal places of the token with the given ID.\n    /// @param tokenID The ID of the token.\n    /// @return amount of sui decimal places of the provided token.\n    function tokenSuiDecimalOf(uint64 tokenID) external view returns (uint8);\n\n    /// @notice Returns the price of the token with the given ID.\n    /// @param tokenID The ID of the token.\n    /// @return price of the provided token.\n    function tokenPriceOf(uint64 tokenID) external view returns (uint64);\n\n    /// @notice Returns the supported status of the token with the given ID.\n    /// @param tokenID The ID of the token.\n    /// @return true if the token is supported, false otherwise.\n    function isTokenSupported(uint64 tokenID) external view returns (bool);\n\n    /// @notice Returns whether a chain is supported in SuiBridge with the given ID.\n    /// @param chainId The ID of the chain.\n    /// @return true if the chain is supported, false otherwise.\n    function isChainSupported(uint8 chainId) external view returns (bool);\n\n    /// @notice Returns the chain ID of the bridge.\n    function chainID() external view returns (uint8);\n\n    /// @notice Event for the addition of a new token.\n    /// @param nonce The governance action nonce.\n    /// @param tokenIDs The IDs of the tokens added.\n    /// @param tokenAddresses The addresses of the tokens added.\n    /// @param suiDecimals The added token's decimal places on Sui.\n    /// @param tokenPrices The prices of the tokens added in USD.\n    event TokensAddedV2(\n        uint64 nonce,\n        uint64[] tokenIDs,\n        address[] tokenAddresses,\n        uint8[] suiDecimals,\n        uint64[] tokenPrices\n    );\n\n    /// @dev (deprecated in favor of TokensAddedV2)\n    event TokenAdded(uint64 tokenID, address tokenAddress, uint8 suiDecimal, uint64 tokenPrice);\n\n    /// @notice Event for the price update of a token.\n    /// @param nonce The governance action nonce.\n    /// @param tokenID The ID of the token updated.\n    /// @param tokenPrice The new price of the token in USD.\n    event TokenPriceUpdatedV2(uint64 nonce, uint64 tokenID, uint64 tokenPrice);\n\n    /// @dev (deprecated in favor of TokenPriceUpdatedV2)\n    event TokenPriceUpdated(uint64 tokenID, uint64 tokenPrice);\n}\n"
    },
    "dependencies/@openzeppelin-contracts-upgradeable-5.0.1/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-upgradeable-5.0.1/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-upgradeable-5.0.1/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-upgradeable-5.0.1/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IBridgeCommittee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../utils/BridgeUtils.sol\";\nimport \"./IBridgeConfig.sol\";\n\n/// @title IBridgeCommittee\n/// @notice Interface for the BridgeCommittee contract.\ninterface IBridgeCommittee {\n    /// @notice Verifies the provided signatures for the given message by aggregating and validating the\n    /// stake of each signer against the required stake of the given message type.\n    /// @dev The function will revert if the total stake of the signers is less than the required stake.\n    /// @param signatures The array of signatures to be verified.\n    /// @param message The `BridgeUtils.Message` to be verified.\n    function verifySignatures(bytes[] memory signatures, BridgeUtils.Message memory message)\n        external\n        view;\n\n    /// @notice Returns the interface of the BridgeConfig contract.\n    /// @return The interface of the BridgeConfig contract.\n    function config() external view returns (IBridgeConfig);\n\n    /* ========== EVENTS ========== */\n\n    /// @notice Emitted when the blocklist is updated.\n    /// @param nonce The governance action nonce.\n    /// @param updatedMembers The addresses of the updated committee members.\n    /// @param isBlocklisted A boolean indicating whether the committee members are blocklisted or not.\n    event BlocklistUpdatedV2(uint64 nonce, address[] updatedMembers, bool isBlocklisted);\n\n    /// @dev (deprecated in favor of BlocklistUpdatedV2)\n    event BlocklistUpdated(address[] updatedMembers, bool isBlocklisted);\n}\n"
    },
    "contracts/utils/MessageVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IBridgeCommittee.sol\";\n\n/// @title MessageVerifier\n/// @notice This contract provides an interface to verify messages and their signatures\n/// using a BridgeCommittee contract. This contract is also responsible for maintaining\n/// nonces for each message type to prevent replay attacks.\n/// @dev The contract is intended to be inherited by contracts that require message and signature\n/// verification.\nabstract contract MessageVerifier is Initializable {\n    /* ========== STATE VARIABLES ========== */\n\n    IBridgeCommittee public committee;\n    mapping(uint8 messageType => uint64 nonce) public nonces;\n\n    /* ========== INITIALIZER ========== */\n\n    function __MessageVerifier_init(address _committee) internal onlyInitializing {\n        committee = IBridgeCommittee(_committee);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    /// @notice Verifies the provided message and signatures using the BridgeCommittee contract.\n    /// @dev The function will revert if the message type does not match the expected type,\n    /// if the signatures are invalid, or if the message nonce is invalid.\n    /// @param message The BridgeUtils to be verified.\n    /// @param signatures The array of signatures to be verified.\n    /// @param messageType The expected message type of the provided message.\n    modifier verifyMessageAndSignatures(\n        BridgeUtils.Message memory message,\n        bytes[] memory signatures,\n        uint8 messageType\n    ) {\n        // verify message type\n        require(message.messageType == messageType, \"MessageVerifier: message does not match type\");\n        // verify signatures\n        committee.verifySignatures(signatures, message);\n        // increment message type nonce\n        if (messageType != BridgeUtils.TOKEN_TRANSFER) {\n            // verify chain ID\n            require(\n                message.chainID == committee.config().chainID(), \"MessageVerifier: Invalid chain ID\"\n            );\n            require(message.nonce == nonces[message.messageType], \"MessageVerifier: Invalid nonce\");\n            nonces[message.messageType]++;\n        }\n        _;\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/proxy/ERC1967/ERC1967Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
    },
    "contracts/utils/BridgeUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title BridgeUtils\n/// @notice This library defines the message format and constants for the Sui native bridge. It also\n/// provides functions to encode and decode bridge messages and their payloads.\n/// @dev This library only utilizes internal functions to enable upgradeability via the OpenZeppelin\n/// UUPS proxy pattern (external libraries are not supported).\nlibrary BridgeUtils {\n    /* ========== STRUCTS ========== */\n\n    /// @dev A struct that represents a bridge message\n    /// @param messageType The type of the message, such as token transfer, blocklist, etc.\n    /// @param version The version of the message format\n    /// @param nonce The nonce of the message, used to prevent replay attacks\n    /// @param chainID The chain ID of the source chain (for token transfer messages this is the source chain)\n    /// @param payload The payload of the message, which depends on the message type\n    struct Message {\n        uint8 messageType;\n        uint8 version;\n        uint64 nonce;\n        uint8 chainID;\n        bytes payload;\n    }\n\n    /// @dev A struct that represents a token transfer payload\n    /// @param senderAddressLength The length of the sender address in bytes\n    /// @param senderAddress The address of the sender on the source chain\n    /// @param targetChain The chain ID of the target chain\n    /// @param recipientAddressLength The length of the target address in bytes\n    /// @param recipientAddress The address of the recipient on the target chain\n    /// @param tokenID The ID of the token to be transferred\n    /// @param amount The amount of the token to be transferred\n    struct TokenTransferPayload {\n        uint8 senderAddressLength;\n        bytes senderAddress;\n        uint8 targetChain;\n        uint8 recipientAddressLength;\n        address recipientAddress;\n        uint64 tokenID;\n        uint64 amount;\n        bytes txHash;\n        uint8 eventIdx;\n    }\n\n    /* ========== CONSTANTS ========== */\n\n    // message Ids\n    uint8 public constant TOKEN_TRANSFER = 0;\n    uint8 public constant BLOCKLIST = 1;\n    uint8 public constant EMERGENCY_OP = 2;\n    uint8 public constant UPDATE_BRIDGE_LIMIT = 3;\n    uint8 public constant UPDATE_TOKEN_PRICE = 4;\n    uint8 public constant UPGRADE = 5;\n    uint8 public constant ADD_EVM_TOKENS = 7;\n\n    // Message type stake requirements\n    uint32 public constant TRANSFER_STAKE_REQUIRED = 3334;\n    uint32 public constant FREEZING_STAKE_REQUIRED = 450;\n    uint32 public constant UNFREEZING_STAKE_REQUIRED = 5001;\n    uint32 public constant UPGRADE_STAKE_REQUIRED = 5001;\n    uint16 public constant BLOCKLIST_STAKE_REQUIRED = 5001;\n    uint32 public constant BRIDGE_LIMIT_STAKE_REQUIRED = 5001;\n    uint32 public constant UPDATE_TOKEN_PRICE_STAKE_REQUIRED = 5001;\n    uint32 public constant ADD_EVM_TOKENS_STAKE_REQUIRED = 5001;\n\n    // token Ids\n    uint64 public constant SUI = 0;\n    uint64 public constant BTC = 1;\n    uint64 public constant ETH = 2;\n    uint64 public constant USDC = 3;\n    uint64 public constant USDT = 4;\n\n    string public constant MESSAGE_PREFIX = \"SUI_BRIDGE_MESSAGE\";\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /// @notice Encodes a bridge message into bytes, using abi.encodePacked to concatenate the message fields.\n    /// @param message The bridge message to be encoded.\n    /// @return The encoded message as bytes.\n    function encodeMessage(Message memory message) internal pure returns (bytes memory) {\n        bytes memory prefixTypeAndVersion =\n            abi.encodePacked(MESSAGE_PREFIX, message.messageType, message.version);\n        bytes memory nonce = abi.encodePacked(message.nonce);\n        bytes memory chainID = abi.encodePacked(message.chainID);\n        return bytes.concat(prefixTypeAndVersion, nonce, chainID, message.payload);\n    }\n\n    /// @notice Computes the hash of a bridge message using keccak256.\n    /// @param _message The bridge message to be hashed.\n    /// @return The hash of the message.\n    function computeHash(Message memory _message) internal pure returns (bytes32) {\n        return keccak256(encodeMessage(_message));\n    }\n\n    /// @notice returns the required stake for the provided message type.\n    /// @dev The function will revert if the message type is invalid.\n    /// @param _message The bridge message to be used to determine the required stake.\n    /// @return The required stake for the provided message type.\n    function requiredStake(Message memory _message) internal pure returns (uint32) {\n        if (_message.messageType == TOKEN_TRANSFER) {\n            return TRANSFER_STAKE_REQUIRED;\n        } else if (_message.messageType == BLOCKLIST) {\n            return BLOCKLIST_STAKE_REQUIRED;\n        } else if (_message.messageType == EMERGENCY_OP) {\n            bool isFreezing = decodeEmergencyOpPayload(_message.payload);\n            if (isFreezing) return FREEZING_STAKE_REQUIRED;\n            return UNFREEZING_STAKE_REQUIRED;\n        } else if (_message.messageType == UPDATE_BRIDGE_LIMIT) {\n            return BRIDGE_LIMIT_STAKE_REQUIRED;\n        } else if (_message.messageType == UPDATE_TOKEN_PRICE) {\n            return UPDATE_TOKEN_PRICE_STAKE_REQUIRED;\n        } else if (_message.messageType == UPGRADE) {\n            return UPGRADE_STAKE_REQUIRED;\n        } else if (_message.messageType == ADD_EVM_TOKENS) {\n            return ADD_EVM_TOKENS_STAKE_REQUIRED;\n        } else {\n            revert(\"BridgeUtils: Invalid message type\");\n        }\n    }\n\n    /// @notice Converts the provided token amount to the Sui decimal adjusted amount.\n    /// @param erc20Decimal The erc20 decimal value for the token.\n    /// @param suiDecimal The sui decimal value for the token.\n    /// @param amount The ERC20 amount of the tokens to convert to Sui.\n    /// @return Sui converted amount.\n    function convertERC20ToSuiDecimal(uint8 erc20Decimal, uint8 suiDecimal, uint256 amount)\n        internal\n        pure\n        returns (uint64)\n    {\n        if (erc20Decimal == suiDecimal) {\n            // ensure provided amount is greater than 0\n            require(amount > 0, \"BridgeUtils: Insufficient amount provided\");\n            // Ensure converted amount fits within uint64\n            require(amount <= type(uint64).max, \"BridgeUtils: Amount too large for uint64\");\n            return uint64(amount);\n        }\n\n        require(erc20Decimal > suiDecimal, \"BridgeUtils: Invalid Sui decimal\");\n\n        // Difference in decimal places\n        uint256 factor = 10 ** (erc20Decimal - suiDecimal);\n        amount = amount / factor;\n\n        // Ensure the converted amount fits within uint64\n        require(amount <= type(uint64).max, \"BridgeUtils: Amount too large for uint64\");\n\n        // Ensure the converted amount is greater than 0\n        require(amount > 0, \"BridgeUtils: Insufficient amount provided\");\n\n        return uint64(amount);\n    }\n\n    /// @notice Converts the provided Sui decimal adjusted amount to the ERC20 token amount.\n    /// @param erc20Decimal The erc20 decimal value for the token.\n    /// @param suiDecimal The sui decimal value for the token.\n    /// @param amount The Sui amount of the tokens to convert to ERC20.\n    /// @return ERC20 converted amount.\n    function convertSuiToERC20Decimal(uint8 erc20Decimal, uint8 suiDecimal, uint64 amount)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (suiDecimal == erc20Decimal) {\n            return uint256(amount);\n        }\n\n        require(erc20Decimal > suiDecimal, \"BridgeUtils: Invalid Sui decimal\");\n\n        // Difference in decimal places\n        uint256 factor = 10 ** (erc20Decimal - suiDecimal);\n        return uint256(amount * factor);\n    }\n\n    /// @notice Decodes a token transfer payload from bytes to a TokenTransferPayload struct.\n    /// @dev The function will revert if the payload length is invalid.\n    ///     TokenTransfer payload is 64 bytes.\n    ///     byte 0       : sender address length\n    ///     bytes 1-32   : sender address (as we only support Sui now, it has to be 32 bytes long)\n    ///     bytes 33     : target chain id\n    ///     byte 34      : target address length\n    ///     bytes 35-54  : target address\n    ///     byte 55      : token id\n    ///     bytes 56-63  : amount\n    /// @param _payload The payload to be decoded.\n    /// @return The decoded token transfer payload as a TokenTransferPayload struct.\n    function decodeTokenTransferPayload(bytes memory _payload)\n        internal\n        pure\n        returns (TokenTransferPayload memory)\n    {\n        require(_payload.length >= 64, \"BridgeUtils: TokenTransferPayload must be at least 64 bytes\");\n\n        uint8 senderAddressLength = uint8(_payload[0]);\n\n        require(\n            senderAddressLength == 32,\n            \"BridgeUtils: Invalid sender address length, Sui address must be 32 bytes\"\n        );\n\n        // used to offset already read bytes\n        uint8 offset = 1;\n\n        // extract sender address from payload bytes 1-32\n        bytes memory senderAddress = new bytes(senderAddressLength);\n        for (uint256 i; i < senderAddressLength; i++) {\n            senderAddress[i] = _payload[i + offset];\n        }\n\n        // move offset past the sender address length\n        offset += senderAddressLength;\n\n        // target chain is a single byte\n        uint8 targetChain = uint8(_payload[offset++]);\n\n        // target address length is a single byte\n        uint8 recipientAddressLength = uint8(_payload[offset++]);\n        require(\n            recipientAddressLength == 20,\n            \"BridgeUtils: Invalid target address length, EVM address must be 20 bytes\"\n        );\n\n        // extract target address from payload (35-54)\n        address recipientAddress;\n\n        // why `add(recipientAddressLength, offset)`?\n        // At this point, offset = 35, recipientAddressLength = 20. `mload(add(payload, 55))`\n        // reads the next 32 bytes from bytes 23 in paylod, because the first 32 bytes\n        // of payload stores its length. So in reality, bytes 23 - 54 is loaded. During\n        // casting to address (20 bytes), the least sigificiant bytes are retained, namely\n        // `recipientAddress` is bytes 35-54\n        assembly {\n            recipientAddress := mload(add(_payload, add(recipientAddressLength, offset)))\n        }\n\n        // move offset past the target address length\n        offset += recipientAddressLength;\n\n        // token id\n        uint8 tokenIDLength = 8;\n        uint64 tokenID;\n        assembly {\n            tokenID := shr(192, mload(add(add(_payload, 0x20), offset)))\n        }\n        offset += tokenIDLength;\n        // extract amount from payload\n        uint64 amount;\n        uint8 amountLength = 8; // uint64 = 8 bits\n\n        // Why `add(amountLength, offset)`?\n        // At this point, offset = 56, amountLength = 8. `mload(add(payload, 64))`\n        // reads the next 32 bytes from bytes 32 in paylod, because the first 32 bytes\n        // of payload stores its length. So in reality, bytes 32 - 63 is loaded. During\n        // casting to uint64 (8 bytes), the least sigificiant bytes are retained, namely\n        // `recipientAddress` is bytes 56-63\n        assembly {\n            amount := mload(add(_payload, add(amountLength, offset)))\n        }\n\n        // move offset past the amount\n        offset = offset + amountLength;\n\n        // extract tx hash from payload\n        bytes memory txHash = new bytes(_payload.length - offset - 1); // -1 for eventIdx\n        for (uint256 i; i < _payload.length - offset - 1; i++) {\n            txHash[i] = _payload[i + offset];\n        }\n\n        // move offset past the tx hash\n        offset = offset + uint8(txHash.length);\n\n        // event idx is a single byte\n        uint8 eventIdx = uint8(_payload[offset]);\n\n        return TokenTransferPayload(\n            senderAddressLength,\n            senderAddress,\n            targetChain,\n            recipientAddressLength,\n            recipientAddress,\n            tokenID,\n            amount,\n            txHash,\n            eventIdx\n        );\n    }\n\n    /// @notice Decodes a blocklist payload from bytes to a boolean and an array of addresses.\n    /// @dev The function will revert if the payload length is invalid.\n    ///     Blocklist payload is 2 + 20 * n bytes.\n    ///     byte 0       : blocklist type (0 = blocklist, 1 = unblocklist)\n    ///     byte 1       : number of addresses in the blocklist\n    ///     bytes 2-n    : addresses\n    /// @param _payload The payload to be decoded.\n    /// @return blocklisting status and the array of addresses to be blocklisted/unblocklisted.\n    function decodeBlocklistPayload(bytes memory _payload)\n        internal\n        pure\n        returns (bool, address[] memory)\n    {\n        uint8 blocklistType = uint8(_payload[0]);\n        uint8 membersLength = uint8(_payload[1]);\n        address[] memory members = new address[](membersLength);\n        uint8 offset = 2;\n        require((_payload.length - offset) % 20 == 0, \"BridgeUtils: Invalid payload length\");\n        for (uint8 i; i < membersLength; i++) {\n            // Calculate the starting index for each address\n            offset += i * 20;\n            address member;\n            // Extract each address\n            assembly {\n                member := mload(add(add(_payload, 20), offset))\n            }\n            // Store the extracted address\n            members[i] = member;\n        }\n        // blocklistType: 0 = blocklist, 1 = unblocklist\n        bool blocklisted = (blocklistType == 0);\n        return (blocklisted, members);\n    }\n\n    /// @notice Decodes an emergency operation payload from bytes to a boolean.\n    /// @dev The function will revert if the payload length is invalid.\n    ///     Emergency operation payload is a single byte.\n    ///     byte 0       : operation type (0 = freezing, 1 = unfreezing)\n    /// @param _payload The payload to be decoded.\n    /// @return The emergency operation type.\n    function decodeEmergencyOpPayload(bytes memory _payload) internal pure returns (bool) {\n        require(_payload.length == 1, \"BridgeUtils: Invalid payload length\");\n        uint8 emergencyOpCode = uint8(_payload[0]);\n        require(emergencyOpCode <= 1, \"BridgeUtils: Invalid op code\");\n        return emergencyOpCode == 0;\n    }\n\n    /// @notice Decodes an update limit payload from bytes to a chain ID and a new limit.\n    /// @dev The function will revert if the payload length is invalid.\n    ///     Update limit payload is 9 bytes.\n    ///     byte 0       : chain ID\n    ///     bytes 1-8    : new limit\n    /// @param _payload The payload to be decoded.\n    /// @return senderChainID the sending chain ID to update the limit of.\n    /// @return newLimit the new limit of the sending chain ID.\n    function decodeUpdateLimitPayload(bytes memory _payload)\n        internal\n        pure\n        returns (uint8 senderChainID, uint64 newLimit)\n    {\n        require(_payload.length == 9, \"BridgeUtils: Invalid payload length\");\n        senderChainID = uint8(_payload[0]);\n\n        // Extracts the uint64 value by loading 32 bytes starting just after the first byte.\n        // Position uint64 to the least significant bits by shifting it 192 bits to the right.\n        assembly {\n            newLimit := shr(192, mload(add(add(_payload, 0x20), 1)))\n        }\n    }\n\n    /// @notice Decodes an upgrade payload from bytes to a proxy address, an implementation address,\n    /// and call data.\n    /// @dev The function will revert if the payload length is invalid. The payload is expected to be\n    /// abi encoded.\n    /// @param _payload The payload to be decoded.\n    /// @return proxy the address of the proxy to be upgraded.\n    /// @return implementation the address of the new implementation contract.\n    /// @return callData the call data to be used in the upgrade.\n    function decodeUpgradePayload(bytes memory _payload)\n        internal\n        pure\n        returns (address, address, bytes memory)\n    {\n        (address proxy, address implementation, bytes memory callData) =\n            abi.decode(_payload, (address, address, bytes));\n        return (proxy, implementation, callData);\n    }\n\n    /// @notice Decodes an update token price payload from bytes to a token ID and a new price.\n    /// @dev The function will revert if the payload length is invalid.\n    ///     Update token price payload is 9 bytes.\n    ///     byte 0-7       : token ID\n    ///     bytes 8-15    : new price\n    /// @param _payload The payload to be decoded.\n    /// @return tokenID the token ID to update the price of.\n    /// @return tokenPrice the new price of the token.\n    function decodeUpdateTokenPricePayload(bytes memory _payload)\n        internal\n        pure\n        returns (uint64 tokenID, uint64 tokenPrice)\n    {\n        require(_payload.length == 16, \"BridgeMessage: Invalid payload length\");\n        assembly {\n            tokenID := shr(192, mload(add(add(_payload, 0x20), 0)))\n        }\n\n        // Extracts the uint64 value by loading 32 bytes starting just after the first byte.\n        // Position uint64 to the least significant bits by shifting it 192 bits to the right.\n        assembly {\n            tokenPrice := shr(192, mload(add(add(_payload, 0x20), 8)))\n        }\n    }\n\n    /// @notice Decodes an add token payload from bytes to a token ID, a token address, and a token price.\n    /// @dev The function will revert if the payload length is invalid.\n    ///     Add token payload is 5 + 2n + 20n + 8n bytes (assuming all arrays are of length n).\n    ///     byte 0           : is native\n    ///     byte 1           : number of token IDs\n    ///     byte 2 -> n      : token IDs\n    ///     byte n + 1       : number of addresses\n    ///     bytes n + 2 -> m : addresses\n    ///     byte m + 1       : number of sui decimals\n    ///     bytes m + 2 -> i : sui decimals\n    ///     byte i + 1       : number of prices\n    ///     bytes i + 2 -> j : prices (uint64)\n    /// @param _payload The payload to be decoded.\n    /// @return native whether the token is native to the chain.\n    /// @return tokenIDs the token ID to be added.\n    /// @return tokenAddresses the address of the token to be added.\n    /// @return suiDecimals the Sui decimal places of the tokens to be added.\n    /// @return tokenPrices the price of the tokens to be added.\n    function decodeAddTokensPayload(bytes memory _payload)\n        internal\n        pure\n        returns (\n            bool native,\n            uint64[] memory tokenIDs,\n            address[] memory tokenAddresses,\n            uint8[] memory suiDecimals,\n            uint64[] memory tokenPrices\n        )\n    {\n        native = _payload[0] != bytes1(0);\n\n        uint8 tokenCount = uint8(_payload[1]);\n\n        // Calculate the starting index for each token ID\n        uint8 offset = 2;\n        tokenIDs = new uint64[](tokenCount);\n        for (uint8 i; i < tokenCount; i++) {\n            uint64 tokenID;\n            assembly {\n                tokenID := shr(192, mload(add(add(_payload, 0x20), offset)))\n            }\n            offset += 8;\n\n            tokenIDs[i] = tokenID;\n        }\n\n        uint8 addressCount = uint8(_payload[offset++]);\n        tokenAddresses = new address[](addressCount);\n        for (uint8 i; i < addressCount; i++) {\n            // Calculate the starting index for each address\n            address tokenAddress;\n            // Extract each address\n            assembly {\n                tokenAddress := mload(add(add(_payload, 20), offset))\n            }\n            offset += 20;\n            // Store the extracted address\n            tokenAddresses[i] = tokenAddress;\n        }\n\n        uint8 decimalCount = uint8(_payload[offset++]);\n        suiDecimals = new uint8[](decimalCount);\n        for (uint8 i; i < decimalCount; i++) {\n            suiDecimals[i] = uint8(_payload[offset++]);\n        }\n\n        uint8 priceCount = uint8(_payload[offset++]);\n        tokenPrices = new uint64[](priceCount);\n        for (uint8 i; i < priceCount; i++) {\n            // Calculate the starting index for each price\n            uint64 tokenPrice;\n            // Extract each price\n            assembly {\n                tokenPrice := shr(192, mload(add(add(_payload, 0x20), offset)))\n            }\n            offset += 8;\n            // Store the extracted price\n            tokenPrices[i] = tokenPrice;\n        }\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.0.1/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@forge-std/=dependencies/forge-std-1.9.2/src/",
      "@openzeppelin/foundry-upgrades/=dependencies/openzeppelin-foundry-upgrades-0.3.1/src/",
      "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.0.1/",
      "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.0.1/",
      "@forge-std-1.9.2/=dependencies/forge-std-1.9.2/",
      "@openzeppelin-foundry-upgrades-0.3.1/=dependencies/openzeppelin-foundry-upgrades-0.3.1/",
      "@openzeppelin-contracts-upgradeable-5.0.1/=dependencies/@openzeppelin-contracts-upgradeable-5.0.1/",
      "@openzeppelin-contracts-5.0.1/=dependencies/@openzeppelin-contracts-5.0.1/",
      "@openzeppelin-contracts-5.0.1/=dependencies/@openzeppelin-contracts-5.0.1/",
      "@openzeppelin-contracts-upgradeable-5.0.1/=dependencies/@openzeppelin-contracts-upgradeable-5.0.1/",
      "ds-test/=dependencies/openzeppelin-foundry-upgrades-0.3.1/lib/solidity-stringutils/lib/ds-test/src/",
      "forge-std-1.9.2/=dependencies/forge-std-1.9.2/src/",
      "forge-std/=dependencies/openzeppelin-foundry-upgrades-0.3.1/lib/forge-std/src/",
      "openzeppelin-foundry-upgrades-0.3.1/=dependencies/openzeppelin-foundry-upgrades-0.3.1/src/",
      "openzeppelin-foundry-upgrades/=dependencies/openzeppelin-foundry-upgrades-0.3.1/src/",
      "solidity-stringutils/=dependencies/openzeppelin-foundry-upgrades-0.3.1/lib/solidity-stringutils/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "viaIR": false,
    "libraries": {}
  }
}}