{{
  "language": "Solidity",
  "sources": {
    "contracts/HoldingContract.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.24;\n\n/*\n *\t\tTOKEN AND LIQUIDITY HOLDER CONTRACT\n *\n *  Provides an interface for managing the contents of the contract\n *\n *  One account owns the contract for administrative purposes, one account\n *  is able to deposit and withdraw funds, and another contract is able to\n *  manage the held assets and liquidity positions.\n *\n *  This contract has three main purposes:\n *   - Hold and protect funds\n *   - Abstract complex behavior\n *   - Provide an API useful to other contracts\n *\n*/\n\n\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\n\n\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\n\t\treturn msg.data;\n\t}\n}\n\ninterface IERC20 {\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\n\tfunction decimals() external view returns (uint8);\n\n\tfunction allowance(\n\t\taddress owner,\n\t\taddress spender\n\t) external view returns (uint256);\n\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nabstract contract WETH9 {\n\tfunction deposit() public virtual payable;\n\tfunction withdraw(uint wad) public virtual;\n}\n\ninterface IPermit2 {\n\tfunction approve(address token, address spender, uint160 amount, uint48 expiration) external;\n}\n\nabstract contract Ownable is Context {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(\n\t\taddress indexed previousOwner,\n\t\taddress indexed newOwner\n\t);\n\n\tconstructor() {\n\t\t_transferOwnership(_msgSender());\n\t}\n\n\tmodifier onlyOwner() {\n\t\t_checkOwner();\n\t\t_;\n\t}\n\n\tfunction owner() public view virtual returns (address) {\n\t\treturn _owner;\n\t}\n\n\tfunction _checkOwner() internal view virtual {\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n\t}\n\n\tfunction renounceOwnership() public virtual onlyOwner {\n\t\t_transferOwnership(address(0));\n\t}\n\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\t_transferOwnership(newOwner);\n\t}\n\n\tfunction _transferOwnership(address newOwner) internal virtual {\n\t\taddress oldOwner = _owner;\n\t\t_owner = newOwner;\n\t\temit OwnershipTransferred(oldOwner, newOwner);\n\t}\n}\n\nabstract contract IHoldingContractUtils {\n\n\tmapping(address => address) public uniswapV3USDCPoolByToken;\n\tmapping(address => address) public uniswapV3ETHPoolByToken;\n\n\t// RANDOM LARGE/EXPENSIVE FUNCTIONS\n\n\t// Computes how much liquidity to add or remove, given a number of wanted tokens.  Note that it simply aims to get the total token value\n\t// in this contract to match the total value of newBaseBal and newQuoteBal, but does not attempt to swap to make the balances match the ratio.\n\tfunction liquidityDiffHelper(uint256 positionId, address base, address quote, uint256 baseBal, uint256 quoteBal, uint256 newBaseBal, uint256 newQuoteBal) external virtual view returns (int128 liquidityDiff, uint256 baseTmp, uint256 quoteTmp);\n\tfunction v4PositionInfoHelper(uint256 positionId, address base, address quote) public virtual view returns (uint128 liquidity, uint256 quotePos, uint256 basePos);\n\n\t/// @notice Estimates the amount of input tokens needed and the minimum expected output for a swap.\n\t/// @dev Supports ETH via address(0) aliasing. Accounts for Uniswap V3 pool fees and slippage tolerance.\n\t///\t  Reverts if no valid pool is found for the given token pair.\n\t/// @param from The address of the input token (use address(0) for ETH).\n\t/// @param to The address of the output token (use address(0) for ETH).\n\t/// @param maxIn The maximum amount of input tokens the caller is willing to provide.\n\t/// @param maxOut The desired amount of output tokens (can be set to max(uint160) to indicate no specific target).\n\t/// @param slippageE6 The slippage tolerance in parts per million (1e6 = 100%, 1e4 = 1%).\n\t/// @return pool The selected Uniswap V3 pool used for the swap.\n\t/// @return amountIn The estimated amount of input tokens required for the desired output, adjusted for fees.\n\t/// @return outMinimum The minimum acceptable output after applying slippage tolerance.\n\tfunction preSwapHelper(address from, address to, uint256 maxIn, uint256 maxOut, uint24 slippageE6) external virtual view returns (IUniswapV3Pool pool, uint256 amountIn, uint256 outMinimum);\n\n\t// PRICE DATA\n\n\tfunction getTwapPriceP12(int8 decimalDiff, address base, address quote, uint32 duration) public virtual view returns (uint80 price12);\n\tfunction getTwapPricePX96(address poolAddress, address base, address quote, uint32 duration) public virtual view returns (uint256 priceX96);\n\tfunction safeGetPriceUSDC12Of(address token) public virtual view returns (uint80 price12);\n\tfunction safeGetPrice12Of(address base, address quote) public virtual view returns (uint80 price12);\n\tfunction value12OfTokensAgainst(address token, address quote, uint256 quantity) external virtual view returns (uint128 value12);\n\n\t// POOLS\n\n\tfunction getPreferredPoolFor(address a, address b) public virtual view returns (address pool);\n\n\t// Primary should either be USDC or address(0), indicating Eth.  This will save the contract address\n\t// for the pool this contract can use later. \n\tfunction findV3PoolFor(address base, address quote, uint128 minValueUSDC12) public virtual returns (address bestPool);\n\n\t// MATH FUNCTIONS\n\tfunction getAmountsForLiquidity(uint160 sqrtRatioX96, uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) public virtual pure returns (uint256 amount0, uint256 amount1);\n}\n\n\nabstract contract IAssetHolder {\n\n\tfunction getTotalValueUsd12() public virtual view returns (uint128 valueUsd12);\n\tfunction getTotalValueEth12() public virtual view returns (uint128 valueEth12);\n\tfunction getUsd12ValueIn(address token) public virtual view returns (uint128 valueUsd12);\n\n}\n\n\nabstract contract IManagedV3AssetHolder is IAssetHolder {\n\n\t// ADMINISTRATION\n\n\tfunction getController() external virtual view returns (address _controller);\n\tfunction setController(address newController) external virtual;\n\n\t// Destroys and liquidates the current liquidity position, if it exists.  Does not convert tokens.\n\tfunction destroyPosition(uint256 positionId) external virtual;\n\n\t// Takes all tokens out of the position without destroying it\n\tfunction closeLiquidity(uint256 positionId) public virtual;\n\n\t// Creates a new liquidity position with the given parameters.\n\tfunction createV3Position(IUniswapV3Pool pool, address base, address quote, uint80 lowPrice12, uint80 highPrice12, uint256 toAdd) external virtual returns (uint256 tokenId, uint8 idx);\n\n\t// Puts all available base and quote into the given position\n\tfunction fillLiquidity(uint256 positionId) external virtual;\n\n\tfunction collectFees(uint256 tokenId) public virtual;\n\n\t// Swaps tokens\n\tfunction swapTokensInto(address tokenFrom, address tokenTo, uint256 maxIn, uint256 maxOut) external virtual returns (uint256 tokensIn, uint256 tokensOut);\n\n\t// Expected gas usage: 160000 - 550000\n\tfunction obtainTokens(address token0, address token1, uint256 amount0, uint256 amount1) public virtual;\n\n\t// Other functions\n\n\t// Swaps everything into the given token immediately, sets this token as the system token (unless it is USDC or ETH).\n\t// This function also sets the system controller to address 0 to prevent automation from restarting without human input.\n\t// storeOfValueToken must be a reputable token like USDC, USDT, ETH (represented with address 0), WBTC, DAI, LINK, or UNI.\n\t// This function will try to use updated price data to prevent front running if possible, but if the updated data is not\n\t// available, it will complete anyway at whatever price it can get.  This function should only be used in emergencies for\n\t// this very reason (emergencies like USDC depegging, a criticl contract vulterability being discovered, etc).\n\t// If possible, updatePriceData() should be called first.\n\t// This function can be executed by the owner or the controller.\n\t// Suggested emergency tokens:\n\t// 0xdAC17F958D2ee523a2206206994597C13D831ec7 -> USDT (WARNING: For some reason this doesn't play nice with our contract, not sure why)\n\t// 0x514910771AF9Ca656af840dff83E8264EcF986CA -> LINK\n\t// 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 -> WBTC\n\t// 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984 -> UNI\n\t// 0x6B175474E89094C44Da98b954EedeAC495271d0F -> DAI\n\tfunction emergencyCircuitBreaker(address storeOfValueToken) external virtual;\n\n\t// EVENTS\n\n\tevent ControllerSet(address newController, address oldController);\n\tevent EmergencyCircuitBreakerFlipped(address storeOfValueToken);\n\tevent TokensSwapped(address from, address to, uint256 fromAmt, uint256 toAmt);\n\tevent PositionMinted(uint256 poolPosition, address base, address quote, uint80 minPrice, uint80 maxPrice, uint256 toAdd);\n\tevent PositionBurned(uint256 poolPosition, address base, address quote, uint256 baseTaken, uint256 quoteTaken);\n\tevent LiquidityFeesCollected(uint256 poolPosition, address base, address quote, uint256 baseTaken, uint256 quoteTaken);\n\tevent LiquidityModified(uint256 poolPosition, address base, address quote, int128 liquidityChange);\n}\n\n\nabstract contract IDepositable is IAssetHolder {\n\n\t// ADMINISTRATION\n\n\tfunction getFunder() external virtual view returns (address _funder);\n\tfunction setFunder(address newFunder) external virtual;\n\n\t// DEPOSITS\n\n\tfunction depositToken(address token, uint256 amount) external virtual;\n\tfunction depositEth() external virtual payable;\n\n\t// WITHDRAWS\n\n\tfunction withdrawEth(address destination, uint256 amount) external virtual;\n\tfunction withdrawToken(address token, address destination, uint256 amount) external virtual;\n\n\t// EVENTS\n\n\tevent FunderSet(address newController, address oldController);\n\tevent Deposited(address token, uint256 amount);\n\tevent Withdrawn(address token, uint256 amount);\n}\n\n\ncontract UniswapV3HoldingContract is IDepositable, IManagedV3AssetHolder, Ownable {\n\n\taddress internal immutable USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\taddress internal immutable WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\taddress internal immutable WETH_USDC_POOL = 0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640;\n\n\t// These are the tokens we can swap to in an emergency\n\t// This prevents a bad actor or some contract error from swapping\n\t// into a honeypot, should they ever gain unauthorized access\n\tmapping(address => bool) public validEmergencyTokens;\n\n\t// The controller is a changeable smart contract address which\n\t// handles the automation.  This allows us to change the logic\n\t// of this system without creating a new WolfAMM contract.\n\t// The owner is an account which can update and manage the system\n\t// to keep things running smoothly, intervene in emergencies, or\n\t// upgrade the system to improve performance.\n\t// The funder is the account (usually a contract) which is allowed\n\t// to add or remove funds.\n\t// The controller  or funder may be set to an actual account for\n\t// diagnostic or debugging purposes.\n\t// This separation of permissions should help prevent attacks and\n\t// reduce attack surface somewhat for this rather large web of\n\t// contracts.\n\taddress public controller;\n\taddress public funder;\n\n\t// NOTE:  This only works for Ethereum Mainnet!!\n\tINonfungiblePositionManager public immutable manager = INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\n\tISwapRouter public constant swapRouter = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n\tIUniswapV3Factory public constant factory = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\n\tIHoldingContractUtils public utils;\n\n\tstruct Position {\n\t\tIUniswapV3Pool pool;\n\t\tuint256 lastFeeX128;\n\t\tuint256 tokenId;\n\t\taddress base;\n\t\taddress quote;\n\t}\n\n\tmapping(address => uint16) public numLiquidityPositionsByToken;\n\taddress[8] public tokensHeld;\n\tuint8 public nTokensHeld = 0;\n\tmapping(address => uint8) public indexFromTokenAddress;\n\tPosition[8] public positions;\n\tuint8 public nLiquidityPositions = 0;\n\tmapping(uint256 => uint8) public indexFromPositionId;\n\tmapping(address => bool) public isTokenApprovedForSwap;\n\n\tconstructor(address utilsAdr) {\n\n\t\t// These are always good options\n\t\t// Null address represents raw eth\n\t\tvalidEmergencyTokens[USDC] = true;\n\t\tvalidEmergencyTokens[WETH] = true;\n\t\tvalidEmergencyTokens[0x0000000000000000000000000000000000000000] = true;\n\n\t\tIERC20(WETH).approve(address(swapRouter), type(uint256).max);\n\t\tIERC20(WETH).approve(address(manager), type(uint256).max);\n\t\tIERC20(USDC).approve(address(swapRouter), type(uint256).max);\n\t\tIERC20(USDC).approve(address(manager), type(uint256).max);\n\n\t\tsetController(msg.sender);\n\t\tsetFunder(msg.sender);\n\t\tsetUtils(utilsAdr);\n\t}\n\n\n\tfunction getTotalValueEth12() public override view returns (uint128 valueEth12) {\n\t\tvalueEth12 = uint128(address(this).balance / 1e6);\n\t\tvalueEth12 += uint128(contractBalance(WETH) / 1e6);\n\t\tuint256 usdcBalance = contractBalance(USDC);\n\t\tif (usdcBalance > 50000)\n\t\t\tvalueEth12 += utils.value12OfTokensAgainst(USDC, WETH, usdcBalance);\n\n\t\tunchecked {\n\t\t\tfor (uint8 i = 0; i < nTokensHeld; i++)\n\t\t\t\tvalueEth12 += utils.value12OfTokensAgainst(tokensHeld[i], WETH, IERC20(tokensHeld[i]).balanceOf(address(this)));\n\t\t\tfor (uint8 i = 0; i < nLiquidityPositions; i++) {\n\t\t\t\t(,, address token0, address token1,, int24 tickLower, int24 tickUpper, uint128 liquidity,,,,) = manager.positions(positions[i].tokenId);\n\t\t\t\t(uint160 sqrtPriceX96,,,,,,) = positions[i].pool.slot0();\n\t\t\t\t(uint256 amount0, uint256 amount1) = utils.getAmountsForLiquidity(\n\t\t\t\t\tsqrtPriceX96,\n\t\t\t\t\tTickMath.getSqrtRatioAtTick(tickLower),\n\t\t\t\t\tTickMath.getSqrtRatioAtTick(tickUpper),\n\t\t\t\t\tliquidity\n\t\t\t\t);\n\n\t\t\t\tvalueEth12 += utils.value12OfTokensAgainst(token0, WETH, amount0);\n\t\t\t\tvalueEth12 += utils.value12OfTokensAgainst(token1, WETH, amount1);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getTotalValueUsd12() public override view returns (uint128 valueUsd12) {\n\t\treturn uint128((getTotalValueEth12() * utils.safeGetPriceUSDC12Of(WETH)) / 1e12);\n\t}\n\n\tfunction contractBalance(address token) public view returns (uint256 balance) {\n\t\treturn token == address(0) ? address(this).balance : IERC20(token).balanceOf(address(this));\n\t}\n\n\tfunction getUsd12ValueIn(address token) public override view returns (uint128 valueUsd12) {\n\t\tuint256 totalBalance = contractBalance(token);\n\t\treturn utils.value12OfTokensAgainst(token, USDC, totalBalance);\n\t}\n\n\t// DEPOSITS\n\n\tfunction depositToken(address token, uint256 amount) external override {\n\t\trequire(msg.sender == funder, \"Unauthorized\");\n\t\trequire(IERC20(token).transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\n\n\t\t// Track what tokens we own\n\t\tonReceiveToken(token);\n\n\t\temit Deposited(token, amount);\n\t}\n\n\tfunction depositEth() external override payable {\n\t\t// Sure we'll take free ethereum, lol\n\t\t//require(msg.sender == funder, \"Unauthorized\");\n\n\t\temit Deposited(address(0), msg.value);\n\t}\n\n\tfallback() external payable {\n\t\t// This simply allows WETH to send raw ETH to this contract\n\t\t// Back in my day, there was no receive, and fallback functions were different I think.\n\t\t// Weird seeing the new syntax, but I think this is an improvement.\n\t}\n\n\treceive () external payable {\n\t\t// This simply allows WETH to send raw ETH to this contract\n\t}\n\n\t// WITHDRAWS\n\n\tfunction withdrawEth(address destination, uint256 amount) external override {\n\t\trequire(msg.sender == funder, \"Unauthorized\");\n\t\tpayable(destination).transfer(amount);\n\n\t\temit Withdrawn(address(0), amount);\n\t}\n\n\tfunction withdrawToken(address token, address destination, uint256 amount) external override {\n\t\trequire(msg.sender == funder, \"Unauthorized\");\n\t\trequire(IERC20(token).transfer(destination, amount), \"Transfer failed\");\n\n\t\t// Track what tokens we own\n\t\tonSendToken(token);\n\n\t\temit Withdrawn(token, amount);\n\t}\n\n\tfunction withdrawLiquidity(uint256 tokenId) external {\n\t\trequire(msg.sender == funder, \"Unauthorized\");\n\n\t\tmanager.safeTransferFrom(address(this), msg.sender, tokenId);\n\n\t\tuint8 index = indexFromPositionId[tokenId];\n\t\tPosition storage position = positions[index];\n\t\tif (index < nLiquidityPositions && position.tokenId == tokenId) {\n\t\t\tnumLiquidityPositionsByToken[position.base]--;\n\t\t\tnumLiquidityPositionsByToken[position.quote]--;\n\t\t\tnLiquidityPositions--;\n\t\t\tif (nLiquidityPositions > 0) {\n\t\t\t\tpositions[index] = positions[nLiquidityPositions];\n\t\t\t\tindexFromPositionId[positions[index].tokenId] = index;\n\t\t\t}\n\t\t}\n\t}\n\n\t// For getting out tokens which were sent on accident (ie, not through depositToken)\n\tfunction rescueTokens(address token) external onlyOwner {\n\n\t\t// First make sure the owner isn't stealing something that was deposited\n\t\tuint8 index = indexFromTokenAddress[token];\n\t\trequire(index >= nTokensHeld || tokensHeld[index] != token, \"Cannot 'rescue' deposits\");\n\n\t\tIERC20(token).transfer(owner(), contractBalance(token));\n\t}\n\n\tfunction onReceiveToken(address token) internal {\n\n\t\tif (token != address(0) && !isTokenApprovedForSwap[token]) {\n\t\t\tIERC20(token).approve(address(swapRouter), type(uint256).max);\n\t\t\tIERC20(token).approve(address(manager), type(uint256).max);\n\t\t\tisTokenApprovedForSwap[token] = true;\n\t\t}\n\n\t\tif (token != address(0) && token != USDC) {\n\t\t\tif (tokensHeld[indexFromTokenAddress[token]] != token || indexFromTokenAddress[token] >= nTokensHeld) {\n\t\t\t\trequire(nTokensHeld < tokensHeld.length, \"Out of memory\");\n\n\t\t\t\t// Refresh pool data if the token is being received again after not being held\n\t\t\t\tuint128 minValueUSDC12 = getTotalValueUsd12();\n\n\t\t\t\tif (token != USDC) {\n\t\t\t\t\ttry utils.findV3PoolFor(token, USDC, minValueUSDC12) {}\n\t\t\t\t\tcatch (bytes memory) {}\n\t\t\t\t}\n\t\t\t\tif (token != WETH) utils.findV3PoolFor(token, WETH, minValueUSDC12);\n\n\t\t\t\ttokensHeld[nTokensHeld] = token;\n\t\t\t\tindexFromTokenAddress[token] = nTokensHeld;\n\t\t\t\tnTokensHeld++;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction onSendToken(address token) internal {\n\t\tif (token == USDC || token == address(0))\n\t\t\treturn;\n\n\t\tuint8 index = indexFromTokenAddress[token];\n\t\tif (index < nTokensHeld && tokensHeld[index] == token && contractBalance(token) < 100 && numLiquidityPositionsByToken[token] == 0) {\n\t\t\tnTokensHeld--;\n\t\t\tif (nTokensHeld > 0 && index != nTokensHeld) {\n\t\t\t\ttokensHeld[index] = tokensHeld[nTokensHeld];\n\t\t\t\tindexFromTokenAddress[tokensHeld[index]] = index;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// Other functions\n\n\t// Swaps everything into the given token immediately\n\t// This function also sets the system controller to address 0 to prevent automation from restarting without human input.\n\t// storeOfValueToken must be a reputable token like USDC, USDT, ETH (represented with address 0), WBTC, DAI, LINK, or UNI.\n\t// Emergency tokens can be added until the emergency token list is locked.\n\tfunction emergencyCircuitBreaker(address storeOfValueToken) external override {\n\t\trequire(msg.sender == controller || msg.sender == owner(), \"Access denied\");\n\t\trequire(validEmergencyTokens[storeOfValueToken], \"Invalid token\");\n\n\t\tunchecked {\n\t\t\tfor (uint8 i = nLiquidityPositions; i > 0;)\n\t\t\t\tthis.destroyPosition(--i);\n\t\t\tfor (uint8 i = nTokensHeld; i > 0;) {\n\t\t\t\t_circuitBreakerHelper(tokensHeld[--i], WETH);\n\t\t\t}\n\t\t}\n\n\t\t_circuitBreakerHelper(WETH, storeOfValueToken);\n\t\t_circuitBreakerHelper(USDC, storeOfValueToken);\n\t\t_circuitBreakerHelper(address(0), storeOfValueToken);\n\n\t\tcontroller = address(0);\n\n\t\temit EmergencyCircuitBreakerFlipped(storeOfValueToken);\n\t}\n\n\tfunction _circuitBreakerHelper(address from, address to) internal {\n\t\tuint256 bal = contractBalance(from);\n\n\t\tif (from != to) {\n\t\t\t// Check what it's worth in dollars; if it's $5 or more then convert it, otherwise ignore\n\t\t\t// I do this because sometimes our position in a token will be very small, and the token\n\t\t\t// may have few decimal places, causing mathematical errors that result in a revert.\n\t\t\t// $5 isn't enough for us to care about really, a revert could cost us thousands in this\n\t\t\t// scenario.\n\t\t\t// This is also why we have a try block - should anything go wrong, we don't want to have a revert.\n\t\t\t//try {\n\t\t\t//\tif (getUsd12ValueIn(from) < 5e12)\n\t\t\t//\t\treturn;\n\t\t\t\t// Here we allow a much higher slippage of 7.5% because this is an emergency case.\n\t\t\t\t// We really, really want this transaction to go through.\n\t\t\t//\t;\n\t\t\t//}\n\n\t\t\ttry this.swapTokens(from, to, bal, type(uint256).max, 75_000) {}\n\t\t\tcatch (bytes memory) {}\n\t\t}\n\n\t}\n\n\tbool emergencyTokensLocked = false;\n\tfunction addEmergencyTokens(address[] calldata tokens) external onlyOwner {\n\t\trequire(!emergencyTokensLocked, \"locked\");\n\n\t\tuint128 minValueUSDC12;\n\t\tunchecked {\n\t\t\t// Make sure we can safely sell 10k or more of tokens to the given pool\n\t\t\t// It is likely that when this function is called, the contract balance\n\t\t\t// will be zero, so this corrects for that.\n\t\t\t// Is 30k realistic?  No idea, but in practice I highly doubt this will\n\t\t\t// become a problem.\n\t\t\tminValueUSDC12 = getTotalValueUsd12() * 8 + 10000e12;\n\t\t}\n\t\tfor (uint8 i = 0; i < tokens.length;) {\n\t\t\taddress token = tokens[i];\n\t\t\tvalidEmergencyTokens[token] = true;\n\n\t\t\tutils.findV3PoolFor(token, WETH, minValueUSDC12);\n\t\t\tutils.findV3PoolFor(token, USDC, 0);\n\n\t\t\tunchecked { i++; }\n\t\t}\n\t}\n\n\tfunction lockEmergencyTokens() external onlyOwner {\n\t\temergencyTokensLocked = true;\n\t}\n\n\tfunction collectFees(uint256 tokenId) public override {\n\t\t// We don't check because the operation is harmless, save the gas\n\t\t//require(msg.sender == controller, \"You do not have permission\");\n\n\t\tuint8 index = indexFromPositionId[tokenId];\n\n\t\tINonfungiblePositionManager.CollectParams memory params =\n\t\t\tINonfungiblePositionManager.CollectParams({\n\t\t\t\ttokenId: tokenId,\n\t\t\t\trecipient: address(this),\n\t\t\t\tamount0Max: type(uint128).max,\n\t\t\t\tamount1Max: type(uint128).max\n\t\t\t});\n\n\t\t(uint256 baseTaken, uint256 quoteTaken) = manager.collect(params);\n\n\t\tPosition storage position = positions[index];\n\t\tIUniswapV3Pool pool = position.pool;\n\t\tuint256 feeGrowth = position.base < position.quote ? pool.feeGrowthGlobal0X128() : pool.feeGrowthGlobal1X128();\n\t\tposition.lastFeeX128 = feeGrowth;\n\n\t\tif (position.base > position.quote)\n\t\t\t(baseTaken, quoteTaken) = (quoteTaken, baseTaken);\n\n\t\temit LiquidityFeesCollected(tokenId, position.base, position.quote, baseTaken, quoteTaken);\n\t}\n\n\t// Takes basically all available tokens of base and quote and puts them into the liquidity position\n\tfunction fillLiquidity(uint256 positionId) external override {\n\t\trequire(msg.sender == controller, \"Unauthorized\");\n\n\t\tcollectFees(positionId);\n\n\t\t// Get details about the tokens\n\t\tuint8 index = indexFromPositionId[positionId];\n\t\tPosition storage position = positions[index];\n\n\t\t(,, address token0, address token1,, int24 tickLower, int24 tickUpper, uint128 liquidityPrev,,,,) = manager.positions(positionId);\n\t\t(uint160 sqrtRatioX96,,,,,,) = position.pool.slot0();\n\n\t\tuint256 toAdd = contractBalance(token0);\n\t\ttoAdd += mulDiv(contractBalance(token1), 1 << 192, uint256(sqrtRatioX96) * uint256(sqrtRatioX96));\n\t\tuint128 liquidity = getLiquidityForAmount0(TickMath.getSqrtRatioAtTick(tickLower), TickMath.getSqrtRatioAtTick(tickUpper), toAdd);\n\n\t\t// Calculate amounts of each token\n\t\t(uint256 amount0, uint256 amount1) = utils.getAmountsForLiquidity(\n\t\t\tsqrtRatioX96,\n\t\t\tTickMath.getSqrtRatioAtTick(tickLower),\n\t\t\tTickMath.getSqrtRatioAtTick(tickUpper),\n\t\t\tuint128((uint256(liquidity) * 98) / 100)\n\t\t);\n\n\t\tobtainTokens(token0, token1, amount0, amount1);\n\n\t\tINonfungiblePositionManager.IncreaseLiquidityParams memory params =\n\t\tINonfungiblePositionManager.IncreaseLiquidityParams({\n\t\t\ttokenId: positionId,\n\t\t\tamount0Desired: contractBalance(token0),\n\t\t\tamount1Desired: contractBalance(token1),\n\t\t\tamount0Min: 0,\n\t\t\tamount1Min: 0,\n\t\t\tdeadline: block.timestamp\n\t\t});\n\n\t\tuint128 liquidityNew;\n\t\t(liquidityNew, amount0, amount1) = manager.increaseLiquidity(params);\n\n\t\temit LiquidityModified(positionId, position.base, position.quote, int128(liquidityNew - liquidityPrev));\n\t}\n\n\tfunction closeLiquidity(uint256 tokenId) public override {\n\t\t(,,,,,,, uint128 liquidity,,,,) = manager.positions(tokenId);\n\t\tuint8 index = indexFromPositionId[tokenId];\n\t\tPosition storage position = positions[index];\n\n\t\tif (liquidity > 0) {\n\t\t\t// amount0Min and amount1Min are price slippage checks\n\t\t\t// if the amount received after burning is not greater than these minimums, transaction will fail\n\t\t\tINonfungiblePositionManager.DecreaseLiquidityParams memory params =\n\t\t\t\tINonfungiblePositionManager.DecreaseLiquidityParams({\n\t\t\t\t\ttokenId: tokenId,\n\t\t\t\t\tliquidity: liquidity,\n\t\t\t\t\tamount0Min: 0,\n\t\t\t\t\tamount1Min: 0,\n\t\t\t\t\tdeadline: block.timestamp\n\t\t\t\t});\n\n\t\t\tmanager.decreaseLiquidity(params);\n\n\t\t\temit LiquidityModified(tokenId, position.base, position.quote, -int128(liquidity));\n\n\t\t\t// This is required for us to actually get the tokens out of the position\n\t\t\tcollectFees(tokenId);\n\t\t}\n\t}\n\n\t// Destroys and liquidates the current liquidity position, if it exists.  Does not convert tokens.\n\tfunction destroyPosition(uint256 tokenId) external override {\n\t\trequire(msg.sender == controller, \"Unauthorized\");\n\n\t\tuint8 index = indexFromPositionId[tokenId];\n\t\tPosition storage position = positions[index];\n\n\t\taddress base = position.base;\n\t\taddress quote = position.quote;\n\t\tuint256 baseBal = contractBalance(base);\n\t\tuint256 quoteBal = contractBalance(quote);\n\t\tcloseLiquidity(tokenId);\n\t\tcollectFees(tokenId);\n\t\tmanager.burn(tokenId);\n\n\t\tuint256 baseTaken = (contractBalance(base)) - baseBal;\n\t\tuint256 quoteTaken = (contractBalance(quote))- quoteBal;\n\n\t\tnumLiquidityPositionsByToken[base]--;\n\t\tnumLiquidityPositionsByToken[quote]--;\n\t\tnLiquidityPositions--;\n\t\tif (nLiquidityPositions > 0) {\n\t\t\tpositions[index] = positions[nLiquidityPositions];\n\t\t\tindexFromPositionId[positions[index].tokenId] = index;\n\t\t}\n\n\t\t// We need to call this because of the possible situation where we sent all\n\t\t// of one token to the liquidity position, but received only the other token\n\t\t// back.\n\t\tif (baseTaken < 1000) onSendToken(base);\n\t\tif (quoteTaken < 1000) onSendToken(quote);\n\n\t\temit PositionBurned(tokenId, base, quote, baseTaken, quoteTaken);\n\t}\n\n\t// Creates a new liquidity position with the given parameters, and returns the position ID.\n\t// This function will automatically swap tokens to fill the position if needed, first between quote and base,\n\t// then from available WETH, USDC, or ETH reserves.  If these are not available, the function will revert.\n\t// Prices are specified in quote per 1e12 base, where base is the other token traded on the pool.\n\t// toAdd is in quote units.\n\tfunction createV3Position(IUniswapV3Pool pool, address base, address quote, uint80 lowPrice12, uint80 highPrice12, uint256 toAdd) external override returns (uint256 tokenId, uint8 idx) {\n\t\trequire(msg.sender == controller, \"Unauthorized\");\n\t\trequire(nLiquidityPositions < positions.length, \"Out of memory\");\n\t\trequire(base != quote, \"Same token\");\n\n\t\t// Get info on the tokens\n\t\tint8 decimalDiff = int8(IERC20(base).decimals()) - int8(IERC20(quote).decimals());\n\n\t\t// Convert prices\n\t\t// Note that these are in the pool's native ordering, not necessarily ours.\n\t\tuint160 sqrtRatioAX96 = correctPriceDirection(base, quote, getSqrtPriceX96FromPrice(decimalDiff, lowPrice12));\n\t\tuint160 sqrtRatioBX96 = correctPriceDirection(base, quote, getSqrtPriceX96FromPrice(decimalDiff, highPrice12));\n\t\t(uint160 sqrtRatioX96,,,,,,) = pool.slot0();\n\t\tif (sqrtRatioAX96 > sqrtRatioBX96)\n\t\t\t(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n\t\t// Get other random data about the pool\n\t\tuint128 liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, toAdd);\n\n\t\tuint256 feeGrowth;\n\t\t(tokenId, feeGrowth) = _mintV3Raw(pool, base, quote, sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, liquidity);\n\n\t\tnumLiquidityPositionsByToken[base]++;\n\t\tnumLiquidityPositionsByToken[quote]++;\n\t\tpositions[nLiquidityPositions] = Position(pool, feeGrowth, tokenId, base, quote);\n\t\tindexFromPositionId[tokenId] = nLiquidityPositions;\n\t\tidx = nLiquidityPositions;\n\t\tnLiquidityPositions++;\n\n\t\t// Not called because it won't do anything here\n\t\t// onSendToken(base);\n\t\t// onSendToken(quote);\n\n\t\temit PositionMinted(tokenId, base, quote, lowPrice12, highPrice12, toAdd);\n\t}\n\n\tfunction _mintV3Raw(IUniswapV3Pool pool, address base, address quote, uint160 sqrtRatioX96, uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal returns (uint256 tokenId, uint256 feeGrowth) {\n\t\t// Much wow, such solidity!\n\t\t// Boy do we love stack limitations!!!\n\t\tuint72 tickVals = uint72(uint24(pool.tickSpacing()));\n\t\tunchecked {\n\t\t\ttickVals |= uint72(uint24((TickMath.getTickAtSqrtRatio(sqrtRatioAX96) / int24(uint24(tickVals))) * int24(uint24(tickVals)))) << 24;\n\t\t\ttickVals |= uint72(uint24((TickMath.getTickAtSqrtRatio(sqrtRatioBX96) / int24(uint24(tickVals))) * int24(uint24(tickVals)))) << 48;\n\t\t}\n\n\t\ttokenId = _odeToSolidity(base, quote, sqrtRatioX96, liquidity, tickVals, pool.fee());\n\n\t\tfeeGrowth = address(base) < quote ? pool.feeGrowthGlobal0X128() : pool.feeGrowthGlobal1X128();\n\t}\n\n\tfunction _odeToSolidity(address base, address quote, uint160 sqrtRatioX96, uint128 liquidity, uint72 tickVals, uint24 fee) internal returns (uint256 tokenId) {\n\n\t\taddress token0 = base > quote ? quote : base;\n\t\taddress token1 = base > quote ? base : quote;\n\n\t\t// Calculate amounts of each token\n\t\t(uint256 amount0, uint256 amount1) = utils.getAmountsForLiquidity(\n\t\t\tsqrtRatioX96,\n\t\t\tTickMath.getSqrtRatioAtTick(int24(uint24(tickVals >> 24))),\n\t\t\tTickMath.getSqrtRatioAtTick(int24(uint24(tickVals >> 48))),\n\t\t\tliquidity\n\t\t);\n\n\t\tobtainTokens(token0, token1, amount0, amount1);\n\n\t\tINonfungiblePositionManager.MintParams memory params =\n\t\t\tINonfungiblePositionManager.MintParams({\n\t\t\t\ttoken0: token0,\n\t\t\t\ttoken1: token1,\n\t\t\t\tfee: fee,\n\t\t\t\ttickLower: int24(uint24(tickVals >> 24)),\n\t\t\t\ttickUpper: int24(uint24(tickVals >> 48)),\n\t\t\t\tamount0Desired: amount0,\n\t\t\t\tamount1Desired: amount1,\n\t\t\t\tamount0Min: 0,\n\t\t\t\tamount1Min: 0,\n\t\t\t\trecipient: address(this),\n\t\t\t\tdeadline: block.timestamp\n\t\t\t});\n\n\t\t(tokenId,,,) = manager.mint(params);\n\t}\n\n\tfunction onERC721Received(address, address, uint256, bytes calldata) external returns (bytes4) {\n\t\treturn this.onERC721Received.selector;\n\t}\n\n\t// Swaps tokens\n\tfunction swapTokensInto(address tokenFrom, address tokenTo, uint256 maxIn, uint256 maxOut) external override returns (uint256 tokensIn, uint256 tokensOut) {\n\t\t// We don't check permissions because the swap function does that for us\n\n\t\t// Maximum 1.5% slippage\n\t\treturn swapTokens(tokenFrom, tokenTo, maxIn, maxOut, 15_000);\n\t}\n\n\t// Swaps between token0 and token1 if necessery to have amount0 and amount1 available tokens of each.\n\t// If there are not enough of the tokens to do this, the function draws from ETH, WETH, or USDC reserves.\n\t// If this still is not enough, then the function reverts.\n\t// Only the controller may call this function, although this function may also be called internally.\n\tfunction obtainTokens(address token0, address token1, uint256 amount0, uint256 amount1) public override {\n\t\t// We don't check permissions because the swap function does that for us\n\n\t\tuint256 bal0 = contractBalance(token0);\n\t\tuint256 bal1 = contractBalance(token1);\n\n\t\t// If we already have enough, just return\n\t\tif (bal0 >= amount0 && bal1 >= amount1) return;\n\n\t\tuint256 excess;\n\t\tuint256 needed0;\n\t\tuint256 needed1;\n\t\tunchecked {\n\t\t\tneeded0 = amount0 < bal0 ? 0 : amount0 - bal0;\n\t\t\tneeded1 = amount1 < bal1 ? 0 : amount1 - bal1;\n\t\t}\n\n\t\t// Try to swap between token0 and token1 to meet the needs\n\t\tif (bal0 < amount0 && bal1 > amount1) {unchecked {\n\t\t\texcess = bal1 - amount1;\n\n\t\t\t// Will get at most needed0 tokens out, and spend at most excess1 tokens.\n\t\t\t(, uint256 tokensOut) = swapTokens(token1, token0, excess, (needed0 * 1015_000) / 1e6, 15_000);\n\t\t\tneeded0 = needed0 <= tokensOut ? 0 : needed0 - tokensOut;\n\t\t}} else if (bal1 < amount1 && bal0 > amount0) {unchecked {\n\t\t\texcess = bal0 - amount0;\n\n\t\t\t// Will get at most needed1 tokens out, and spend at most excess0 tokens.\n\t\t\t(, uint256 tokensOut) = swapTokens(token0, token1, excess, (needed1 * 1015_000) / 1e6, 15_000);\n\t\t\tneeded1 = needed1 <= tokensOut ? 0 : needed1 - tokensOut;\n\t\t}}\n\n\t\t// Check again: if we still need tokens, draw from reserves\n\t\t(needed0, needed1) = _obtainTokensHelper(token0, token1, WETH, needed0, needed1);\n\t\t(needed0, needed1) = _obtainTokensHelper(token0, token1, address(0x0), needed0, needed1);\n\t\t(needed0, needed1) = _obtainTokensHelper(token0, token1, USDC, needed0, needed1);\n\n\t\trequire(needed0 == 0 && needed1 == 0, \"Underfunded\");\n\t}\n\n\tfunction _obtainTokensHelper(address token0, address token1, address quote, uint256 needed0, uint256 needed1) internal returns (uint256 newNeeded0, uint256 newNeeded1) {\n\t\tif (token0 != quote && token1 != quote) {\n\t\t\tuint256 balance = contractBalance(quote);\n\t\t\tif (balance >= 1e6 && needed0 > 0) {\n\t\t\t\t(uint256 tokensIn, uint256 tokensOut) = swapTokens(quote, token0, balance, (needed0 * 1015_000) / 1e6, 15_000);\n\t\t\t\tunchecked {\n\t\t\t\t\tbalance -= tokensIn;\n\t\t\t\t\tneeded0 = tokensOut >= needed0 ? 0 : needed0 - tokensOut;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (balance >= 1e6 && needed1 > 0) {\n\t\t\t\t(,uint256 tokensOut) = swapTokens(quote, token1, balance, (needed1 * 1015_000) / 1e6, 15_000);\n\t\t\t\tunchecked {\n\t\t\t\t\tneeded1 = tokensOut >= needed1 ? 0 : needed1 - tokensOut;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// No change\n\t\treturn (needed0, needed1);\n\t}\n\n\n\t// Functions for administration purposes\n\n\tfunction getController() external view override returns (address _controller) {\n\t\treturn controller;\n\t}\n\n\tfunction setController(address newController) public override onlyOwner {\n\t\taddress oldController = controller;\n\t\tcontroller = newController;\n\n\t\temit ControllerSet(newController, oldController);\n\t}\n\n\tfunction getFunder() external view override returns (address _funder) {\n\t\treturn funder;\n\t}\n\n\tfunction setFunder(address newFunder) public override onlyOwner {\n\t\taddress oldFunder = funder;\n\t\tfunder = newFunder;\n\n\t\temit FunderSet(newFunder, oldFunder);\n\t}\n\n\tfunction setUtils(address utilsAdr) public onlyOwner {\n\t\tutils = IHoldingContractUtils(utilsAdr);\n\t}\n\n\t// Swap internals\n\n\t// Make a swap with the given slippage.  If slippage is zero, then it is set to 100%, which is dangerous but garuntees\n\t// the swap to occur.\n\t// Will spend at most maxIn tokens, and will receive about at most maxOut tokens.\n\tfunction swapTokens(address from, address to, uint256 maxIn, uint256 maxOut, uint24 slippageE6) public returns (uint256 amountIn, uint256 amountOut) {\n\t\trequire(msg.sender == controller || msg.sender == address(this), \"Unauthorized\");\n\n\t\tif (from == address(0) && to == WETH) {\n\t\t\tamountIn = maxIn < maxOut ? maxIn : maxOut;\n\t\t\tWETH9(WETH).deposit{value: amountIn}();\n\t\t\treturn (amountIn, amountIn);\n\t\t} else if (from == WETH && to == address(0)) {\n\t\t\tamountIn = maxIn < maxOut ? maxIn : maxOut;\n\t\t\tWETH9(WETH).withdraw(amountIn);\n\t\t\treturn (amountIn, amountIn);\n\t\t}\n\n\t\tIUniswapV3Pool pool;\n\t\tuint256 outMinimum;\n\t\t(pool, amountIn, outMinimum) = utils.preSwapHelper(from, to, maxIn, maxOut, slippageE6);\n\n\t\tif (from == address(0)) {\n\t\t\t// Convert to WETH first then change token type\n\t\t\tWETH9(WETH).deposit{value: amountIn}();\n\t\t}\n\n\t\tISwapRouter.ExactInputSingleParams memory params =\n\t\t\tISwapRouter.ExactInputSingleParams({\n\t\t\t\ttokenIn: from == address(0) ? WETH : from,\n\t\t\t\ttokenOut: to == address(0) ? WETH : to,\n\t\t\t\tfee: pool.fee(),\n\t\t\t\trecipient: address(this),\n\t\t\t\tdeadline: block.timestamp,\n\t\t\t\tamountIn: amountIn,\n\t\t\t\tamountOutMinimum: outMinimum,\n\t\t\t\tsqrtPriceLimitX96: 0\n\t\t\t});\n\n\t\tamountOut = swapRouter.exactInputSingle(params);\n\n\t\tif (from != address(0)) onSendToken(from);\n\n\t\tif (to == address(0)) {\n\t\t\t// Convert to ETH\n\t\t\tWETH9(WETH).withdraw(amountOut);\n\t\t} else\n\t\t\tonReceiveToken(to);\n\n\t\temit TokensSwapped(from, to, amountIn, amountOut);\n\t}\n\n\t// Utilities\n\n\tfunction correctPriceDirection(address base, address quote, uint160 sqrtPriceX96) public pure returns (uint160 sqrtPriceX96Corrected) {\n\t\tif (base < quote)\n\t\t\treturn sqrtPriceX96;\n\t\telse\n\t\t\treturn uint160((1 << 192) / uint256(sqrtPriceX96));\n\t}\n\n\tfunction getSqrtPriceX96FromPrice(int8 decimalDiff, uint80 price_12Decimals) public pure returns (uint160 sqrtPriceX96) {\n\t\tunchecked {\n\t\t\tuint256 ratioX192 = mulDiv(uint256(price_12Decimals), 1 << 192, 10**uint8(12 + decimalDiff));\n\t\t\treturn uint160(sqrt(ratioX192));\n\t\t}\n\t}\n\n\t/// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n\t/// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n\t/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n\t/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n\t/// @param amount0 The amount0 being sent in\n\t/// @return liquidity The amount of returned liquidity\n\tfunction getLiquidityForAmount0(\n\t\tuint160 sqrtRatioAX96,\n\t\tuint160 sqrtRatioBX96,\n\t\tuint256 amount0\n\t) internal pure returns (uint128 liquidity) {\n\t\tif (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\t\tuint256 intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, 0x1000000000000000000000000 /* FixedPoint96.Q96 */);\n\t\treturn uint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n\t}\n\n\t// https://ethereum-magicians.org/t/eip-7054-gas-efficient-square-root-calculation-with-binary-search-approach/14539\n\tfunction sqrt(uint x) public pure returns (uint128) {\n\t\tif (x == 0) return 0;\n\t\telse {\n\t\t\tuint xx = x;\n\t\t\tuint r = 1;\n\t\t\tif (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\n\t\t\tif (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\n\t\t\tif (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\n\t\t\tif (xx >= 0x10000) { xx >>= 16; r <<= 8; }\n\t\t\tif (xx >= 0x100) { xx >>= 8; r <<= 4; }\n\t\t\tif (xx >= 0x10) { xx >>= 4; r <<= 2; }\n\t\t\tif (xx >= 0x8) { r <<= 1; }\n\n\t\t\tunchecked {\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t\tr = (r + x / r) >> 1;\n\t\t\t}\n\t\t\tuint r1 = x / r;\n\t\t\treturn uint128 (r < r1 ? r : r1);\n\t\t}\n\t}\n\n\t// From https://arbiscan.io/contractdiffchecker?a2=0x819356bf26d384e7e70cd26c07fc807e6b354f08&a1=0x48e455852669adb747b3d16f2bd8b541d696b697\n\tfunction mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n\t\tunchecked {\n\t\t\t// 512-bit multiply [prod1 prod0] = a * b\n\t\t\t// Compute the product mod 2**256 and mod 2**256 - 1\n\t\t\t// then use the Chinese Remainder Theorem to reconstruct\n\t\t\t// the 512 bit result. The result is stored in two 256\n\t\t\t// variables such that product = prod1 * 2**256 + prod0\n\t\t\tuint256 prod0; // Least significant 256 bits of the product\n\t\t\tuint256 prod1; // Most significant 256 bits of the product\n\t\t\tassembly {\n\t\t\t\tlet mm := mulmod(a, b, not(0))\n\t\t\t\tprod0 := mul(a, b)\n\t\t\t\tprod1 := sub(sub(mm, prod0), lt(mm, prod0))\n\t\t\t}\n\n\t\t\t// Handle non-overflow cases, 256 by 256 division\n\t\t\tif (prod1 == 0) {\n\t\t\t\trequire(denominator > 0);\n\t\t\t\tassembly {\n\t\t\t\t\tresult := div(prod0, denominator)\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// Make sure the result is less than 2**256.\n\t\t\t// Also prevents denominator == 0\n\t\t\trequire(denominator > prod1);\n\n\t\t\t///////////////////////////////////////////////\n\t\t\t// 512 by 256 division.\n\t\t\t///////////////////////////////////////////////\n\n\t\t\t// Make division exact by subtracting the remainder from [prod1 prod0]\n\t\t\t// Compute remainder using mulmod\n\t\t\tuint256 remainder;\n\t\t\tassembly {\n\t\t\t\tremainder := mulmod(a, b, denominator)\n\t\t\t}\n\t\t\t// Subtract 256 bit number from 512 bit number\n\t\t\tassembly {\n\t\t\t\tprod1 := sub(prod1, gt(remainder, prod0))\n\t\t\t\tprod0 := sub(prod0, remainder)\n\t\t\t}\n\n\t\t\t// Factor powers of two out of denominator\n\t\t\t// Compute largest power of two divisor of denominator.\n\t\t\t// Always >= 1.\n\t\t\tuint256 twos = (0 - denominator) & denominator;\n\t\t\t// Divide denominator by power of two\n\t\t\tassembly {\n\t\t\t\tdenominator := div(denominator, twos)\n\t\t\t}\n\n\t\t\t// Divide [prod1 prod0] by the factors of two\n\t\t\tassembly {\n\t\t\t\tprod0 := div(prod0, twos)\n\t\t\t}\n\t\t\t// Shift in bits from prod1 into prod0. For this we need\n\t\t\t// to flip `twos` such that it is 2**256 / twos.\n\t\t\t// If twos is zero, then it becomes one\n\t\t\tassembly {\n\t\t\t\ttwos := add(div(sub(0, twos), twos), 1)\n\t\t\t}\n\t\t\tprod0 |= prod1 * twos;\n\n\t\t\t// Invert denominator mod 2**256\n\t\t\t// Now that denominator is an odd number, it has an inverse\n\t\t\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\n\t\t\t// Compute the inverse by starting with a seed that is correct\n\t\t\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\n\t\t\tuint256 inv = (3 * denominator) ^ 2;\n\t\t\t// Now use Newton-Raphson iteration to improve the precision.\n\t\t\t// Thanks to Hensel's lifting lemma, this also works in modular\n\t\t\t// arithmetic, doubling the correct bits in each step.\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**8\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**16\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**32\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**64\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**128\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**256\n\n\t\t\t// Because the division is now exact we can divide by multiplying\n\t\t\t// with the modular inverse of denominator. This will give us the\n\t\t\t// correct result modulo 2**256. Since the precoditions guarantee\n\t\t\t// that the outcome is less than 2**256, this is the final result.\n\t\t\t// We don't need to compute the high bits of the result and prod1\n\t\t\t// is no longer required.\n\t\t\tresult = prod0 * inv;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.9.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint24(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(uint160(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        ));\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.9.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.9.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1750
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}