{{
  "language": "Solidity",
  "sources": {
    "contracts/vusd-arb-exec.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/*\n * VUSDArbitrageExecutor\n * \n * Theory of Operation:\n * This smart contract executes VUSD arbitrage using Aave v3 flash loans.\n * - The web app decides whether to perform below-peg or above-peg arbitrage.\n * - The web app prepares the flash loan parameters, swap calldata, minimum expected profit, and deadline.\n * - The wallet signs and sends a transaction to call executeBelowPegArb() or executeAbovePegArb().\n * - The contract flashloans USDC/USDT, mints/redeems VUSD if necessary, swaps tokens via SushiSwap V2/V3 or Curve,\n *   repays the flash loan, and immediately sends the profit to the caller.\n * - If no profit exists after repaying the flash loan and fees, the transaction reverts.\n * - Transactions will revert if executed after their deadline to prevent stale transactions.\n */\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\ninterface IAaveV3FlashLoanSimple {\n    function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n}\n\ninterface IVUSD is IERC20 {\n    function treasury() external view returns (address);\n    function minter() external view returns (address);\n}\n\ninterface ITreasury {\n    function redeemer() external view returns (address);\n}\n\ninterface IVUSDMinter {\n    function mint(address stablecoin, uint256 amount, address receiver) external;\n}\n\ninterface IRedeemer {\n    function redeem(address token, uint256 vusdAmount) external;\n}\n\ninterface IERC3156FlashBorrower {\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n\ncontract VUSDArbitrageExecutor is ReentrancyGuard, IERC3156FlashBorrower {\n    using Address for address;\n\n    struct FlashloanParams {\n        address asset;\n        uint256 amount;\n    }\n\n    struct SwapParams {\n        address router;\n        bytes[] calls;\n    }\n\n    // Hardcoded constants\n    address public constant AAVE_POOL = 0x7BeA39867e4169DBe237d55C8242a8f2fcDcc387; // Ethereum mainnet Aave v3 pool\n    address public constant SUSHI_V2_ROUTER = 0xd9E1ce17f2641F24aE83637Ab66A2cCa9C378b99; // SushiSwap V2 Router\n    address public constant SUSHI_V3_ROUTER = 0x1b7a7daB900fa0aefa688A43Fe1ADe2Ae203FB78; // SushiSwap V3 Router\n    address public constant CURVE_ROUTER = 0x8301AE4fc9c624d1D396cbDAa1ed877821D7C511;   // Curve Router\n    address public constant VUSD_ADDRESS = 0x677ddbd918637E5F2c79e164D402454dE7dA8619; // VUSD token address\n\n    IVUSD public immutable vusd;\n    IVUSDMinter public immutable vusdMinter;\n    IRedeemer public immutable redeemer;\n\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    event ArbitrageExecuted(address indexed receiver, uint256 profitAmount, bool isAbovePeg);\n\n    /// @notice Constructor auto-detects Minter and Redeemer addresses from VUSD token\n    constructor() {\n        vusd = IVUSD(VUSD_ADDRESS);\n\n        address minterAddress = vusd.minter();\n        require(minterAddress != address(0), \"zero minter\");\n        vusdMinter = IVUSDMinter(minterAddress);\n\n        address treasuryAddress = vusd.treasury();\n        require(treasuryAddress != address(0), \"zero treasury\");\n\n        address redeemerAddress = ITreasury(treasuryAddress).redeemer();\n        require(redeemerAddress != address(0), \"zero redeemer\");\n\n        redeemer = IRedeemer(redeemerAddress);\n    }\n\n    /// @notice Execute arbitrage when VUSD is below $1.00\n    /// @param flashParams Parameters for the flash loan\n    /// @param swapParams Parameters for the token swaps\n    /// @param minProfit Minimum profit required for the transaction to succeed\n    /// @param deadline Unix timestamp after which the transaction will revert\n    function executeBelowPegArb(\n        FlashloanParams calldata flashParams,\n        SwapParams calldata swapParams,\n        uint256 minProfit,\n        uint256 deadline\n    ) external nonReentrant {\n        require(block.timestamp <= deadline, \"transaction expired\");\n        require(_isWhitelistedRouter(swapParams.router), \"router not whitelisted\");\n        require(flashParams.amount > 0, \"zero amount\");\n        \n        bytes memory data = abi.encode(false, swapParams, minProfit, msg.sender, deadline);\n        IAaveV3FlashLoanSimple(AAVE_POOL).flashLoanSimple(address(this), flashParams.asset, flashParams.amount, data, 0);\n    }\n\n    /// @notice Execute arbitrage when VUSD is above $1.00\n    /// @param flashParams Parameters for the flash loan\n    /// @param swapParams Parameters for the token swaps\n    /// @param minProfit Minimum profit required for the transaction to succeed\n    /// @param deadline Unix timestamp after which the transaction will revert\n    function executeAbovePegArb(\n        FlashloanParams calldata flashParams,\n        SwapParams calldata swapParams,\n        uint256 minProfit,\n        uint256 deadline\n    ) external nonReentrant {\n        require(block.timestamp <= deadline, \"transaction expired\");\n        require(_isWhitelistedRouter(swapParams.router), \"router not whitelisted\");\n        require(flashParams.amount > 0, \"zero amount\");\n        \n        bytes memory data = abi.encode(true, swapParams, minProfit, msg.sender, deadline);\n        IAaveV3FlashLoanSimple(AAVE_POOL).flashLoanSimple(address(this), flashParams.asset, flashParams.amount, data, 0);\n    }\n\n    /// @notice Flash loan callback called by Aave v3 after loan issuance\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external override returns (bytes32) {\n        require(msg.sender == AAVE_POOL, \"unauthorized flashloan sender\");\n        require(initiator == address(this), \"unauthorized initiator\");\n\n        (bool isAbovePeg, SwapParams memory swapParams, uint256 minProfit, address receiver, uint256 deadline) = \n            abi.decode(data, (bool, SwapParams, uint256, address, uint256));\n        \n        require(block.timestamp <= deadline, \"transaction expired\");\n\n        if (isAbovePeg) {\n            _mintVUSD(token, amount);\n            _performSwaps(swapParams);\n        } else {\n            _performSwaps(swapParams);\n            _redeemVUSD(token, vusd.balanceOf(address(this)));\n        }\n\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        uint256 totalOwed = amount + fee;\n        require(balance >= totalOwed + minProfit, \"insufficient profit\");\n\n        // Use safe approval pattern\n        IERC20(token).approve(AAVE_POOL, 0);\n        IERC20(token).approve(AAVE_POOL, totalOwed);\n\n        uint256 profit = balance - totalOwed;\n        if (profit > 0) {\n            IERC20(token).transfer(receiver, profit);\n        }\n\n        emit ArbitrageExecuted(receiver, profit, isAbovePeg);\n        return CALLBACK_SUCCESS;\n    }\n\n    /// @dev Internal: Mint VUSD from stablecoin\n    /// @param token The stablecoin token address to use for minting\n    /// @param amount The amount of stablecoin to use for minting\n    function _mintVUSD(address token, uint256 amount) internal {\n        // Use safe approval pattern\n        IERC20(token).approve(address(vusdMinter), 0);\n        IERC20(token).approve(address(vusdMinter), amount);\n        \n        vusdMinter.mint(token, amount, address(this));\n    }\n\n    /// @dev Internal: Redeem VUSD to stablecoin via Redeemer contract\n    /// @param token The stablecoin token address to receive from redemption\n    /// @param vusdAmount The amount of VUSD to redeem\n    function _redeemVUSD(address token, uint256 vusdAmount) internal {\n        // Use safe approval pattern\n        IERC20(address(vusd)).approve(address(redeemer), 0);\n        IERC20(address(vusd)).approve(address(redeemer), vusdAmount);\n        \n        redeemer.redeem(token, vusdAmount);\n    }\n\n    /// @dev Internal: Execute sequence of swaps using router\n    /// @param swapParams Parameters containing router address and swap call data\n    function _performSwaps(SwapParams memory swapParams) internal {\n        // Router already validated in the execute functions\n        address router = swapParams.router;\n        uint256 callsLength = swapParams.calls.length;\n        \n        for (uint256 i = 0; i < callsLength; i++) {\n            (bool success, ) = router.call(swapParams.calls[i]);\n            require(success, \"swap failed\");\n        }\n    }\n\n    /// @dev Internal: Check if router is approved\n    /// @param router The router address to check\n    /// @return bool True if the router is whitelisted\n    function _isWhitelistedRouter(address router) internal pure returns (bool) {\n        return router == SUSHI_V2_ROUTER || router == SUSHI_V3_ROUTER || router == CURVE_ROUTER;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}