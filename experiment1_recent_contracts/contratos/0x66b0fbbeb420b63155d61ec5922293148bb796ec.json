{{
  "language": "Solidity",
  "sources": {
    "contracts/TokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: -- BCOM --\n\npragma solidity =0.8.26;\n\nimport \"./SafeERC20.sol\";\n\ncontract TokenDistributor is SafeERC20 {\n\n    address public owner;\n    address public token;\n    address public manager;\n\n    uint256 public coolDown;\n    address public proposedOwner;\n\n    bool enableCoolDown = false;\n    mapping(address => uint256) public lastDistributed;\n\n    constructor() {\n        owner = msg.sender;\n        manager = msg.sender;\n        coolDown = 2 minutes;\n    }\n\n    event Received(\n        address indexed sender,\n        uint256 value\n    );\n\n    receive ()\n        external\n        payable\n    {\n        emit Received(\n            msg.sender,\n            msg.value\n        );\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"TokenDistributor: INVALID_OWNER\"\n        );\n        _;\n    }\n\n    modifier onlyManager {\n        require(\n            msg.sender == manager,\n            \"TokenDistributor: INVALID_MANAGER\"\n        );\n        _;\n    }\n\n    function changeManager(\n        address _manager\n    )\n        external\n        onlyOwner\n    {\n        manager = _manager;\n    }\n\n    function proposeOwner(\n        address _owner\n    )\n        external\n        onlyOwner\n    {\n        proposedOwner = _owner;\n    }\n\n    function acceptOwnership()\n        external\n    {\n        require(\n            msg.sender == proposedOwner,\n            \"TokenDistributor: INVALID_CALLER\"\n        );\n\n        owner = proposedOwner;\n        proposedOwner = address(0x0);\n    }\n\n    function defineToken(\n        address _token\n    )\n        external\n        onlyOwner\n    {\n        token = _token;\n    }\n\n    function defineCoolDown(\n        uint256 _coolDown\n    )\n        external\n        onlyOwner\n    {\n        coolDown = _coolDown;\n    }\n\n    function setLastDistributed(\n        address _recipient,\n        uint256 _time\n    )\n        external\n        onlyOwner\n    {\n        lastDistributed[_recipient] = _time;\n    }\n\n    function changeEnableCoolDown(\n        bool _enableCoolDown\n    )\n        external\n        onlyOwner\n    {\n        enableCoolDown = _enableCoolDown;\n    }\n\n    function sendNative(\n        address[] calldata _recipients,\n        uint256[] calldata _amounts\n    )\n        external\n        onlyManager\n    {\n        require(\n            _recipients.length == _amounts.length,\n            \"TokenDistributor: INVALID_INPUT\"\n        );\n\n        for (uint256 i; i < _recipients.length; i++) {\n\n            if (enableCoolDown == false) {\n                payable(_recipients[i]).transfer(\n                    _amounts[i]\n                );\n\n                continue;\n            }\n\n            if (lastDistributed[_recipients[i]] + coolDown > block.timestamp) {\n                continue;\n            }\n\n            lastDistributed[_recipients[i]] = block.timestamp;\n\n            payable(_recipients[i]).transfer(\n                _amounts[i]\n            );\n        }\n    }\n\n    function sendTokens(\n        address[] calldata _recipients,\n        uint256[] calldata _amounts\n    )\n        external\n        onlyManager\n    {\n        require(\n            _recipients.length == _amounts.length,\n            \"TokenDistributor: INVALID_INPUT\"\n        );\n\n        for (uint256 i; i < _recipients.length; i++) {\n\n            if (enableCoolDown == false) {\n\n                safeTransfer(\n                    IERC20(token),\n                    _recipients[i],\n                    _amounts[i]\n                );\n\n                continue;\n            }\n\n            if (lastDistributed[_recipients[i]] + coolDown > block.timestamp) {\n                continue;\n            }\n\n            lastDistributed[_recipients[i]] = block.timestamp;\n\n            safeTransfer(\n                IERC20(token),\n                _recipients[i],\n                _amounts[i]\n            );\n        }\n    }\n}\n"
    },
    "contracts/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: -- BCOM --\n\npragma solidity =0.8.26;\n\nimport \"./IERC20.sol\";\n\nerror SafeERC20FailedOperation(\n    address token\n);\n\ncontract SafeERC20 {\n\n    /**\n     * @dev Allows to execute transfer for a token\n     */\n    function safeTransfer(\n        IERC20 _token,\n        address _to,\n        uint256 _value\n    )\n        internal\n    {\n        _callOptionalReturn(\n            _token,\n            abi.encodeWithSelector(\n                _token.transfer.selector,\n                _to,\n                _value\n            )\n        );\n    }\n\n    /**\n     * @dev Allows to execute transferFrom for a token\n     */\n    function safeTransferFrom(\n        IERC20 _token,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        internal\n    {\n        _callOptionalReturn(\n            _token,\n            abi.encodeWithSelector(\n                _token.transferFrom.selector,\n                _from,\n                _to,\n                _value\n            )\n        );\n    }\n\n    function _callOptionalReturn(\n        IERC20 _token,\n        bytes memory _data\n    )\n        private\n    {\n        uint256 returnSize;\n        uint256 returnValue;\n\n        assembly (\"memory-safe\") {\n\n            let success := call(\n                gas(),\n                _token,\n                0,\n                add(_data, 0x20),\n                mload(_data),\n                0,\n                0x20\n            )\n\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(\n                    ptr,\n                    0,\n                    returndatasize()\n                )\n                revert(\n                    ptr,\n                    returndatasize()\n                )\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0\n            ? address(_token).code.length == 0\n            : returnValue != 1\n        ) {\n            revert SafeERC20FailedOperation(\n                address(_token)\n            );\n        }\n    }\n}\n"
    },
    "contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: -- BCOM --\n\npragma solidity =0.8.26;\n\ninterface IERC20 {\n\n    /**\n     * @dev Interface fo transfer function\n     */\n    function transfer(\n        address _recipient,\n        uint256 _amount\n    )\n        external\n        returns (bool);\n\n    /**\n     * @dev Interface for transferFrom function\n     */\n    function transferFrom(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    )\n        external\n        returns (bool);\n\n    /**\n     * @dev Interface for approve function\n     */\n    function approve(\n        address _spender,\n        uint256 _amount\n    )\n        external\n        returns (bool);\n\n    function balanceOf(\n        address _account\n    )\n        external\n        view\n        returns (uint256);\n\n    function mint(\n        address _user,\n        uint256 _amount\n    )\n        external;\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@chainlink/=node_modules/@chainlink/",
      "@ensdomains/=node_modules/@ensdomains/",
      "@eth-optimism/=node_modules/@eth-optimism/",
      "@openzeppelin/=node_modules/@openzeppelin/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "eth-gas-reporter/=node_modules/eth-gas-reporter/",
      "forge-std/=lib/forge-std/src/",
      "hardhat/=node_modules/hardhat/",
      "truffle/=node_modules/truffle/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 9999999
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "cancun",
    "viaIR": false,
    "libraries": {}
  }
}}