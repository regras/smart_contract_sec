{{
  "language": "Solidity",
  "sources": {
    "src/SubstrateSignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ISubstrateSignatureValidator} from \"./interfaces/ISubstrateSignatureValidator.sol\";\n\n/// @title SubstrateSignatureValidator\n/// @notice A contract that validates signatures from the Substrate blockchain\ncontract SubstrateSignatureValidator is ISubstrateSignatureValidator, Ownable {\n    /// @notice The list of attestor wallets\n    address[] private _attestors;\n    /// @notice The threshold of the attestors\n    uint16 private _threshold;\n\n    /// @notice The error emitted when the threshold is invalid\n    error InvalidThreshold();\n    /// @notice The error emitted when the attestors list is empty\n    error EmptyAttestorsList();\n    /// @notice The error emitted when the attestor address is invalid\n    error InvalidAttestorAddress();\n    /// @notice The error emitted when the attestor list is invalid\n    error InvalidAttestorList();\n    /// @notice The error emitted when the attestors length is less than the threshold\n    error AttestorsLengthLessThanThreshold();\n\n    constructor(address[] memory attestors, uint16 threshold) Ownable(msg.sender) {\n        _updateThreshold(threshold);\n        _updateAttestors(attestors);\n    }\n\n    function _updateAttestors(address[] memory attestors) internal {\n        if (attestors.length == 0) revert EmptyAttestorsList();\n        if (attestors[0] == address(0)) revert InvalidAttestorAddress();\n        if (attestors.length < _threshold) revert AttestorsLengthLessThanThreshold();\n\n        uint256 attestorsLength = attestors.length;\n        for (uint256 i = 1; i < attestorsLength; ++i) {\n            // solhint-disable-next-line gas-strict-inequalities\n            if (attestors[i] <= attestors[i - 1]) revert InvalidAttestorList();\n        }\n\n        _attestors = attestors;\n        emit AttestorsUpdated(attestors);\n    }\n\n    function _updateThreshold(uint16 threshold) internal {\n        if (threshold == 0) revert InvalidThreshold();\n\n        _threshold = threshold;\n        emit ThresholdUpdated(threshold);\n    }\n\n    /// @inheritdoc ISubstrateSignatureValidator\n    function getAttestors() external view returns (address[] memory attestors) {\n        return _attestors;\n    }\n\n    /// @inheritdoc ISubstrateSignatureValidator\n    function isAttestor(address attestor) external view returns (bool result) {\n        uint256 attestorsLength = _attestors.length;\n        for (uint256 i = 0; i < attestorsLength; ++i) {\n            if (_attestors[i] == attestor) return true;\n        }\n        return false;\n    }\n\n    /// @inheritdoc ISubstrateSignatureValidator\n    function getThreshold() external view returns (uint16 threshold) {\n        return _threshold;\n    }\n\n    /// @inheritdoc ISubstrateSignatureValidator\n    function updateAttestorsAndThreshold(address[] calldata attestors, uint16 threshold) external onlyOwner {\n        _updateThreshold(threshold);\n        _updateAttestors(attestors);\n    }\n\n    /// @inheritdoc ISubstrateSignatureValidator\n    function validateMessage(bytes32 message, bytes32[] calldata r, bytes32[] calldata s, uint8[] calldata v)\n        external\n        view\n        returns (bool result)\n    {\n        if (r.length != s.length || s.length != v.length || r.length == 0) return false;\n\n        uint256 attestorsLength = _attestors.length;\n        uint256 signaturesLength = r.length;\n\n        uint256 validSignaturesCount = 0;\n        uint256 attestorIndex = 0;\n\n        for (uint256 i = 0; i < signaturesLength; ++i) {\n            address recoveredAddress = ecrecover(message, v[i], r[i], s[i]);\n\n            while (attestorIndex < attestorsLength && _attestors[attestorIndex] < recoveredAddress) {\n                ++attestorIndex;\n            }\n\n            if (attestorIndex < attestorsLength && _attestors[attestorIndex] == recoveredAddress) {\n                ++validSignaturesCount;\n                ++attestorIndex;\n            }\n\n            if (validSignaturesCount == _threshold) return true;\n        }\n\n        return false;\n    }\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.2.0/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/interfaces/ISubstrateSignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/// @title ISubstrateSignatureValidator\n/// @notice Interface for the SubstrateSignatureValidator contract\n/// @notice This contract is used to validate messages signed by the substrate SXT Chain attestors.\ninterface ISubstrateSignatureValidator {\n    /*  ********** events ********** */\n\n    /// @notice Emitted when the attestors are updated\n    /// @param attestors The addresses of the attestors\n    event AttestorsUpdated(address[] attestors);\n\n    /// @notice Emitted when the threshold is updated\n    /// @param threshold The threshold\n    event ThresholdUpdated(uint16 threshold);\n\n    /*  ********** functions ********** */\n\n    /// @notice Get the attestors\n    /// @return attestors The addresses of the attestors\n    function getAttestors() external view returns (address[] memory attestors);\n\n    /// @notice Check if an address is an attestor\n    /// @param attestor The address to check\n    /// @return result True if the address is an attestor, false otherwise\n    function isAttestor(address attestor) external view returns (bool result);\n\n    /// @notice Get the threshold\n    /// @return threshold The threshold\n    function getThreshold() external view returns (uint16 threshold);\n\n    /// @notice Atomic method to update both attestors and threshold\n    /// @param attestors The addresses of the attestors\n    /// @param threshold The threshold\n    /// @dev this function can only be called by the owner [Multisig Safe]\n    /// @dev the attestors addresses should be unique and sorted in ascending order\n    function updateAttestorsAndThreshold(address[] calldata attestors, uint16 threshold) external;\n\n    /// @notice Validate a message signed by the substrate SXT Chain attestors\n    /// @param message The message to validate\n    /// @param r The r values of the signatures\n    /// @param s The s values of the signatures\n    /// @param v The v values of the signatures\n    /// @dev the signed attestors should be ordered in ascending order\n    function validateMessage(bytes32 message, bytes32[] calldata r, bytes32[] calldata s, uint8[] calldata v)\n        external\n        view\n        returns (bool result);\n}\n"
    },
    "dependencies/@openzeppelin-contracts-5.2.0/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.2.0/",
      "forge-std/=dependencies/forge-std-1.9.6/src/",
      "@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/",
      "forge-std-1.9.6/=dependencies/forge-std-1.9.6/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "cancun",
    "viaIR": false,
    "libraries": {}
  }
}}