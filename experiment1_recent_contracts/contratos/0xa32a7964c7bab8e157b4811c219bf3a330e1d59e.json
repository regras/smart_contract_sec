{{
  "language": "Solidity",
  "sources": {
    "contracts/Inbox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\nimport {TypeCasts} from \"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {BaseProver} from \"./prover/BaseProver.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {IInbox} from \"./interfaces/IInbox.sol\";\n\nimport {Intent, Route, Call, TokenAmount} from \"./types/Intent.sol\";\nimport {Semver} from \"./libs/Semver.sol\";\n\n/**\n * @title Inbox\n * @notice Main entry point for fulfilling intents on the destination chain\n * @dev Validates intent hash authenticity, executes calldata, and enables provers\n * to claim rewards on the source chain by checking the fulfilled mapping\n */\ncontract Inbox is IInbox, Semver {\n    using TypeCasts for address;\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Interface ID for IProver used to detect prover contracts\n     */\n    bytes4 public constant IPROVER_INTERFACE_ID = 0xd8e1f34f; //type(IProver).interfaceId\n\n    /**\n     * @notice Mapping of intent hashes to their claimant addresses\n     * @dev Stores the address eligible to claim rewards for each fulfilled intent\n     */\n    mapping(bytes32 => address) public fulfilled;\n\n    /**\n     * @notice Initializes the Inbox contract\n     */\n    constructor() {}\n\n    /**\n     * @notice Fulfills an intent to be proven via storage proofs\n     * @dev Validates intent hash, executes calls, and marks as fulfilled\n     * @param _route The route of the intent\n     * @param _rewardHash The hash of the reward details\n     * @param _claimant The address that will receive the reward on the source chain\n     * @param _expectedHash The hash of the intent as created on the source chain\n     * @param _localProver The prover contract to use for verification\n     * @return Array of execution results from each call\n     */\n    function fulfill(\n        Route memory _route,\n        bytes32 _rewardHash,\n        address _claimant,\n        bytes32 _expectedHash,\n        address _localProver\n    ) external payable override returns (bytes[] memory) {\n        bytes[] memory result = _fulfill(\n            _route,\n            _rewardHash,\n            _claimant,\n            _expectedHash,\n            _localProver\n        );\n\n        return result;\n    }\n\n    /**\n     * @notice Fulfills an intent and initiates proving in one transaction\n     * @dev Executes intent actions and sends proof message to source chain\n     * @param _route The route of the intent\n     * @param _rewardHash The hash of the reward details\n     * @param _claimant The address that will receive the reward on the source chain\n     * @param _expectedHash The hash of the intent as created on the source chain\n     * @param _localProver Address of prover on the destination chain\n     * @param _data Additional data for message formatting\n     * @return Array of execution results\n     */\n    function fulfillAndProve(\n        Route memory _route,\n        bytes32 _rewardHash,\n        address _claimant,\n        bytes32 _expectedHash,\n        address _localProver,\n        bytes calldata _data\n    ) public payable returns (bytes[] memory) {\n        bytes[] memory result = _fulfill(\n            _route,\n            _rewardHash,\n            _claimant,\n            _expectedHash,\n            _localProver\n        );\n\n        bytes32[] memory hashes = new bytes32[](1);\n        address[] memory claimants = new address[](1);\n        hashes[0] = _expectedHash;\n        claimants[0] = _claimant;\n\n        initiateProving(_route.source, hashes, _localProver, _data);\n        return result;\n    }\n\n    /**\n     * @notice Initiates proving process for fulfilled intents\n     * @dev Sends message to source chain to verify intent execution\n     * @param _sourceChainId Chain ID of the source chain\n     * @param _intentHashes Array of intent hashes to prove\n     * @param _localProver Address of prover on the destination chain\n     * @param _data Additional data for message formatting\n     */\n    function initiateProving(\n        uint256 _sourceChainId,\n        bytes32[] memory _intentHashes,\n        address _localProver,\n        bytes calldata _data\n    ) public payable {\n        if (_localProver == address(0)) {\n            // storage prover case, this method should do nothing\n            return;\n        }\n        uint256 size = _intentHashes.length;\n        address[] memory claimants = new address[](size);\n        for (uint256 i = 0; i < size; ++i) {\n            address claimant = fulfilled[_intentHashes[i]];\n\n            if (claimant == address(0)) {\n                revert IntentNotFulfilled(_intentHashes[i]);\n            }\n            claimants[i] = claimant;\n        }\n        BaseProver(_localProver).destinationProve{value: msg.value}(\n            msg.sender,\n            _sourceChainId,\n            _intentHashes,\n            claimants,\n            _data\n        );\n    }\n\n    /**\n     * @notice Internal function to fulfill intents\n     * @dev Validates intent and executes calls\n     * @param _route The route of the intent\n     * @param _rewardHash The hash of the reward\n     * @param _claimant The reward recipient address\n     * @param _expectedHash The expected intent hash\n     * @param _localProver The prover contract to use\n     * @return Array of execution results\n     */\n    function _fulfill(\n        Route memory _route,\n        bytes32 _rewardHash,\n        address _claimant,\n        bytes32 _expectedHash,\n        address _localProver\n    ) internal returns (bytes[] memory) {\n        if (_route.destination != block.chainid) {\n            revert WrongChain(_route.destination);\n        }\n\n        bytes32 routeHash = keccak256(abi.encode(_route));\n        bytes32 intentHash = keccak256(\n            abi.encodePacked(routeHash, _rewardHash)\n        );\n\n        if (_route.inbox != address(this)) {\n            revert InvalidInbox(_route.inbox);\n        }\n        if (intentHash != _expectedHash) {\n            revert InvalidHash(_expectedHash);\n        }\n        if (fulfilled[intentHash] != address(0)) {\n            revert IntentAlreadyFulfilled(intentHash);\n        }\n        if (_claimant == address(0)) {\n            revert ZeroClaimant();\n        }\n\n        fulfilled[intentHash] = _claimant;\n\n        emit Fulfillment(_expectedHash, _route.source, _localProver, _claimant);\n\n        uint256 routeTokenCount = _route.tokens.length;\n        // Transfer ERC20 tokens to the inbox\n        for (uint256 i = 0; i < routeTokenCount; ++i) {\n            TokenAmount memory approval = _route.tokens[i];\n            IERC20(approval.token).safeTransferFrom(\n                msg.sender,\n                address(this),\n                approval.amount\n            );\n        }\n\n        // Store the results of the calls\n        bytes[] memory results = new bytes[](_route.calls.length);\n\n        for (uint256 i = 0; i < _route.calls.length; ++i) {\n            Call memory call = _route.calls[i];\n            if (call.target.code.length == 0 && call.data.length > 0) {\n                // no code at this address\n                revert CallToEOA(call.target);\n            }\n            (bool isProverCall, ) = (call.target).call(\n                abi.encodeWithSignature(\n                    \"supportsInterface(bytes4)\",\n                    IPROVER_INTERFACE_ID\n                )\n            );\n            if (isProverCall) {\n                // call to prover\n                revert CallToProver();\n            }\n            (bool success, bytes memory result) = call.target.call{\n                value: call.value\n            }(call.data);\n            if (!success) {\n                revert IntentCallFailed(\n                    call.target,\n                    call.data,\n                    call.value,\n                    result\n                );\n            }\n            results[i] = result;\n        }\n        return (results);\n    }\n\n    /**\n     * @notice Allows the contract to receive ETH\n     * @dev Required for handling ETH transfer for intent execution\n     */\n    receive() external payable {}\n}\n"
    },
    "node_modules/@hyperlane-xyz/core/contracts/libs/TypeCasts.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n"
    },
    "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/prover/BaseProver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IProver} from \"../interfaces/IProver.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @title BaseProver\n * @notice Base implementation for intent proving contracts\n * @dev Provides core storage and functionality for tracking proven intents\n * and their claimants\n */\nabstract contract BaseProver is IProver, ERC165 {\n    /**\n     * @notice Address of the Inbox contract\n     * @dev Immutable to prevent unauthorized changes\n     */\n    address public immutable INBOX;\n\n    /**\n     * @notice Mapping from intent hash to address eligible to claim rewards\n     * @dev Zero address indicates intent hasn't been proven\n     */\n    mapping(bytes32 => address) public provenIntents;\n\n    /**\n     * @notice Initializes the BaseProver contract\n     * @param _inbox Address of the Inbox contract\n     */\n    constructor(address _inbox) {\n        INBOX = _inbox;\n    }\n\n    /**\n     * @notice Initiates the proving process for intents from the destination chain\n     * @dev Implemented by specific prover mechanisms (storage, Hyperlane, Metalayer)\n     * @param _sender Address of the original transaction sender\n     * @param _sourceChainId Chain ID of the source chain\n     * @param _intentHashes Array of intent hashes to prove\n     * @param _claimants Array of claimant addresses\n     * @param _data Additional data specific to the proving implementation\n     */\n    function destinationProve(\n        address _sender,\n        uint256 _sourceChainId,\n        bytes32[] calldata _intentHashes,\n        address[] calldata _claimants,\n        bytes calldata _data\n    ) external payable virtual;\n\n    /**\n     * @notice Checks if this contract supports a given interface\n     * @dev Implements ERC165 interface detection\n     * @param interfaceId Interface identifier to check\n     * @return True if the interface is supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override returns (bool) {\n        return\n            interfaceId == type(IProver).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "contracts/interfaces/IInbox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\nimport {ISemver} from \"./ISemver.sol\";\n\nimport {Route} from \"../types/Intent.sol\";\n\n/**\n * @title IInbox\n * @notice Interface for the destination chain portion of the Eco Protocol's intent system\n * @dev Handles intent fulfillment and proving via different mechanisms (storage proofs,\n * Hyperlane instant/batched)\n */\ninterface IInbox is ISemver {\n    /**\n     * @notice Emitted when an intent is successfully fulfilled\n     * @param _hash Hash of the fulfilled intent\n     * @param _sourceChainID ID of the source chain\n     * @param _prover Address of the prover that fulfilled the intent\n     * @param _claimant Address eligible to claim rewards\n     */\n    event Fulfillment(\n        bytes32 indexed _hash,\n        uint256 indexed _sourceChainID,\n        address indexed _prover,\n        address _claimant\n    );\n\n    /**\n     * @notice Thrown when an attempt is made to fulfill an intent on the wrong destination chain\n     * @param _chainID Chain ID of the destination chain on which this intent should be fulfilled\n     */\n    error WrongChain(uint256 _chainID);\n\n    /**\n     * @notice Intent has already been fulfilled\n     * @param _hash Hash of the fulfilled intent\n     */\n    error IntentAlreadyFulfilled(bytes32 _hash);\n\n    /**\n     * @notice Invalid inbox address provided\n     * @param _inbox Address that is not a valid inbox\n     */\n    error InvalidInbox(address _inbox);\n\n    /**\n     * @notice Generated hash doesn't match expected hash\n     * @param _expectedHash Hash that was expected\n     */\n    error InvalidHash(bytes32 _expectedHash);\n\n    /**\n     * @notice Zero address provided as claimant\n     */\n    error ZeroClaimant();\n\n    /**\n     * @notice Call during intent execution failed\n     * @param _addr Target contract address\n     * @param _data Call data that failed\n     * @param value Native token value sent\n     * @param _returnData Error data returned\n     */\n    error IntentCallFailed(\n        address _addr,\n        bytes _data,\n        uint256 value,\n        bytes _returnData\n    );\n\n    /**\n     * @notice Attempted call to a destination-chain prover\n     */\n    error CallToProver();\n\n    /**\n     * @notice Attempted call to an EOA\n     * @param _EOA EOA address to which call was attempted\n     */\n    error CallToEOA(address _EOA);\n\n    /**\n     * @notice Attempted to batch an unfulfilled intent\n     * @param _hash Hash of the unfulfilled intent\n     */\n    error IntentNotFulfilled(bytes32 _hash);\n\n    /**\n     * @notice Fulfills an intent using storage proofs\n     * @dev Validates intent hash, executes calls, and marks as fulfilled\n     * @param _route Route information for the intent\n     * @param _rewardHash Hash of the reward details\n     * @param _claimant Address eligible to claim rewards\n     * @param _expectedHash Expected hash for validation\n     * @return Array of execution results\n     */\n    function fulfill(\n        Route calldata _route,\n        bytes32 _rewardHash,\n        address _claimant,\n        bytes32 _expectedHash,\n        address _localProver\n    ) external payable returns (bytes[] memory);\n\n    /**\n     * @notice Fulfills an intent using storage proofs\n     * @dev Validates intent hash, executes calls, and marks as fulfilled\n     * @param _route Route information for the intent\n     * @param _rewardHash Hash of the reward details\n     * @param _claimant Address eligible to claim rewards\n     * @param _expectedHash Expected hash for validation\n     * @param _localProver Address of prover on the destination chain\n     * @param _data Additional data for message formatting\n     * @return Array of execution results\n     */\n    function fulfillAndProve(\n        Route calldata _route,\n        bytes32 _rewardHash,\n        address _claimant,\n        bytes32 _expectedHash,\n        address _localProver,\n        bytes calldata _data\n    ) external payable returns (bytes[] memory);\n}\n"
    },
    "contracts/types/Intent.sol": {
      "content": "/* -*- c-basic-offset: 4 -*- */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\n/**\n * @notice Represents a single contract call with encoded function data\n * @dev Used to execute arbitrary function calls on the destination chain\n * @param target The contract address to call\n * @param data ABI-encoded function call data\n * @param value Amount of native tokens to send with the call\n */\nstruct Call {\n    address target;\n    bytes data;\n    uint256 value;\n}\n\n/**\n * @notice Represents a token amount pair\n * @dev Used to specify token rewards and transfers\n * @param token Address of the ERC20 token contract\n * @param amount Amount of tokens in the token's smallest unit\n */\nstruct TokenAmount {\n    address token;\n    uint256 amount;\n}\n\n/**\n * @notice Defines the routing and execution instructions for cross-chain messages\n * @dev Contains all necessary information to route and execute a message on the destination chain\n * @param salt Unique identifier provided by the intent creator, used to prevent duplicates\n * @param source Chain ID where the intent originated\n * @param destination Target chain ID where the calls should be executed\n * @param inbox Address of the inbox contract on the destination chain that receives messages\n * @param tokens Array of tokens required for execution of calls on destination chain\n * @param calls Array of contract calls to execute on the destination chain in sequence\n */\nstruct Route {\n    bytes32 salt;\n    uint256 source;\n    uint256 destination;\n    address inbox;\n    TokenAmount[] tokens;\n    Call[] calls;\n}\n\n/**\n * @notice Defines the reward and validation parameters for cross-chain execution\n * @dev Specifies who can execute the intent and what rewards they receive\n * @param creator Address that created the intent and has authority to modify/cancel\n * @param prover Address of the prover contract that must approve execution\n * @param deadline Timestamp after which the intent can no longer be executed\n * @param nativeValue Amount of native tokens offered as reward\n * @param tokens Array of ERC20 tokens and amounts offered as additional rewards\n */\nstruct Reward {\n    address creator;\n    address prover;\n    uint256 deadline;\n    uint256 nativeValue;\n    TokenAmount[] tokens;\n}\n\n/**\n * @notice Complete cross-chain intent combining routing and reward information\n * @dev Main structure used to process and execute cross-chain messages\n * @param route Routing and execution instructions\n * @param reward Reward and validation parameters\n */\nstruct Intent {\n    Route route;\n    Reward reward;\n}\n"
    },
    "contracts/libs/Semver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.26;\n\nimport {ISemver} from \"../interfaces/ISemver.sol\";\n\n/**\n * @title Semver\n * @notice Implements semantic versioning for contracts\n * @dev Abstract contract that provides a standard way to access version information\n */\nabstract contract Semver is ISemver {\n    /**\n     * @notice Returns the semantic version of the contract\n     * @dev Implementation of ISemver interface\n     * @return Current version string in semantic format\n     */\n    function version() external pure returns (string memory) { return \"2.0.1-beta.0-ba0b444e\"; }\n}\n"
    },
    "contracts/interfaces/IProver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\nimport {ISemver} from \"./ISemver.sol\";\n\n/**\n * @title IProver\n * @notice Interface for proving intent fulfillment\n * @dev Defines required functionality for proving intent execution with different\n * proof mechanisms (storage or Hyperlane)\n */\ninterface IProver is ISemver {\n    /**\n     * @notice Emitted when an intent is successfully proven\n     * @param _hash Hash of the proven intent\n     * @param _claimant Address eligible to claim the intent's rewards\n     */\n    event IntentProven(bytes32 indexed _hash, address indexed _claimant);\n\n    /**\n     * @notice Gets the proof mechanism type used by this prover\n     * @return string indicating the prover's mechanism\n     */\n    function getProofType() external pure returns (string memory);\n}\n"
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "node_modules/@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISemver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\n/**\n * @title Semver Interface\n * @dev An interface for a contract that has a version\n */\ninterface ISemver {\n    function version() external pure returns (string memory);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "forge-std/=lib/forge-std/src/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
      "@hyperlane-xyz/core/=node_modules/@hyperlane-xyz/core/",
      "@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
      "@metalayer/contracts/=node_modules/@metalayer/contracts/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "cancun",
    "viaIR": false,
    "libraries": {}
  }
}}