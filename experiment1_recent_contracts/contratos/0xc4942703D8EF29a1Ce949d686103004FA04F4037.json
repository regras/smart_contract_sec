{{
  "language": "Vyper",
  "sources": {
    "src/interfaces/ICurveCryptoPool.vyi": {
      "content": "# @version 0.4.1\n\n\n@external\n@view\ndef price_oracle() -> uint256:\n    ...\n\n\n@external\ndef exchange(\n    i: uint256,\n    j: uint256,\n    _dx: uint256,\n    _min_dy: uint256,\n) -> uint256:\n    ...\n",
      "sha256sum": "9aac548b2937ed254e194816df7043da5c9c08f63986d0a16787bf77a85ff992"
    },
    "src/interfaces/ICurveStablePool.vyi": {
      "content": "# @version 0.4.1\n\n\n@external\ndef exchange(i: int128, j: int128, _dx: uint256, _min_dy: uint256) -> uint256:\n    ...\n",
      "sha256sum": "9b1e1e717d0438b4e8b6f6885032e81b4f0ac217ca72c5f1810892645cab61b2"
    },
    "src/interfaces/IRedemption.vyi": {
      "content": "# @version 0.4.1\n\n\n# ============================================================================================\n# Events\n# ============================================================================================\n\n\nevent Redeem:\n    sender: address\n    recipient: indexed(address)\n    amount: uint256\n    coin_required: uint256\n    weeks: uint256\n\n\nevent SetPayee:\n    new_payee: address\n\n\nevent SetDiscount:\n    min_discount: uint256\n    max_discount: uint256\n\n\nevent SetMinLockWeeks:\n    min_lock_weeks: uint256\n\n\nevent SetPrivileged:\n    user: address\n    privileged: bool\n\n\nevent Killed:\n    balance: uint256\n\n\nevent Sweep:\n    token: address\n    amount: uint256\n\n\n# ============================================================================================\n# View functions\n# ============================================================================================\n\n\n@external\n@view\ndef coin_required(amount: uint256, weeks: uint256) -> uint256:\n    \"\"\"\n    @notice Estimate the required amount of USA.D to redeem the amount of dASF for ASF\n    @param amount Amount of dASF\n    @param weeks Number of weeks to lock the ASF for\n    @return Amount of USA.D required\n    \"\"\"\n    ...\n\n\n@external\n@view\ndef discount(weeks: uint256) -> uint256:\n    \"\"\"\n    @notice Get the discount for a given number of weeks\n    @param weeks Number of weeks to lock the ASF for\n    @return Discount in percentage (18 decimals)\n    \"\"\"\n    ...\n\n\n@external\n@view\ndef latest_price() -> uint256:\n    \"\"\"\n    @notice Get the latest price of ASF in USA.D\n    @return Price of ASF in USA.D (18 decimals)\n    \"\"\"\n    ...\n\n\n# ============================================================================================\n# Mutative functions\n# ============================================================================================\n\n\n@external\ndef redeem(\n    amount: uint256,\n    weeks: uint256,\n    max_coin_required: uint256 = max_value(uint256),\n    recipient: address = msg.sender,\n):\n    \"\"\"\n    @notice Redeem your dASF for ASF using a USA.D\n    @param amount amount of dASF to spend\n    @param weeks number of weeks to lock the ASF for\n    @param max_coin_required maximum amount of USA.d to pay\n    @param recipient of the exercised ASF\n    \"\"\"\n    ...\n\n\n# ============================================================================================\n# Privileged user functions\n# ============================================================================================\n\n\n@external\ndef privileged_redeem(amount: uint256, recipient: address = msg.sender):\n    \"\"\"\n    @notice Redeem your dASF for ASF for free\n    @param amount amount of dASF to spend\n    @param recipient of the exercised ASF\n    \"\"\"\n    ...\n\n\n# ============================================================================================\n# Owner functions\n# ============================================================================================\n\n\n@external\ndef set_payee(new_payee: address):\n    \"\"\"\n    @notice set the payee of the USA.D used for redemptions\n    @param new_payee the new payee\n    \"\"\"\n    ...\n\n\n@external\ndef set_discount(min_discount: uint256, max_discount: uint256):\n    \"\"\"\n    @notice set the min and max discount for redemptions\n    @param min_discount the minimum discount in percentage (18 decimals)\n    @param max_discount the maximum discount in percentage (18 decimals)\n    \"\"\"\n    ...\n\n\n@external\ndef set_min_lock_weeks(min_lock_weeks: uint256):\n    \"\"\"\n    @notice set the minimum lock weeks for redemptions\n    @param min_lock_weeks the minimum lock weeks\n    \"\"\"\n    ...\n\n\n@external\ndef set_privileged(user: address, privileged: bool):\n    \"\"\"\n    @notice set the privileged status of a user\n    @param user the user to set\n    @param privileged the privileged status\n    \"\"\"\n    ...\n\n\n@external\ndef kill():\n    \"\"\"\n    @dev stop the contract from being used and reclaim ASF\n    \"\"\"\n    ...\n\n\n@external\ndef sweep(token: address) -> uint256:\n    \"\"\"\n    @notice sweep any token other than ASF to the owner\n    @param token address of the token to sweep\n    @return amount of token swept\n    \"\"\"\n    ...\n",
      "sha256sum": "05f049413a445228b47c50665b43d4658681d6bde564f1c386af8e9a8d87e254"
    },
    "src/interfaces/IBalancerVault.vyi": {
      "content": "# @version 0.4.1\n\nMAX_ASSETS_LENGTH: constant(uint256) = 1\nMAX_BYTES_LENGTH: constant(uint256) = 32\n\n\n@external\ndef flashLoan(\n    recipient: address,\n    tokens: DynArray[address, MAX_ASSETS_LENGTH],\n    amounts: DynArray[uint256, MAX_ASSETS_LENGTH],\n    userData: Bytes[MAX_BYTES_LENGTH],\n):\n    ...\n",
      "sha256sum": "f10b933bc4945e26eec9fe82ffca1315cbed5be5798a9501fd0f010e35966811"
    },
    "src/interfaces/IFlashLoanRecipient.vyi": {
      "content": "# @version 0.4.1\n\nMAX_ASSETS_LENGTH: constant(uint256) = 1\nMAX_BYTES_LENGTH: constant(uint256) = 32\n\n\n@external\ndef receiveFlashLoan(\n    tokens: DynArray[address, MAX_ASSETS_LENGTH],\n    amounts: DynArray[uint256, MAX_ASSETS_LENGTH],\n    feeAmounts: DynArray[uint256, MAX_ASSETS_LENGTH],\n    userData: Bytes[MAX_BYTES_LENGTH],\n):\n    ...\n",
      "sha256sum": "6b05f2e1e8444c8e6ae35846a92076e2cae878349e890eadec0271b836a47979"
    },
    "src/flash_dump.vy": {
      "content": "# @version 0.4.1\n\n\"\"\"\n@title dASF Flash Dump\n@license MIT\n@author asymmetry.finance (johnnyonline)\n@notice\n    flash_dump.vy is used to redeem dASF using a flash loan\n    and instantly dump the ASF for USA.d\n\"\"\"\n\nfrom ethereum.ercs import IERC20\n\nfrom interfaces import ICurveCryptoPool\nfrom interfaces import ICurveStablePool\nfrom interfaces import IRedemption\nfrom interfaces import IBalancerVault\nfrom interfaces import IFlashLoanRecipient\n\n# ============================================================================================\n# Interfaces\n# ============================================================================================\n\n\nimplements: IFlashLoanRecipient\n\n\n# ============================================================================================\n# Constants\n# ============================================================================================\n\n\nUSDC_DECIMALS_DIFF: constant(uint256) = 10**12\nSLIPPAGE_PRECISION: constant(uint256) = 10_000\nMAX_ASSETS_LENGTH: constant(uint256) = 1\nMAX_BYTES_LENGTH: constant(uint256) = 32\n\n# Tokens\nUSAD: immutable(IERC20)\nASF: constant(IERC20) = IERC20(0x59a529070fBb61e6D6c91f952CcB7f35c34Cf8Aa)\nUSDC: constant(IERC20) = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)\nWETH: constant(IERC20) = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)\n\n# Curve USA.d/USDC pool\nUSAD_USDC_CURVE_POOL_USAD_INDEX: constant(int128) = 0\nUSAD_USDC_CURVE_POOL_USDC_INDEX: constant(int128) = 1\nUSAD_USDC_CURVE_POOL: immutable(ICurveStablePool)\n\n# Curve ASF/ETH pool\nASF_ETH_CURVE_POOL_ASF_INDEX: constant(uint256) = 1\nASF_ETH_CURVE_POOL_WETH_INDEX: constant(uint256) = 0\nASF_WETH_CURVE_POOL: constant(ICurveCryptoPool) = ICurveCryptoPool(\n    0x3D0d331390D14DF42c16FC20700F7e6Ad4849c50\n)\n\n# Curve TriCrypto pool\nTRICRYPTO_POOL_WETH_INDEX: constant(uint256) = 2\nTRICRYPTO_POOL_USDC_INDEX: constant(uint256) = 0\nTRICRYPTO_POOL: constant(ICurveCryptoPool) = ICurveCryptoPool(\n    0x7F86Bf177Dd4F3494b841a37e810A34dD56c829B\n)\n\n# Balancer\nBALANCER_VAULT: constant(IBalancerVault) = IBalancerVault(\n    0xBA12222222228d8Ba445958a75a0704d566BF2C8\n)\n\n\n# ============================================================================================\n# Immutable\n# ============================================================================================\n\n\nDASF: immutable(IERC20)\nREDEMPTION: immutable(IRedemption)\n\n\n# ============================================================================================\n# Constructor\n# ============================================================================================\n\n\n# @todo -- once usa.d is deployed, make `USAD` and `USAD_USDC_CURVE_POOL` constant\n@deploy\ndef __init__(\n    dasf: address,\n    redemption: address,\n):\n    \"\"\"\n    @notice Initialize the contract\n    @param dasf Address of the dASF token\n    @param redemption Address of the Redemption contract\n    \"\"\"\n    USAD = IERC20(0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E) # crvUSD\n    DASF = IERC20(dasf)\n    REDEMPTION = IRedemption(redemption)\n    USAD_USDC_CURVE_POOL = ICurveStablePool(0x4DEcE678ceceb27446b35C672dC7d61F30bAD69E) # USDC/crvUSD\n\n    self._max_approve(DASF, REDEMPTION.address)\n    self._max_approve(USAD, REDEMPTION.address)\n    self._max_approve(USDC, USAD_USDC_CURVE_POOL.address)\n    self._max_approve(ASF, ASF_WETH_CURVE_POOL.address)\n    self._max_approve(WETH, TRICRYPTO_POOL.address)\n\n\n# ============================================================================================\n# Mutative functions\n# ============================================================================================\n\n\n@external\ndef flash_dump(\n    amount: uint256,\n    slippage: uint256,\n    min_out: uint256,\n    recipient: address = msg.sender,\n):\n    \"\"\"\n    @notice Flash dump dASF for USA.d\n    @param amount Amount of dASF to redeem\n    @param slippage Slippage tolerance\n    @param min_out Minimum amount of USA.d to receive\n    @param recipient Address to receive USA.d\n    \"\"\"\n    # calc coin required + slippage\n    coin_required: uint256 = staticcall REDEMPTION.coin_required(amount, 0)\n    flash_loan_amount: uint256 = (\n        coin_required * slippage // SLIPPAGE_PRECISION\n    ) // USDC_DECIMALS_DIFF\n\n    # pull dASF\n    assert extcall DASF.transferFrom(\n        msg.sender, self, amount, default_return_value=True\n    )\n\n    # swap dASF for USA.d\n    extcall BALANCER_VAULT.flashLoan(\n        self,\n        [USDC.address],\n        [flash_loan_amount],\n        abi_encode(amount),\n    )\n\n    # transfer USA.d to recipient\n    balance: uint256 = staticcall USAD.balanceOf(self)\n    assert balance >= min_out, \"slippage rekt you\"\n    assert extcall USAD.transfer(recipient, balance, default_return_value=True)\n\n\n@external\ndef receiveFlashLoan(\n    tokens: DynArray[address, MAX_ASSETS_LENGTH],\n    amounts: DynArray[uint256, MAX_ASSETS_LENGTH],\n    feeAmounts: DynArray[uint256, MAX_ASSETS_LENGTH],\n    userData: Bytes[MAX_BYTES_LENGTH],\n):\n    \"\"\"\n    @notice Receive flash loan from Balancer Vault\n            swap dASF for USA.d using several Curve pools\n            and repay the flash loan\n    @param tokens Array of tokens\n    @param amounts Array of amounts\n    @param feeAmounts Array of fee amounts\n    @param userData User data\n    \"\"\"\n    amount_to_repay: uint256 = amounts[0]\n\n    # USDC --> USA.d\n    extcall USAD_USDC_CURVE_POOL.exchange(\n        USAD_USDC_CURVE_POOL_USDC_INDEX,\n        USAD_USDC_CURVE_POOL_USAD_INDEX,\n        amount_to_repay,\n        0,\n    )\n\n    # dASF --> ASF\n    amount: uint256 = abi_decode(userData, uint256)\n    extcall REDEMPTION.redeem(amount, 0)\n\n    # ASF --> WETH\n    amount = extcall ASF_WETH_CURVE_POOL.exchange(\n        ASF_ETH_CURVE_POOL_ASF_INDEX,\n        ASF_ETH_CURVE_POOL_WETH_INDEX,\n        amount,\n        0,\n    )\n\n    # WETH --> USDC\n    available_to_repay: uint256 = extcall TRICRYPTO_POOL.exchange(\n        TRICRYPTO_POOL_WETH_INDEX,\n        TRICRYPTO_POOL_USDC_INDEX,\n        amount,\n        0,\n    )\n\n    # repay flash loan\n    assert extcall USDC.transfer(\n        BALANCER_VAULT.address, amount_to_repay, default_return_value=True\n    )\n\n    # USDC --> USA.d\n    extcall USAD_USDC_CURVE_POOL.exchange(\n        USAD_USDC_CURVE_POOL_USDC_INDEX,\n        USAD_USDC_CURVE_POOL_USAD_INDEX,\n        staticcall USDC.balanceOf(self),\n        0,\n    )\n\n\n# ============================================================================================\n# Internal functions\n# ============================================================================================\n\n\n@internal\ndef _max_approve(token: IERC20, spender: address):\n    assert extcall token.approve(\n        spender, max_value(uint256), default_return_value=True\n    )\n",
      "sha256sum": "d6e080e6a11df6fda86e874c569d3f85bff5381866b0292857800e395b42706b"
    }
  },
  "settings": {
    "outputSelection": {
      "src/flash_dump.vy": [
        "evm.bytecode",
        "evm.deployedBytecode",
        "abi"
      ]
    },
    "search_paths": [
      "."
    ]
  },
  "compiler_version": "v0.4.1+commit.8a93dd27",
  "integrity": "850e9c159d04acdbfdac16bbf8e77532d148e0a66b62b36f0142059d0913a4e1"
}}