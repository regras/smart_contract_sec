{{
  "language": "Solidity",
  "sources": {
    "@synthetixio/core-contracts/contracts/errors/AccessError.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\n/**\n * @title Library for access related errors.\n */\nlibrary AccessError {\n    /**\n     * @dev Thrown when an address tries to perform an unauthorized action.\n     * @param addr The address that attempts the action.\n     */\n    error Unauthorized(address addr);\n}\n"
    },
    "@synthetixio/core-contracts/contracts/errors/AddressError.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\n/**\n * @title Library for address related errors.\n */\nlibrary AddressError {\n    /**\n     * @dev Thrown when a zero address was passed as a function parameter (0x0000000000000000000000000000000000000000).\n     */\n    error ZeroAddress();\n\n    /**\n     * @dev Thrown when an address representing a contract is expected, but no code is found at the address.\n     * @param contr The address that was expected to be a contract.\n     */\n    error NotAContract(address contr);\n}\n"
    },
    "@synthetixio/core-contracts/contracts/errors/ChangeError.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\n/**\n * @title Library for change related errors.\n */\nlibrary ChangeError {\n    /**\n     * @dev Thrown when a change is expected but none is detected.\n     */\n    error NoChange();\n}\n"
    },
    "@synthetixio/core-contracts/contracts/interfaces/IERC20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\n/**\n * @title ERC20 token implementation.\n */\ninterface IERC20 {\n    /**\n     * @notice Emitted when tokens have been transferred.\n     * @param from The address that originally owned the tokens.\n     * @param to The address that received the tokens.\n     * @param amount The number of tokens that were transferred.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /**\n     * @notice Emitted when a user has provided allowance to another user for transferring tokens on its behalf.\n     * @param owner The address that is providing the allowance.\n     * @param spender The address that received the allowance.\n     * @param amount The number of tokens that were added to `spender`'s allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /**\n     * @notice Thrown when the address interacting with the contract does not have sufficient allowance to transfer tokens from another contract.\n     * @param required The necessary allowance.\n     * @param existing The current allowance.\n     */\n    error InsufficientAllowance(uint256 required, uint256 existing);\n\n    /**\n     * @notice Thrown when the address interacting with the contract does not have sufficient tokens.\n     * @param required The necessary balance.\n     * @param existing The current balance.\n     */\n    error InsufficientBalance(uint256 required, uint256 existing);\n\n    /**\n     * @notice Retrieves the name of the token, e.g. \"Synthetix Network Token\".\n     * @return A string with the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @notice Retrieves the symbol of the token, e.g. \"SNX\".\n     * @return A string with the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @notice Retrieves the number of decimals used by the token. The default is 18.\n     * @return The number of decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @notice Returns the total number of tokens in circulation (minted - burnt).\n     * @return The total number of tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Returns the balance of a user.\n     * @param owner The address whose balance is being retrieved.\n     * @return The number of tokens owned by the user.\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @notice Returns how many tokens a user has allowed another user to transfer on its behalf.\n     * @param owner The user who has given the allowance.\n     * @param spender The user who was given the allowance.\n     * @return The amount of tokens `spender` can transfer on `owner`'s behalf.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @notice Transfer tokens from one address to another.\n     * @param to The address that will receive the tokens.\n     * @param amount The amount of tokens to be transferred.\n     * @return A boolean which is true if the operation succeeded.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Allows users to provide allowance to other users so that they can transfer tokens on their behalf.\n     * @param spender The address that is receiving the allowance.\n     * @param amount The amount of tokens that are being added to the allowance.\n     * @return A boolean which is true if the operation succeeded.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @notice Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**\n     * @notice Allows a user who has been given allowance to transfer tokens on another user's behalf.\n     * @param from The address that owns the tokens that are being transferred.\n     * @param to The address that will receive the tokens.\n     * @param amount The number of tokens to transfer.\n     * @return A boolean which is true if the operation succeeded.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@synthetixio/core-contracts/contracts/interfaces/IOwnable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\n/**\n * @title Contract for facilitating ownership by a single address.\n */\ninterface IOwnable {\n    /**\n     * @notice Thrown when an address tries to accept ownership but has not been nominated.\n     * @param addr The address that is trying to accept ownership.\n     */\n    error NotNominated(address addr);\n\n    /**\n     * @notice Emitted when an address has been nominated.\n     * @param newOwner The address that has been nominated.\n     */\n    event OwnerNominated(address newOwner);\n\n    /**\n     * @notice Emitted when the owner of the contract has changed.\n     * @param oldOwner The previous owner of the contract.\n     * @param newOwner The new owner of the contract.\n     */\n    event OwnerChanged(address oldOwner, address newOwner);\n\n    /**\n     * @notice Allows a nominated address to accept ownership of the contract.\n     * @dev Reverts if the caller is not nominated.\n     */\n    function acceptOwnership() external;\n\n    /**\n     * @notice Allows the current owner to nominate a new owner.\n     * @dev The nominated owner will have to call `acceptOwnership` in a separate transaction in order to finalize the action and become the new contract owner.\n     * @param newNominatedOwner The address that is to become nominated.\n     */\n    function nominateNewOwner(address newNominatedOwner) external;\n\n    /**\n     * @notice Allows a nominated owner to reject the nomination.\n     */\n    function renounceNomination() external;\n\n    /**\n     * @notice Returns the current owner of the contract.\n     */\n    function owner() external view returns (address);\n\n    /**\n     * @notice Returns the current nominated owner of the contract.\n     * @dev Only one address can be nominated at a time.\n     */\n    function nominatedOwner() external view returns (address);\n}\n"
    },
    "@synthetixio/core-contracts/contracts/interfaces/IUUPSImplementation.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\n/**\n * @title Contract to be used as the implementation of a Universal Upgradeable Proxy Standard (UUPS) proxy.\n *\n * Important: A UUPS proxy requires its upgradeability functions to be in the implementation as opposed to the proxy. This means that if the proxy is upgraded to an implementation that does not support this interface, it will no longer be upgradeable.\n */\ninterface IUUPSImplementation {\n    /**\n     * @notice Thrown when an incoming implementation will not be able to receive future upgrades.\n     */\n    error ImplementationIsSterile(address implementation);\n\n    /**\n     * @notice Thrown intentionally when testing future upgradeability of an implementation.\n     */\n    error UpgradeSimulationFailed();\n\n    /**\n     * @notice Emitted when the implementation of the proxy has been upgraded.\n     * @param self The address of the proxy whose implementation was upgraded.\n     * @param implementation The address of the proxy's new implementation.\n     */\n    event Upgraded(address indexed self, address implementation);\n\n    /**\n     * @notice Allows the proxy to be upgraded to a new implementation.\n     * @param newImplementation The address of the proxy's new implementation.\n     * @dev Will revert if `newImplementation` is not upgradeable.\n     * @dev The implementation of this function needs to be protected by some sort of access control such as `onlyOwner`.\n     */\n    function upgradeTo(address newImplementation) external;\n\n    /**\n     * @notice Function used to determine if a new implementation will be able to receive future upgrades in `upgradeTo`.\n     * @param newImplementation The address of the new implementation being tested for future upgradeability.\n     * @dev This function will always revert, but will revert with different error messages. The function `upgradeTo` uses this error to determine the future upgradeability of the implementation in question.\n     */\n    function simulateUpgradeTo(address newImplementation) external;\n\n    /**\n     * @notice Retrieves the current implementation of the proxy.\n     * @return The address of the current implementation.\n     */\n    function getImplementation() external view returns (address);\n}\n"
    },
    "@synthetixio/core-contracts/contracts/ownership/Ownable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\nimport \"./OwnableStorage.sol\";\nimport \"../interfaces/IOwnable.sol\";\nimport \"../errors/AddressError.sol\";\nimport \"../errors/ChangeError.sol\";\n\n/**\n * @title Contract for facilitating ownership by a single address.\n * See IOwnable.\n */\ncontract Ownable is IOwnable {\n    constructor(address initialOwner) {\n        OwnableStorage.load().owner = initialOwner;\n    }\n\n    /**\n     * @inheritdoc IOwnable\n     */\n    function acceptOwnership() public override {\n        OwnableStorage.Data storage store = OwnableStorage.load();\n\n        address currentNominatedOwner = store.nominatedOwner;\n        if (msg.sender != currentNominatedOwner) {\n            revert NotNominated(msg.sender);\n        }\n\n        emit OwnerChanged(store.owner, currentNominatedOwner);\n        store.owner = currentNominatedOwner;\n\n        store.nominatedOwner = address(0);\n    }\n\n    /**\n     * @inheritdoc IOwnable\n     */\n    function nominateNewOwner(address newNominatedOwner) public override onlyOwner {\n        OwnableStorage.Data storage store = OwnableStorage.load();\n\n        if (newNominatedOwner == address(0)) {\n            revert AddressError.ZeroAddress();\n        }\n\n        if (newNominatedOwner == store.nominatedOwner) {\n            revert ChangeError.NoChange();\n        }\n\n        store.nominatedOwner = newNominatedOwner;\n        emit OwnerNominated(newNominatedOwner);\n    }\n\n    /**\n     * @inheritdoc IOwnable\n     */\n    function renounceNomination() external override {\n        OwnableStorage.Data storage store = OwnableStorage.load();\n\n        if (store.nominatedOwner != msg.sender) {\n            revert NotNominated(msg.sender);\n        }\n\n        store.nominatedOwner = address(0);\n    }\n\n    /**\n     * @inheritdoc IOwnable\n     */\n    function owner() external view override returns (address) {\n        return OwnableStorage.load().owner;\n    }\n\n    /**\n     * @inheritdoc IOwnable\n     */\n    function nominatedOwner() external view override returns (address) {\n        return OwnableStorage.load().nominatedOwner;\n    }\n\n    /**\n     * @dev Reverts if the caller is not the owner.\n     */\n    modifier onlyOwner() {\n        OwnableStorage.onlyOwner();\n\n        _;\n    }\n}\n"
    },
    "@synthetixio/core-contracts/contracts/ownership/OwnableStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\nimport \"../errors/AccessError.sol\";\n\nlibrary OwnableStorage {\n    bytes32 private constant _SLOT_OWNABLE_STORAGE =\n        keccak256(abi.encode(\"io.synthetix.core-contracts.Ownable\"));\n\n    struct Data {\n        address owner;\n        address nominatedOwner;\n    }\n\n    function load() internal pure returns (Data storage store) {\n        bytes32 s = _SLOT_OWNABLE_STORAGE;\n        assembly {\n            store.slot := s\n        }\n    }\n\n    function onlyOwner() internal view {\n        if (msg.sender != getOwner()) {\n            revert AccessError.Unauthorized(msg.sender);\n        }\n    }\n\n    function getOwner() internal view returns (address) {\n        return OwnableStorage.load().owner;\n    }\n}\n"
    },
    "@synthetixio/core-contracts/contracts/proxy/ProxyStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\ncontract ProxyStorage {\n    bytes32 private constant _SLOT_PROXY_STORAGE =\n        keccak256(abi.encode(\"io.synthetix.core-contracts.Proxy\"));\n\n    struct ProxyStore {\n        address implementation;\n        bool simulatingUpgrade;\n    }\n\n    function _proxyStore() internal pure returns (ProxyStore storage store) {\n        bytes32 s = _SLOT_PROXY_STORAGE;\n        assembly {\n            store.slot := s\n        }\n    }\n}\n"
    },
    "@synthetixio/core-contracts/contracts/proxy/UUPSImplementation.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\nimport \"../interfaces/IUUPSImplementation.sol\";\nimport \"../errors/AddressError.sol\";\nimport \"../errors/ChangeError.sol\";\nimport \"../utils/AddressUtil.sol\";\nimport \"./ProxyStorage.sol\";\n\nabstract contract UUPSImplementation is IUUPSImplementation, ProxyStorage {\n    /**\n     * @inheritdoc IUUPSImplementation\n     */\n    function simulateUpgradeTo(address newImplementation) public override {\n        ProxyStore storage store = _proxyStore();\n\n        store.simulatingUpgrade = true;\n\n        address currentImplementation = store.implementation;\n        store.implementation = newImplementation;\n\n        (bool rollbackSuccessful, ) = newImplementation.delegatecall(\n            abi.encodeCall(this.upgradeTo, (currentImplementation))\n        );\n\n        if (!rollbackSuccessful || _proxyStore().implementation != currentImplementation) {\n            revert UpgradeSimulationFailed();\n        }\n\n        store.simulatingUpgrade = false;\n\n        // solhint-disable-next-line reason-string\n        revert();\n    }\n\n    /**\n     * @inheritdoc IUUPSImplementation\n     */\n    function getImplementation() external view override returns (address) {\n        return _proxyStore().implementation;\n    }\n\n    function _upgradeTo(address newImplementation) internal virtual {\n        if (newImplementation == address(0)) {\n            revert AddressError.ZeroAddress();\n        }\n\n        if (!AddressUtil.isContract(newImplementation)) {\n            revert AddressError.NotAContract(newImplementation);\n        }\n\n        ProxyStore storage store = _proxyStore();\n\n        if (newImplementation == store.implementation) {\n            revert ChangeError.NoChange();\n        }\n\n        if (!store.simulatingUpgrade && _implementationIsSterile(newImplementation)) {\n            revert ImplementationIsSterile(newImplementation);\n        }\n\n        store.implementation = newImplementation;\n\n        emit Upgraded(address(this), newImplementation);\n    }\n\n    function _implementationIsSterile(\n        address candidateImplementation\n    ) internal virtual returns (bool) {\n        (bool simulationReverted, bytes memory simulationResponse) = address(this).delegatecall(\n            abi.encodeCall(this.simulateUpgradeTo, (candidateImplementation))\n        );\n\n        return\n            !simulationReverted &&\n            keccak256(abi.encodePacked(simulationResponse)) ==\n            keccak256(abi.encodePacked(UpgradeSimulationFailed.selector));\n    }\n}\n"
    },
    "@synthetixio/core-contracts/contracts/utils/AddressUtil.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\nlibrary AddressUtil {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n\n        assembly {\n            size := extcodesize(account)\n        }\n\n        return size > 0;\n    }\n}\n"
    },
    "@synthetixio/core-contracts/contracts/utils/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/* solhint-disable meta-transactions/no-msg-sender */\n/* solhint-disable meta-transactions/no-msg-data */\n\nlibrary ERC2771Context {\n    // This is the trusted-multicall-forwarder. The address is constant due to CREATE2.\n    address private constant TRUSTED_FORWARDER = 0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e;\n\n    function _msgSender() internal view returns (address sender) {\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n\n    function _msgData() internal view returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n\n    function isTrustedForwarder(address forwarder) internal pure returns (bool) {\n        return forwarder == TRUSTED_FORWARDER;\n    }\n\n    function trustedForwarder() internal pure returns (address) {\n        return TRUSTED_FORWARDER;\n    }\n}\n"
    },
    "contracts/interfaces/external/IV3CoreProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.7.1. SEE SOURCE BELOW. !!\npragma solidity ^0.8.4;\n\ninterface IV3CoreProxy {\n    error ImplementationIsSterile(address implementation);\n    error NoChange();\n    error NotAContract(address contr);\n    error NotNominated(address addr);\n    error Unauthorized(address addr);\n    error UpgradeSimulationFailed();\n    error ZeroAddress();\n    event OwnerChanged(address oldOwner, address newOwner);\n    event OwnerNominated(address newOwner);\n    event Upgraded(address indexed self, address implementation);\n\n    function acceptOwnership() external;\n\n    function getImplementation() external view returns (address);\n\n    function nominateNewOwner(address newNominatedOwner) external;\n\n    function nominatedOwner() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function renounceNomination() external;\n\n    function simulateUpgradeTo(address newImplementation) external;\n\n    function upgradeTo(address newImplementation) external;\n\n    error ValueAlreadyInSet();\n    error ValueNotInSet();\n    event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll);\n    event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account);\n    event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account);\n    event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers);\n    event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll);\n\n    function addToFeatureFlagAllowlist(bytes32 feature, address account) external;\n\n    function getDeniers(bytes32 feature) external view returns (address[] memory);\n\n    function getFeatureFlagAllowAll(bytes32 feature) external view returns (bool);\n\n    function getFeatureFlagAllowlist(bytes32 feature) external view returns (address[] memory);\n\n    function getFeatureFlagDenyAll(bytes32 feature) external view returns (bool);\n\n    function isFeatureAllowed(bytes32 feature, address account) external view returns (bool);\n\n    function removeFromFeatureFlagAllowlist(bytes32 feature, address account) external;\n\n    function setDeniers(bytes32 feature, address[] memory deniers) external;\n\n    function setFeatureFlagAllowAll(bytes32 feature, bool allowAll) external;\n\n    function setFeatureFlagDenyAll(bytes32 feature, bool denyAll) external;\n\n    error FeatureUnavailable(bytes32 which);\n    error InvalidAccountId(uint128 accountId);\n    error InvalidPermission(bytes32 permission);\n    error OnlyAccountTokenProxy(address origin);\n    error PermissionDenied(uint128 accountId, bytes32 permission, address target);\n    error PermissionNotGranted(uint128 accountId, bytes32 permission, address user);\n    error PositionOutOfBounds();\n    event AccountCreated(uint128 indexed accountId, address indexed owner);\n    event PermissionGranted(\n        uint128 indexed accountId,\n        bytes32 indexed permission,\n        address indexed user,\n        address sender\n    );\n    event PermissionRevoked(\n        uint128 indexed accountId,\n        bytes32 indexed permission,\n        address indexed user,\n        address sender\n    );\n\n    function createAccount() external returns (uint128 accountId);\n\n    function createAccount(uint128 requestedAccountId) external;\n\n    function getAccountLastInteraction(uint128 accountId) external view returns (uint256);\n\n    function getAccountOwner(uint128 accountId) external view returns (address);\n\n    function getAccountPermissions(\n        uint128 accountId\n    ) external view returns (IAccountModule.AccountPermissions[] memory accountPerms);\n\n    function getAccountTokenAddress() external view returns (address);\n\n    function grantPermission(uint128 accountId, bytes32 permission, address user) external;\n\n    function hasPermission(\n        uint128 accountId,\n        bytes32 permission,\n        address user\n    ) external view returns (bool);\n\n    function isAuthorized(\n        uint128 accountId,\n        bytes32 permission,\n        address user\n    ) external view returns (bool);\n\n    function notifyAccountTransfer(address to, uint128 accountId) external;\n\n    function renouncePermission(uint128 accountId, bytes32 permission) external;\n\n    function revokePermission(uint128 accountId, bytes32 permission, address user) external;\n\n    error AccountNotFound(uint128 accountId);\n    error EmptyDistribution();\n    error InsufficientCollateralRatio(\n        uint256 collateralValue,\n        uint256 debt,\n        uint256 ratio,\n        uint256 minRatio\n    );\n    error MarketNotFound(uint128 marketId);\n    error NotFundedByPool(uint256 marketId, uint256 poolId);\n    error OverflowInt256ToInt128();\n    error OverflowInt256ToUint256();\n    error OverflowUint128ToInt128();\n    error OverflowUint256ToInt256();\n    error OverflowUint256ToUint128();\n    event DebtAssociated(\n        uint128 indexed marketId,\n        uint128 indexed poolId,\n        address indexed collateralType,\n        uint128 accountId,\n        uint256 amount,\n        int256 updatedDebt\n    );\n\n    function associateDebt(\n        uint128 marketId,\n        uint128 poolId,\n        address collateralType,\n        uint128 accountId,\n        uint256 amount\n    ) external returns (int256);\n\n    error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual);\n    error MissingAssociatedSystem(bytes32 id);\n    event AssociatedSystemSet(\n        bytes32 indexed kind,\n        bytes32 indexed id,\n        address proxy,\n        address impl\n    );\n\n    function getAssociatedSystem(bytes32 id) external view returns (address addr, bytes32 kind);\n\n    function initOrUpgradeNft(\n        bytes32 id,\n        string memory name,\n        string memory symbol,\n        string memory uri,\n        address impl\n    ) external;\n\n    function initOrUpgradeToken(\n        bytes32 id,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address impl\n    ) external;\n\n    function registerUnmanagedSystem(bytes32 id, address endpoint) external;\n\n    error AccountActivityTimeoutPending(\n        uint128 accountId,\n        uint256 currentTime,\n        uint256 requiredTime\n    );\n    error CollateralDepositDisabled(address collateralType);\n    error CollateralNotFound();\n    error FailedTransfer(address from, address to, uint256 value);\n    error InsufficientAccountCollateral(uint256 amount);\n    error InsufficientAllowance(uint256 required, uint256 existing);\n    error InvalidParameter(string parameter, string reason);\n    error OverflowUint256ToUint64();\n    error PrecisionLost(uint256 tokenAmount, uint8 decimals);\n    event CollateralLockCreated(\n        uint128 indexed accountId,\n        address indexed collateralType,\n        uint256 tokenAmount,\n        uint64 expireTimestamp\n    );\n    event CollateralLockExpired(\n        uint128 indexed accountId,\n        address indexed collateralType,\n        uint256 tokenAmount,\n        uint64 expireTimestamp\n    );\n    event Deposited(\n        uint128 indexed accountId,\n        address indexed collateralType,\n        uint256 tokenAmount,\n        address indexed sender\n    );\n    event Withdrawn(\n        uint128 indexed accountId,\n        address indexed collateralType,\n        uint256 tokenAmount,\n        address indexed sender\n    );\n\n    function cleanExpiredLocks(\n        uint128 accountId,\n        address collateralType,\n        uint256 offset,\n        uint256 count\n    ) external returns (uint256 cleared);\n\n    function createLock(\n        uint128 accountId,\n        address collateralType,\n        uint256 amount,\n        uint64 expireTimestamp\n    ) external;\n\n    function deposit(uint128 accountId, address collateralType, uint256 tokenAmount) external;\n\n    function getAccountAvailableCollateral(\n        uint128 accountId,\n        address collateralType\n    ) external view returns (uint256);\n\n    function getAccountCollateral(\n        uint128 accountId,\n        address collateralType\n    ) external view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked);\n\n    function getLocks(\n        uint128 accountId,\n        address collateralType,\n        uint256 offset,\n        uint256 count\n    ) external view returns (CollateralLock.Data[] memory locks);\n\n    function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount) external;\n\n    event CollateralConfigured(address indexed collateralType, CollateralConfiguration.Data config);\n\n    function configureCollateral(CollateralConfiguration.Data memory config) external;\n\n    function getCollateralConfiguration(\n        address collateralType\n    ) external view returns (CollateralConfiguration.Data memory);\n\n    function getCollateralConfigurations(\n        bool hideDisabled\n    ) external view returns (CollateralConfiguration.Data[] memory);\n\n    function getCollateralPrice(address collateralType) external view returns (uint256);\n\n    error InsufficientDebt(int256 currentDebt);\n    error PoolNotFound(uint128 poolId);\n    event IssuanceFeePaid(\n        uint128 indexed accountId,\n        uint128 indexed poolId,\n        address collateralType,\n        uint256 feeAmount\n    );\n    event UsdBurned(\n        uint128 indexed accountId,\n        uint128 indexed poolId,\n        address collateralType,\n        uint256 amount,\n        address indexed sender\n    );\n    event UsdMinted(\n        uint128 indexed accountId,\n        uint128 indexed poolId,\n        address collateralType,\n        uint256 amount,\n        address indexed sender\n    );\n\n    function burnUsd(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType,\n        uint256 amount\n    ) external;\n\n    function mintUsd(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType,\n        uint256 amount\n    ) external;\n\n    error CannotScaleEmptyMapping();\n    error IneligibleForLiquidation(\n        uint256 collateralValue,\n        int256 debt,\n        uint256 currentCRatio,\n        uint256 cratio\n    );\n    error InsufficientMappedAmount();\n    error MustBeVaultLiquidated();\n    error OverflowInt128ToUint128();\n    event Liquidation(\n        uint128 indexed accountId,\n        uint128 indexed poolId,\n        address indexed collateralType,\n        ILiquidationModule.LiquidationData liquidationData,\n        uint128 liquidateAsAccountId,\n        address sender\n    );\n    event VaultLiquidation(\n        uint128 indexed poolId,\n        address indexed collateralType,\n        ILiquidationModule.LiquidationData liquidationData,\n        uint128 liquidateAsAccountId,\n        address sender\n    );\n\n    function isPositionLiquidatable(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType\n    ) external returns (bool);\n\n    function isVaultLiquidatable(uint128 poolId, address collateralType) external returns (bool);\n\n    function liquidate(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType,\n        uint128 liquidateAsAccountId\n    ) external returns (ILiquidationModule.LiquidationData memory liquidationData);\n\n    function liquidateVault(\n        uint128 poolId,\n        address collateralType,\n        uint128 liquidateAsAccountId,\n        uint256 maxUsd\n    ) external returns (ILiquidationModule.LiquidationData memory liquidationData);\n\n    error InsufficientMarketCollateralDepositable(\n        uint128 marketId,\n        address collateralType,\n        uint256 tokenAmountToDeposit\n    );\n    error InsufficientMarketCollateralWithdrawable(\n        uint128 marketId,\n        address collateralType,\n        uint256 tokenAmountToWithdraw\n    );\n    event MarketCollateralDeposited(\n        uint128 indexed marketId,\n        address indexed collateralType,\n        uint256 tokenAmount,\n        address indexed sender\n    );\n    event MarketCollateralWithdrawn(\n        uint128 indexed marketId,\n        address indexed collateralType,\n        uint256 tokenAmount,\n        address indexed sender\n    );\n    event MaximumMarketCollateralConfigured(\n        uint128 indexed marketId,\n        address indexed collateralType,\n        uint256 systemAmount,\n        address indexed owner\n    );\n\n    function configureMaximumMarketCollateral(\n        uint128 marketId,\n        address collateralType,\n        uint256 amount\n    ) external;\n\n    function depositMarketCollateral(\n        uint128 marketId,\n        address collateralType,\n        uint256 tokenAmount\n    ) external;\n\n    function getMarketCollateralAmount(\n        uint128 marketId,\n        address collateralType\n    ) external view returns (uint256 collateralAmountD18);\n\n    function getMarketCollateralValue(uint128 marketId) external view returns (uint256);\n\n    function getMaximumMarketCollateral(\n        uint128 marketId,\n        address collateralType\n    ) external view returns (uint256);\n\n    function withdrawMarketCollateral(\n        uint128 marketId,\n        address collateralType,\n        uint256 tokenAmount\n    ) external;\n\n    error IncorrectMarketInterface(address market);\n    error NotEnoughLiquidity(uint128 marketId, uint256 amount);\n    event MarketRegistered(\n        address indexed market,\n        uint128 indexed marketId,\n        address indexed sender\n    );\n    event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount);\n    event MarketUsdDeposited(\n        uint128 indexed marketId,\n        address indexed target,\n        uint256 amount,\n        address indexed market\n    );\n    event MarketUsdWithdrawn(\n        uint128 indexed marketId,\n        address indexed target,\n        uint256 amount,\n        address indexed market\n    );\n    event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio);\n    event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime);\n\n    function depositMarketUsd(\n        uint128 marketId,\n        address target,\n        uint256 amount\n    ) external returns (uint256 feeAmount);\n\n    function distributeDebtToPools(uint128 marketId, uint256 maxIter) external returns (bool);\n\n    function getMarketCollateral(uint128 marketId) external view returns (uint256);\n\n    function getMarketDebtPerShare(uint128 marketId) external returns (int256);\n\n    function getMarketFees(\n        uint128,\n        uint256 amount\n    ) external view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount);\n\n    function getMarketMinDelegateTime(uint128 marketId) external view returns (uint32);\n\n    function getMarketNetIssuance(uint128 marketId) external view returns (int128);\n\n    function getMarketReportedDebt(uint128 marketId) external view returns (uint256);\n\n    function getMarketTotalDebt(uint128 marketId) external view returns (int256);\n\n    function getMinLiquidityRatio(uint128 marketId) external view returns (uint256);\n\n    function getOracleManager() external view returns (address);\n\n    function getUsdToken() external view returns (address);\n\n    function getWithdrawableMarketUsd(uint128 marketId) external view returns (uint256);\n\n    function isMarketCapacityLocked(uint128 marketId) external view returns (bool);\n\n    function registerMarket(address market) external returns (uint128 marketId);\n\n    function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime) external;\n\n    function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio) external;\n\n    function withdrawMarketUsd(\n        uint128 marketId,\n        address target,\n        uint256 amount\n    ) external returns (uint256 feeAmount);\n\n    function multicall(bytes[] memory data) external payable returns (bytes[] memory results);\n\n    event PoolApprovedAdded(uint256 poolId);\n    event PoolApprovedRemoved(uint256 poolId);\n    event PreferredPoolSet(uint256 poolId);\n\n    function addApprovedPool(uint128 poolId) external;\n\n    function getApprovedPools() external view returns (uint256[] memory);\n\n    function getPreferredPool() external view returns (uint128);\n\n    function removeApprovedPool(uint128 poolId) external;\n\n    function setPreferredPool(uint128 poolId) external;\n\n    error CapacityLocked(uint256 marketId);\n    error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining);\n    error PoolAlreadyExists(uint128 poolId);\n    event PoolConfigurationSet(\n        uint128 indexed poolId,\n        MarketConfiguration.Data[] markets,\n        address indexed sender\n    );\n    event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender);\n    event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender);\n    event PoolNominationRenounced(uint128 indexed poolId, address indexed owner);\n    event PoolNominationRevoked(uint128 indexed poolId, address indexed owner);\n    event PoolOwnerNominated(\n        uint128 indexed poolId,\n        address indexed nominatedOwner,\n        address indexed owner\n    );\n    event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner);\n    event SetMinLiquidityRatio(uint256 minLiquidityRatio);\n\n    function acceptPoolOwnership(uint128 poolId) external;\n\n    function createPool(uint128 requestedPoolId, address owner) external;\n\n    function getMinLiquidityRatio() external view returns (uint256);\n\n    function getNominatedPoolOwner(uint128 poolId) external view returns (address);\n\n    function getPoolConfiguration(\n        uint128 poolId\n    ) external view returns (MarketConfiguration.Data[] memory);\n\n    function getPoolName(uint128 poolId) external view returns (string memory poolName);\n\n    function getPoolOwner(uint128 poolId) external view returns (address);\n\n    function nominatePoolOwner(address nominatedOwner, uint128 poolId) external;\n\n    function renouncePoolNomination(uint128 poolId) external;\n\n    function revokePoolNomination(uint128 poolId) external;\n\n    function setMinLiquidityRatio(uint256 minLiquidityRatio) external;\n\n    function setPoolConfiguration(\n        uint128 poolId,\n        MarketConfiguration.Data[] memory newMarketConfigurations\n    ) external;\n\n    function setPoolName(uint128 poolId, string memory name) external;\n\n    error OverflowUint256ToUint32();\n    error OverflowUint32ToInt32();\n    error OverflowUint64ToInt64();\n    error RewardDistributorNotFound();\n    error RewardUnavailable(address distributor);\n    event RewardsClaimed(\n        uint128 indexed accountId,\n        uint128 indexed poolId,\n        address indexed collateralType,\n        address distributor,\n        uint256 amount\n    );\n    event RewardsDistributed(\n        uint128 indexed poolId,\n        address indexed collateralType,\n        address distributor,\n        uint256 amount,\n        uint256 start,\n        uint256 duration\n    );\n    event RewardsDistributorRegistered(\n        uint128 indexed poolId,\n        address indexed collateralType,\n        address indexed distributor\n    );\n    event RewardsDistributorRemoved(\n        uint128 indexed poolId,\n        address indexed collateralType,\n        address indexed distributor\n    );\n\n    function claimRewards(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType,\n        address distributor\n    ) external returns (uint256);\n\n    function distributeRewards(\n        uint128 poolId,\n        address collateralType,\n        uint256 amount,\n        uint64 start,\n        uint32 duration\n    ) external;\n\n    function getRewardRate(\n        uint128 poolId,\n        address collateralType,\n        address distributor\n    ) external view returns (uint256);\n\n    function registerRewardsDistributor(\n        uint128 poolId,\n        address collateralType,\n        address distributor\n    ) external;\n\n    function removeRewardsDistributor(\n        uint128 poolId,\n        address collateralType,\n        address distributor\n    ) external;\n\n    function updateRewards(\n        uint128 poolId,\n        address collateralType,\n        uint128 accountId\n    ) external returns (uint256[] memory, address[] memory);\n\n    function configureOracleManager(address oracleManagerAddress) external;\n\n    function getConfig(bytes32 k) external view returns (bytes32 v);\n\n    function registerCcip(address ccipSend, address ccipReceive, address ccipTokenPool) external;\n\n    function setConfig(bytes32 k, bytes32 v) external;\n\n    error InsufficientDelegation(uint256 minDelegation);\n    error InvalidCollateralAmount();\n    error InvalidLeverage(uint256 leverage);\n    event DelegationUpdated(\n        uint128 indexed accountId,\n        uint128 indexed poolId,\n        address collateralType,\n        uint256 amount,\n        uint256 leverage,\n        address indexed sender\n    );\n\n    function delegateCollateral(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType,\n        uint256 newCollateralAmountD18,\n        uint256 leverage\n    ) external;\n\n    function migrateDelegation(\n        uint128 accountId,\n        uint128 oldPoolId,\n        address collateralType,\n        uint128 newPoolId\n    ) external;\n\n    function getPosition(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType\n    )\n        external\n        returns (\n            uint256 collateralAmount,\n            uint256 collateralValue,\n            int256 debt,\n            uint256 collateralizationRatio\n        );\n\n    function getPositionCollateral(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType\n    ) external view returns (uint256 amount, uint256 value);\n\n    function getPositionCollateralRatio(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType\n    ) external returns (uint256);\n\n    function getPositionDebt(\n        uint128 accountId,\n        uint128 poolId,\n        address collateralType\n    ) external returns (int256);\n\n    function getVaultCollateral(\n        uint128 poolId,\n        address collateralType\n    ) external view returns (uint256 amount, uint256 value);\n\n    function getVaultCollateralRatio(\n        uint128 poolId,\n        address collateralType\n    ) external returns (uint256);\n\n    function getVaultDebt(uint128 poolId, address collateralType) external returns (int256);\n}\n\ninterface IAccountModule {\n    struct AccountPermissions {\n        address user;\n        bytes32[] permissions;\n    }\n}\n\ninterface CollateralLock {\n    struct Data {\n        uint128 amountD18;\n        uint64 lockExpirationTime;\n    }\n}\n\ninterface CollateralConfiguration {\n    struct Data {\n        bool depositingEnabled;\n        uint256 issuanceRatioD18;\n        uint256 liquidationRatioD18;\n        uint256 liquidationRewardD18;\n        bytes32 oracleNodeId;\n        address tokenAddress;\n        uint256 minDelegationD18;\n    }\n}\n\ninterface ILiquidationModule {\n    struct LiquidationData {\n        uint256 debtLiquidated;\n        uint256 collateralLiquidated;\n        uint256 amountRewarded;\n    }\n}\n\ninterface MarketConfiguration {\n    struct Data {\n        uint128 marketId;\n        uint128 weightD18;\n        int128 maxDebtShareValueD18;\n    }\n}\n\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\n/*\n[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationIsSterile\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoChange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NotNominated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpgradeSimulationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNominatedOwner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceNomination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"simulateUpgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ValueAlreadyInSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueNotInSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowAll\",\"type\":\"bool\"}],\"name\":\"FeatureFlagAllowAllSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeatureFlagAllowlistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeatureFlagAllowlistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"deniers\",\"type\":\"address[]\"}],\"name\":\"FeatureFlagDeniersReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"denyAll\",\"type\":\"bool\"}],\"name\":\"FeatureFlagDenyAllSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToFeatureFlagAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"}],\"name\":\"getDeniers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"}],\"name\":\"getFeatureFlagAllowAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"}],\"name\":\"getFeatureFlagAllowlist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"}],\"name\":\"getFeatureFlagDenyAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeatureAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromFeatureFlagAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"deniers\",\"type\":\"address[]\"}],\"name\":\"setDeniers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowAll\",\"type\":\"bool\"}],\"name\":\"setFeatureFlagAllowAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feature\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"denyAll\",\"type\":\"bool\"}],\"name\":\"setFeatureFlagDenyAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"which\",\"type\":\"bytes32\"}],\"name\":\"FeatureUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"}],\"name\":\"InvalidAccountId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"InvalidPermission\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"OnlyAccountTokenProxy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PermissionDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PermissionNotGranted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PermissionGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PermissionRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"requestedAccountId\",\"type\":\"uint128\"}],\"name\":\"createAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"}],\"name\":\"getAccountLastInteraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"}],\"name\":\"getAccountOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"}],\"name\":\"getAccountPermissions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"permissions\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IAccountModule.AccountPermissions[]\",\"name\":\"accountPerms\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"}],\"name\":\"notifyAccountTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"renouncePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"revokePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"}],\"name\":\"AccountNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDistribution\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"}],\"name\":\"InsufficientCollateralRatio\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"MarketNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"NotFundedByPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowInt256ToInt128\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowInt256ToUint256\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowUint128ToInt128\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowUint256ToInt256\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowUint256ToUint128\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"updatedDebt\",\"type\":\"int256\"}],\"name\":\"DebtAssociated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"associateDebt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"MismatchAssociatedSystemKind\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"MissingAssociatedSystem\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"AssociatedSystemSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAssociatedSystem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"initOrUpgradeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"initOrUpgradeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"endpoint\",\"type\":\"address\"}],\"name\":\"registerUnmanagedSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredTime\",\"type\":\"uint256\"}],\"name\":\"AccountActivityTimeoutPending\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"CollateralDepositDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAccountCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"existing\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"parameter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowUint256ToUint64\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"PrecisionLost\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"}],\"name\":\"CollateralLockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"}],\"name\":\"CollateralLockExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"cleanExpiredLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cleared\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getAccountAvailableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getAccountCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssigned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountD18\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lockExpirationTime\",\"type\":\"uint64\"}],\"internalType\":\"struct CollateralLock.Data[]\",\"name\":\"locks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"depositingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"issuanceRatioD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardD18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"oracleNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDelegationD18\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CollateralConfiguration.Data\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"CollateralConfigured\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"depositingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"issuanceRatioD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardD18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"oracleNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDelegationD18\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralConfiguration.Data\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"configureCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getCollateralConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"depositingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"issuanceRatioD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardD18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"oracleNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDelegationD18\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralConfiguration.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"hideDisabled\",\"type\":\"bool\"}],\"name\":\"getCollateralConfigurations\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"depositingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"issuanceRatioD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardD18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"oracleNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDelegationD18\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralConfiguration.Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"currentDebt\",\"type\":\"int256\"}],\"name\":\"InsufficientDebt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"IssuanceFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"UsdBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"UsdMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CannotScaleEmptyMapping\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"debt\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"currentCRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cratio\",\"type\":\"uint256\"}],\"name\":\"IneligibleForLiquidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientMappedAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeVaultLiquidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowInt128ToUint128\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRewarded\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ILiquidationModule.LiquidationData\",\"name\":\"liquidationData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidateAsAccountId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRewarded\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ILiquidationModule.LiquidationData\",\"name\":\"liquidationData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidateAsAccountId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VaultLiquidation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"isPositionLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"isVaultLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"liquidateAsAccountId\",\"type\":\"uint128\"}],\"name\":\"liquidate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRewarded\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidationModule.LiquidationData\",\"name\":\"liquidationData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"liquidateAsAccountId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"maxUsd\",\"type\":\"uint256\"}],\"name\":\"liquidateVault\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRewarded\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidationModule.LiquidationData\",\"name\":\"liquidationData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountToDeposit\",\"type\":\"uint256\"}],\"name\":\"InsufficientMarketCollateralDepositable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"InsufficientMarketCollateralWithdrawable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MarketCollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MarketCollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"systemAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MaximumMarketCollateralConfigured\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"configureMaximumMarketCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositMarketCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getMarketCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountD18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getMarketCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getMaximumMarketCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMarketCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"IncorrectMarketInterface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughLiquidity\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MarketRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MarketSystemFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketUsdDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketUsdWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLiquidityRatio\",\"type\":\"uint256\"}],\"name\":\"SetMarketMinLiquidityRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minDelegateTime\",\"type\":\"uint32\"}],\"name\":\"SetMinDelegateTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositMarketUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"maxIter\",\"type\":\"uint256\"}],\"name\":\"distributeDebtToPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getMarketCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getMarketDebtPerShare\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getMarketFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getMarketMinDelegateTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getMarketNetIssuance\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getMarketReportedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getMarketTotalDebt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getMinLiquidityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleManager\",\"outputs\":[{\"internalType\":\"contract IOracleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"getWithdrawableMarketUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"name\":\"isMarketCapacityLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"registerMarket\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"minDelegateTime\",\"type\":\"uint32\"}],\"name\":\"setMarketMinDelegateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidityRatio\",\"type\":\"uint256\"}],\"name\":\"setMinLiquidityRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMarketUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolApprovedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolApprovedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PreferredPoolSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"addApprovedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApprovedPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreferredPool\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"removeApprovedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"setPreferredPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"CapacityLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"timeRemaining\",\"type\":\"uint32\"}],\"name\":\"MinDelegationTimeoutPending\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"PoolAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"weightD18\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"maxDebtShareValueD18\",\"type\":\"int128\"}],\"indexed\":false,\"internalType\":\"struct MarketConfiguration.Data[]\",\"name\":\"markets\",\"type\":\"tuple[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PoolConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PoolNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PoolNominationRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PoolNominationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PoolOwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PoolOwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLiquidityRatio\",\"type\":\"uint256\"}],\"name\":\"SetMinLiquidityRatio\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"acceptPoolOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"requestedPoolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinLiquidityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"getNominatedPoolOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"getPoolConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"weightD18\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"maxDebtShareValueD18\",\"type\":\"int128\"}],\"internalType\":\"struct MarketConfiguration.Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"getPoolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"getPoolOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"nominatePoolOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"renouncePoolNomination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"name\":\"revokePoolNomination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLiquidityRatio\",\"type\":\"uint256\"}],\"name\":\"setMinLiquidityRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"marketId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"weightD18\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"maxDebtShareValueD18\",\"type\":\"int128\"}],\"internalType\":\"struct MarketConfiguration.Data[]\",\"name\":\"newMarketConfigurations\",\"type\":\"tuple[]\"}],\"name\":\"setPoolConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setPoolName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OverflowUint256ToUint32\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowUint32ToInt32\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowUint64ToInt64\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"RewardUnavailable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"registerRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"removeRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"}],\"name\":\"updateRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleManagerAddress\",\"type\":\"address\"}],\"name\":\"configureOracleManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"k\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"v\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ccipSend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccipReceive\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccipTokenPool\",\"type\":\"address\"}],\"name\":\"registerCcip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"k\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"v\",\"type\":\"bytes32\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDelegation\",\"type\":\"uint256\"}],\"name\":\"InsufficientDelegation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollateralAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"InvalidLeverage\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DelegationUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralAmountD18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"delegateCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"debt\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"collateralizationRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getPositionCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getPositionCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getPositionDebt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getVaultCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getVaultCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getVaultDebt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n*/\n"
    },
    "contracts/interfaces/ITreasuryMarket.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\nimport \"./external/IV3CoreProxy.sol\";\n\n/**\n * @title Synthetix V3 Market allowing for a trusted entity to manage excess liquidity allocated to a liquidity pool.\n */\ninterface ITreasuryMarket {\n    struct DepositRewardConfiguration {\n        address token;\n        uint32 power;\n        uint32 duration;\n        uint128 percent;\n        bytes32 valueRatioOracle;\n        uint128 penaltyStart;\n        uint128 penaltyEnd;\n    }\n\n    struct LoanInfo {\n        uint64 startTime;\n        uint32 power;\n        uint32 duration;\n        uint128 loanAmount;\n    }\n\n    struct AuxTokenInfo {\n        uint128 amount;\n        uint64 lastUpdated;\n        uint32 timeInsufficient;\n        uint32 epoch;\n    }\n\n    struct AuxTokenRequiredRatio {\n        uint128 timestamp;\n        uint128 ratio;\n    }\n\n    //function v3System() external view returns (IV3CoreProxy);\n\n    /**\n     * @notice Emitted when a new target cratio has been set\n     */\n    event TargetCRatioSet(uint256 newCRatio);\n\n    /**\n     * @notice Emitted after an account has been registered into the treasury\n     */\n    event AccountSaddled(uint128 indexed accountId, uint256 collateralAmount, uint256 debtAssigned);\n\n    /**\n     * @notice Emitted when the artificial debt of the vault is modified to match the current c-ratio\n     */\n    event Rebalanced(int256 previousVaultDebt, int256 newVaultDebt);\n\n    /**\n     * @notice Emitted if an account was migrated but its c-ratio was insufficient for assigning debt in v3\n     */\n    event AccountUnsaddled(\n        uint128 indexed accountId,\n        uint256 collateralAmount,\n        uint256 debtUnassigned\n    );\n\n    /**\n     * @notice Emitted when a user's registered loan amount (which they must repay in full to withdraw their staked tokens) has been modified\n     */\n    event LoanAdjusted(\n        uint128 indexed accountId,\n        uint256 newLoanedAmount,\n        uint256 previousLoanedAmount\n    );\n\n    event AuxTokenDepositChanged(\n        uint128 indexed accountId,\n        uint256 newAuxTokenDeposit,\n        uint256 oldAuxTokenDeposit\n    );\n\n    /**\n     * @notice Emitted when a user received a reward for depositing and saddling into the treasury market\n     */\n    event DepositRewardIssued(\n        uint128 indexed accountId,\n        address indexed rewardToken,\n        LoanInfo depositedRewardData\n    );\n\n    /**\n     *\n     */\n    event DepositRewardRedeemed(\n        uint128 indexed accountId,\n        address indexed rewardToken,\n        uint256 rewardRedeemed,\n        uint256 penaltyPaid\n    );\n\n    /**\n     * @notice Emitted after a call to `updateAuxToken`\n     */\n    event UpdateAuxTokenRequirement(uint256 timestamp, uint256 requiredRatio);\n\n    /**\n     * @notice Emitted after a call to `treasuryMint`, where the owner has pulled funds from the market into the configured treasury address\n     */\n    event TreasuryMinted(uint256 amount);\n\n    /**\n     * @notice Emitted after a call to `setDebtDecayFunction`, where the settings for new and existing issued loans may be modified by the owner.\n     */\n    event DebtDecayUpdated(uint32 power, uint32 duration, uint128 startPenalty, uint128 endPenalty);\n\n    // copied from v3 core system for event recognition purposes\n    event MarketRegistered(\n        address indexed market,\n        uint128 indexed marketId,\n        address indexed sender\n    );\n\n    /**\n     * @notice\n     */\n    event TreasuryBurned(uint256 amount);\n\n    /**\n     * @notice Emitted when `registerMarket` is called, but the market has already been registered.\n     */\n    error MarketAlreadyRegistered(uint128 marketId);\n\n    /**\n     * @notice Emitted when a user is unable to continue because their cratio is below the minimum required to fund the treasury\n     */\n    error InsufficientCRatio(uint128 accountId, uint256 currentDebt, uint256 targetDebt);\n\n    /**\n     * @notice Emitted when the current operation cannot be completed because a loan is taken out on the account, and must be repaid in full\n     */\n    error OutstandingLoan(uint128 accountId, uint256 outstandingLoanAmount);\n\n    /**\n     * @notice Emitted when there is not enough clearable debt to allow the user that is unsaddling to exit\n     */\n    error InsufficientExcessDebt(int256 neededToRepay, int256 ableToRepay);\n\n    /**\n     * @notice Emitted when there is not enough deposited reward funds to cover the user's deposit in the contract\n     */\n    error InsufficientAvailableReward(\n        address rewardToken,\n        uint256 rewardedAmount,\n        uint256 availableToReward\n    );\n\n    /**\n     * @notice called by the owner to register this market with v3. This is an initialization call only.\n     */\n    function registerMarket() external returns (uint128 newMarketId);\n\n    /**\n     * @notice Called by any address to indicate that a user has increased their delegation in a pool and needs to have debt applied to their account\n     * @dev Unlike `unsaddle`, this function does not take ownership of the account token. This is because there is more than one way in which\n     * a user may become part of the pool (while there is only really one way in which a user may want to exit)\n     */\n    function saddle(uint128 accountId) external;\n\n    /**\n     * @dev Prior to calling this function, the account must have approved for transfer of the ERC721 account token to this address so that this market can repay the debt.\n     */\n    function unsaddle(uint128 accountId) external;\n\n    /**\n     * @dev Prior to calling this function, the account must have approved for transfer of the ERC721 account token to this address so that this market can repay the debt.\n     */\n    function adjustLoan(uint128 accountId, uint256 amount) external;\n\n    /**\n     * @dev Used by the treasury to deposit a token to be used for a rewards configuration. The deposited tokens can also be minted from\n     */\n    function fundForDepositReward(address token, uint256 amount) external returns (uint256);\n\n    /**\n     * @dev Used by the treasury to remove a token from a deposit rewards configuration.\n     */\n    function removeFromDepositReward(address token, uint256 amount) external returns (uint256);\n\n    /**\n     * @notice Called by the owner to mint available sUSD to the treasury.\n     */\n    function mintTreasury(uint256 amount) external;\n\n    /**\n     * @notice Called by the owner to burn sUSD into the market from the configured treasury\n     * @dev Before calling this function, ensure that the treasury has `approve`d transfer of at least `amount` sUSD to this address.\n     */\n    function burnTreasury(uint256 amount) external;\n\n    /**\n     * @notice Adjust the market's reported debt such that the c-ratio of the vault matches that of the configured targetCRatio, if possible\n     * @dev this function's implementation is automtaically called by other functions, such as `unsaddle`, `mintTreasury`, `burnTreasury`\n     */\n    function rebalance() external;\n\n    /**\n     * @notice Called by owner to change the c-ratio which will be rebalanced to for the vault.\n     */\n    function setTargetCRatio(uint256 ratio) external;\n\n    /**\n     * @notice Retrieves the current amount of loan remaining for the given accountId\n     * @param accountId The account to retrieve current debt for\n     */\n    function loanedAmount(uint128 accountId) external view returns (uint256);\n\n    /**\n     * @notice Retrieves the current amount of reward that the user would keep if they chose to withdraw immediately (not accounting for penalty)\n     * @param accountId The account to retrieve current debt for\n     */\n    function depositRewardAvailable(\n        uint128 accountId,\n        address rewardTokenAddress\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of penalty which must be repaid upon early repayment. This amount is on top of the amount of the principal repaid.\n     * @param accountId The account for which the repayment penalty is being calculated.\n     * @param targetDebt The target amount of debt to calculate the repayment penalty for.\n     * @return The calculated penalty amount.\n     */\n    function repaymentPenalty(\n        uint128 accountId,\n        uint256 targetDebt\n    ) external view returns (uint256);\n\n    /**\n     * @notice Calculates the penalty amount for early withdrawal. This penalty is added on top of the accrued rewards amount.\n     * @param accountId The account for which the deposit reward penalty is being calculated.\n     * @param depositRewardToken The token in which the deposit reward is denominated.\n     * @return The calculated penalty amount that is applied on top of accrued rewards.\n     */\n    function depositRewardPenalty(\n        uint128 accountId,\n        address depositRewardToken\n    ) external view returns (uint256);\n\n    /**\n     * @notice Called by the owner to change the parameters for new loans, and to modify the penalty payment in the case of early withdrawal during\n     * repayment plan\n     * @param power the curve of the debt repayment. for example, `1` is linear, `2` is quadratic, `3` is cubic, and etc. Only whole numbers supported. Up to 100\n     * @param time The number of seconds a loan should be active for. After `time` seconds have passed, the loan is fully repaid.\n     * @param startPenalty The percentage of paid debt which is returned on penalty upon early repayment. Applies at loan repayment time t=0 This value is linearly combined with the `endPenalty` to adjust teh resulting repayment amount.\n     * @param endPenalty The percentage of paid debt which is returned on penalty upon early repayment. Applies at loan repayment time t=time (the lengt hof the loan). Once the end of the loan has been reached, there is no penalty to be paid because the loan has been fully erased.\n     */\n    function setDebtDecayFunction(\n        uint32 power,\n        uint32 time,\n        uint128 startPenalty,\n        uint128 endPenalty\n    ) external;\n\n    /**\n     * @notice Called by the owner to set rewards distributed to new saddlers. Completely replaces any existing reward configurations already set\n     * @param newDrcs The reward configurations that should be set\n     */\n    function setDepositRewardConfigurations(DepositRewardConfiguration[] memory newDrcs) external;\n\n    /**\n     * @notice Called by the owner to require an auxillery token to be deposited in a configured rewards distribution contract, without which loan will not be automatically repaid\n     * @param newAuxTokenRewardsAddress How many aux tokens are required\n     * @param requiredRatio The ratio of tokens needed in the reward contract before the loan can be automtaically repaid\n     * @param resetTime The amount of time to comply before the account's jubilee is reset to the starting point\n     */\n    function updateAuxToken(\n        address newAuxTokenRewardsAddress,\n        uint256 requiredRatio,\n        uint256 resetTime\n    ) external returns (uint256);\n\n    /**\n     * @notice Called by the staking rewards contract to indicate that a staking operation has occured, and a change should be observed.\n     * @param accountId the account that performed an operation on the staking contract\n     */\n    function reportAuxToken(uint128 accountId) external;\n}\n"
    },
    "contracts/interfaces/ITreasuryStakingRewards.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\ninterface ITreasuryStakingRewards {\n    function balanceOf(uint128 accountId) external view returns (uint256);\n    function totalDeposited() external view returns (uint256);\n    function deposit(uint128 accountId, uint256 amount) external;\n}\n"
    },
    "contracts/TreasuryStakingRewards.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.11 <0.9.0;\n\nimport \"./interfaces/ITreasuryStakingRewards.sol\";\nimport \"./interfaces/ITreasuryMarket.sol\";\n\nimport {UUPSImplementation} from \"@synthetixio/core-contracts/contracts/proxy/UUPSImplementation.sol\";\nimport \"@synthetixio/core-contracts/contracts/ownership/Ownable.sol\";\nimport \"@synthetixio/core-contracts/contracts/interfaces/IERC20.sol\";\nimport \"@synthetixio/core-contracts/contracts/utils/ERC2771Context.sol\";\n\n/**\n * @notice Reports when money has been deposited to the treasury\n */\ncontract TreasuryStakingRewards is ITreasuryStakingRewards, UUPSImplementation, Ownable {\n    address public immutable stakingToken;\n    address public immutable recipient;\n    ITreasuryMarket public immutable treasuryMarket;\n\n    mapping(uint128 => uint256) public balanceOf;\n    uint256 public totalDeposited;\n\n    constructor(\n        address _stakingToken,\n        address _treasuryMarket,\n        address _recipient\n    ) Ownable(ERC2771Context._msgSender()) {\n        stakingToken = _stakingToken;\n        treasuryMarket = ITreasuryMarket(_treasuryMarket);\n        recipient = _recipient;\n    }\n\n    function deposit(uint128 accountId, uint256 amount) external {\n        IERC20(stakingToken).transferFrom(ERC2771Context._msgSender(), recipient, amount);\n        totalDeposited += amount;\n        balanceOf[accountId] += amount;\n        treasuryMarket.reportAuxToken(accountId);\n        emit Deposited(ERC2771Context._msgSender(), accountId, amount);\n    }\n    /* ========== EVENTS ========== */\n\n    function upgradeTo(address to) external onlyOwner {\n        _upgradeTo(to);\n    }\n\n    event Deposited(address indexed sender, uint128 indexed accountId, uint256 amount);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}