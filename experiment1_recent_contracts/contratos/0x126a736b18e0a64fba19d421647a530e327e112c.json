{{
  "language": "Solidity",
  "sources": {
    "src/safe/DeputyPauseModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\n// Safe\nimport { GnosisSafe as Safe } from \"safe-contracts/GnosisSafe.sol\";\nimport { Enum } from \"safe-contracts/common/Enum.sol\";\n\n// Contracts\nimport { EIP712 } from \"@openzeppelin/contracts-v5/utils/cryptography/EIP712.sol\";\n\n// Libraries\nimport { ECDSA } from \"@openzeppelin/contracts-v5/utils/cryptography/ECDSA.sol\";\n\n// Interfaces\nimport { ISemver } from \"interfaces/universal/ISemver.sol\";\nimport { IDeputyGuardianModule } from \"interfaces/safe/IDeputyGuardianModule.sol\";\nimport { ISuperchainConfig } from \"interfaces/L1/ISuperchainConfig.sol\";\n\n/// @title DeputyPauseModule\n/// @notice Safe Module designed to be installed in the Foundation Safe which allows a specific\n///         deputy address to act as the Foundation Safe for the sake of triggering the\n///         Superchain-wide pause functionality. Significantly simplifies the process of triggering\n///         a Superchain-wide pause without changing the existing security model.\ncontract DeputyPauseModule is ISemver, EIP712 {\n    /// @notice Error message for deputy being invalid.\n    error DeputyPauseModule_InvalidDeputy();\n\n    /// @notice Error message for the DeputyGuardianModule being invalid.\n    error DeputyPauseModule_InvalidDeputyGuardianModule();\n\n    /// @notice Error message for unauthorized calls.\n    error DeputyPauseModule_Unauthorized();\n\n    /// @notice Error message for nonce reuse.\n    error DeputyPauseModule_NonceAlreadyUsed();\n\n    /// @notice Error message for failed transaction execution.\n    error DeputyPauseModule_ExecutionFailed(string);\n\n    /// @notice Error message for the SuperchainConfig not being paused.\n    error DeputyPauseModule_SuperchainNotPaused();\n\n    /// @notice Error message for the call not being from the Foundation Safe.\n    error DeputyPauseModule_NotFromSafe();\n\n    /// @notice Struct for the Pause action.\n    /// @custom:field nonce Signature nonce.\n    struct PauseMessage {\n        bytes32 nonce;\n    }\n\n    /// @notice Struct for the DeputyAuth action.\n    /// @custom:field deputy Address of the deputy account.\n    struct DeputyAuthMessage {\n        address deputy;\n    }\n\n    /// @notice Event emitted when the deputy address is set.\n    event DeputySet(address indexed deputy);\n\n    /// @notice Event emitted when the DeputyGuardianModule is set.\n    event DeputyGuardianModuleSet(IDeputyGuardianModule indexed deputyGuardianModule);\n\n    /// @notice Event emitted when the pause is triggered.\n    event PauseTriggered(address indexed deputy, bytes32 nonce);\n\n    /// @notice Foundation Safe.\n    Safe internal immutable FOUNDATION_SAFE;\n\n    /// @notice SuperchainConfig contract.\n    ISuperchainConfig internal immutable SUPERCHAIN_CONFIG;\n\n    /// @notice Typehash for the Pause action.\n    bytes32 internal constant PAUSE_MESSAGE_TYPEHASH = keccak256(\"PauseMessage(bytes32 nonce)\");\n\n    /// @notice Typehash for the DeputyAuth message.\n    bytes32 internal constant DEPUTY_AUTH_MESSAGE_TYPEHASH = keccak256(\"DeputyAuthMessage(address deputy)\");\n\n    /// @notice Address of the Deputy account.\n    address public deputy;\n\n    /// @notice Address of the DeputyGuardianModule used by the SC Safe.\n    IDeputyGuardianModule public deputyGuardianModule;\n\n    /// @notice Used nonces.\n    mapping(bytes32 => bool) public usedNonces;\n\n    /// @notice Semantic version.\n    /// @custom:semver 1.0.0-beta.2\n    string public constant version = \"1.0.0-beta.2\";\n\n    /// @param _foundationSafe Address of the Foundation Safe.\n    /// @param _deputyGuardianModule Address of the DeputyGuardianModule used by the SC Safe.\n    /// @param _superchainConfig Address of the SuperchainConfig contract.\n    /// @param _deputy Address of the deputy account.\n    /// @param _deputySignature Signature from the deputy verifying that the account is an EOA.\n    constructor(\n        Safe _foundationSafe,\n        IDeputyGuardianModule _deputyGuardianModule,\n        ISuperchainConfig _superchainConfig,\n        address _deputy,\n        bytes memory _deputySignature\n    )\n        EIP712(\"DeputyPauseModule\", \"1\")\n    {\n        _setDeputy(_deputy, _deputySignature);\n        _setDeputyGuardianModule(_deputyGuardianModule);\n        FOUNDATION_SAFE = _foundationSafe;\n        SUPERCHAIN_CONFIG = _superchainConfig;\n    }\n\n    /// @notice Getter function for the Foundation Safe address.\n    /// @return foundationSafe_ Foundation Safe address.\n    function foundationSafe() public view returns (Safe foundationSafe_) {\n        foundationSafe_ = FOUNDATION_SAFE;\n    }\n\n    /// @notice Getter function for the SuperchainConfig address.\n    /// @return superchainConfig_ SuperchainConfig address.\n    function superchainConfig() public view returns (ISuperchainConfig superchainConfig_) {\n        superchainConfig_ = SUPERCHAIN_CONFIG;\n    }\n\n    /// @notice Getter function for the Pause message typehash.\n    /// @return pauseMessageTypehash_ Pause message typehash.\n    function pauseMessageTypehash() public pure returns (bytes32 pauseMessageTypehash_) {\n        pauseMessageTypehash_ = PAUSE_MESSAGE_TYPEHASH;\n    }\n\n    /// @notice Getter function for the DeputyAuth message typehash.\n    /// @return deputyAuthMessageTypehash_ DeputyAuth message typehash.\n    function deputyAuthMessageTypehash() public pure returns (bytes32 deputyAuthMessageTypehash_) {\n        deputyAuthMessageTypehash_ = DEPUTY_AUTH_MESSAGE_TYPEHASH;\n    }\n\n    /// @notice Sets the deputy address.\n    /// @param _deputy Deputy address.\n    /// @param _deputySignature Deputy signature.\n    function setDeputy(address _deputy, bytes memory _deputySignature) external {\n        // Can only be called by the Foundation Safe itself.\n        if (msg.sender != address(FOUNDATION_SAFE)) {\n            revert DeputyPauseModule_NotFromSafe();\n        }\n\n        // Set the deputy address.\n        _setDeputy(_deputy, _deputySignature);\n    }\n\n    /// @notice Sets the DeputyGuardianModule.\n    /// @param _deputyGuardianModule DeputyGuardianModule address.\n    function setDeputyGuardianModule(IDeputyGuardianModule _deputyGuardianModule) external {\n        // Can only be called by the Foundation Safe itself.\n        if (msg.sender != address(FOUNDATION_SAFE)) {\n            revert DeputyPauseModule_NotFromSafe();\n        }\n\n        // Set the DeputyGuardianModule.\n        _setDeputyGuardianModule(_deputyGuardianModule);\n    }\n\n    /// @notice Calls the Foundation Safe's `execTransactionFromModuleReturnData()` function with\n    ///         the arguments necessary to call `pause()` on the Security Council Safe, which will\n    ///         then cause the Security Council Safe to trigger SuperchainConfig pause.\n    ///         Front-running this function is completely safe, it'll pause either way.\n    /// @param _nonce Signature nonce.\n    /// @param _signature ECDSA signature.\n    function pause(bytes32 _nonce, bytes memory _signature) external {\n        // Verify the signature.\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(PAUSE_MESSAGE_TYPEHASH, _nonce)));\n        if (ECDSA.recover(digest, _signature) != deputy) {\n            revert DeputyPauseModule_Unauthorized();\n        }\n\n        // Make sure the nonce hasn't been used yet.\n        if (usedNonces[_nonce]) {\n            revert DeputyPauseModule_NonceAlreadyUsed();\n        }\n\n        // Mark the nonce as used.\n        usedNonces[_nonce] = true;\n\n        // Attempt to trigger the call.\n        // Will succeed if the DeputyGuardianModule has no code.\n        (bool success, bytes memory returnData) = FOUNDATION_SAFE.execTransactionFromModuleReturnData(\n            address(deputyGuardianModule), 0, abi.encodeCall(IDeputyGuardianModule.pause, ()), Enum.Operation.Call\n        );\n\n        // If the call fails, revert.\n        if (!success) {\n            revert DeputyPauseModule_ExecutionFailed(string(returnData));\n        }\n\n        // Verify that the SuperchainConfig is now paused.\n        if (!SUPERCHAIN_CONFIG.paused()) {\n            revert DeputyPauseModule_SuperchainNotPaused();\n        }\n\n        // Emit that the pause was triggered.\n        emit PauseTriggered(deputy, _nonce);\n    }\n\n    /// @notice Internal function to set the deputy address.\n    /// @param _deputy Deputy address.\n    /// @param _deputySignature Deputy signature.\n    function _setDeputy(address _deputy, bytes memory _deputySignature) internal {\n        // Check that the deputy signature is valid.\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(DEPUTY_AUTH_MESSAGE_TYPEHASH, _deputy)));\n        if (ECDSA.recover(digest, _deputySignature) != _deputy) {\n            revert DeputyPauseModule_InvalidDeputy();\n        }\n\n        // Set the deputy address.\n        deputy = _deputy;\n\n        // Emit the DeputySet event.\n        emit DeputySet(_deputy);\n    }\n\n    /// @notice Internal function to set the DeputyGuardianModule.\n    /// @param _deputyGuardianModule DeputyGuardianModule address.\n    function _setDeputyGuardianModule(IDeputyGuardianModule _deputyGuardianModule) internal {\n        // Cannot set the DeputyGuardianModule to be the Foundation Safe. This prevents the\n        // Foundation Safe from unexpectedly triggering itself if there's some important function\n        // that happens to have the \"pause()\" selector.\n        if (address(_deputyGuardianModule) == address(FOUNDATION_SAFE)) {\n            revert DeputyPauseModule_InvalidDeputyGuardianModule();\n        }\n\n        // Make sure that the DeputyGuardianModule actually has code.\n        if (address(_deputyGuardianModule).code.length == 0) {\n            revert DeputyPauseModule_InvalidDeputyGuardianModule();\n        }\n\n        // Set the DeputyGuardianModule.\n        deputyGuardianModule = _deputyGuardianModule;\n\n        // Emit the DeputyGuardianModuleSet event.\n        emit DeputyGuardianModuleSet(_deputyGuardianModule);\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/GnosisSafe.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./base/ModuleManager.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/FallbackManager.sol\";\nimport \"./base/GuardManager.sol\";\nimport \"./common/EtherPaymentFallback.sol\";\nimport \"./common/Singleton.sol\";\nimport \"./common/SignatureDecoder.sol\";\nimport \"./common/SecuredTokenTransfer.sol\";\nimport \"./common/StorageAccessible.sol\";\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./external/GnosisSafeMath.sol\";\n\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafe is\n    EtherPaymentFallback,\n    Singleton,\n    ModuleManager,\n    OwnerManager,\n    SignatureDecoder,\n    SecuredTokenTransfer,\n    ISignatureValidatorConstants,\n    FallbackManager,\n    StorageAccessible,\n    GuardManager\n{\n    using GnosisSafeMath for uint256;\n\n    string public constant VERSION = \"1.3.0\";\n\n    // keccak256(\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n    // );\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n    // keccak256(\n    //     \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n    // );\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\n\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\n    event SignMsg(bytes32 indexed msgHash);\n    event ExecutionFailure(bytes32 txHash, uint256 payment);\n    event ExecutionSuccess(bytes32 txHash, uint256 payment);\n\n    uint256 public nonce;\n    bytes32 private _deprecatedDomainSeparator;\n    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners\n    mapping(bytes32 => uint256) public signedMessages;\n    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\n\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\n    constructor() {\n        // By setting the threshold it is not possible to call setup anymore,\n        // so we create a Safe with 0 owners and threshold 1.\n        // This is an unusable Safe, perfect for the singleton\n        threshold = 1;\n    }\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    /// @param to Contract address for optional delegate call.\n    /// @param data Data payload for optional delegate call.\n    /// @param fallbackHandler Handler for fallback calls to this contract\n    /// @param paymentToken Token that should be used for the payment (0 is ETH)\n    /// @param payment Value that should be paid\n    /// @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external {\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\n        setupOwners(_owners, _threshold);\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\n        setupModules(to, data);\n\n        if (payment > 0) {\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n        }\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\n    }\n\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\n    ///      Note: The fees are always transferred, even if the user transaction fails.\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\n    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Gas price that should be used for the payment calculation.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) public payable virtual returns (bool success) {\n        bytes32 txHash;\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            bytes memory txHashData =\n                encodeTransactionData(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    nonce\n                );\n            // Increase nonce and execute transaction.\n            nonce++;\n            txHash = keccak256(txHashData);\n            checkSignatures(txHash, txHashData, signatures);\n        }\n        address guard = getGuard();\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkTransaction(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    signatures,\n                    msg.sender\n                );\n            }\n        }\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \"GS010\");\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            uint256 gasUsed = gasleft();\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\n            gasUsed = gasUsed.sub(gasleft());\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\n            require(success || safeTxGas != 0 || gasPrice != 0, \"GS013\");\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\n            uint256 payment = 0;\n            if (gasPrice > 0) {\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n            }\n            if (success) emit ExecutionSuccess(txHash, payment);\n            else emit ExecutionFailure(txHash, payment);\n        }\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkAfterExecution(txHash, success);\n            }\n        }\n    }\n\n    function handlePayment(\n        uint256 gasUsed,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver\n    ) private returns (uint256 payment) {\n        // solhint-disable-next-line avoid-tx-origin\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\n        if (gasToken == address(0)) {\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\n            require(receiver.send(payment), \"GS011\");\n        } else {\n            payment = gasUsed.add(baseGas).mul(gasPrice);\n            require(transferToken(gasToken, receiver, payment), \"GS012\");\n        }\n    }\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     */\n    function checkSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures\n    ) public view {\n        // Load threshold to avoid multiple storage loads\n        uint256 _threshold = threshold;\n        // Check that a threshold is set\n        require(_threshold > 0, \"GS001\");\n        checkNSignatures(dataHash, data, signatures, _threshold);\n    }\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     * @param requiredSignatures Amount of required valid signatures.\n     */\n    function checkNSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) public view {\n        // Check that the provided signature data is not too short\n        require(signatures.length >= requiredSignatures.mul(65), \"GS020\");\n        // There cannot be an owner with address 0.\n        address lastOwner = address(0);\n        address currentOwner;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 i;\n        for (i = 0; i < requiredSignatures; i++) {\n            (v, r, s) = signatureSplit(signatures, i);\n            if (v == 0) {\n                // If v is 0 then it is a contract signature\n                // When handling contract signatures the address of the contract is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\n                // Here we only check that the pointer is not pointing inside the part that is being processed\n                require(uint256(s) >= requiredSignatures.mul(65), \"GS021\");\n\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\n                require(uint256(s).add(32) <= signatures.length, \"GS022\");\n\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\n                uint256 contractSignatureLen;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\n                }\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \"GS023\");\n\n                // Check signature\n                bytes memory contractSignature;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n                    contractSignature := add(add(signatures, s), 0x20)\n                }\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \"GS024\");\n            } else if (v == 1) {\n                // If v is 1 then it is an approved hash\n                // When handling approved hashes the address of the approver is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \"GS025\");\n            } else if (v > 30) {\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)), v - 4, r, s);\n            } else {\n                // Default is the ecrecover flow with the provided data hash\n                // Use ecrecover with the messageHash for EOA signatures\n                currentOwner = ecrecover(dataHash, v, r, s);\n            }\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \"GS026\");\n            lastOwner = currentOwner;\n        }\n    }\n\n    /// @dev Allows to estimate a Safe transaction.\n    ///      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\n    /// @notice Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.\n    function requiredTxGas(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (uint256) {\n        uint256 startGas = gasleft();\n        // We don't provide an error message here, as we use it to return the estimate\n        require(execute(to, value, data, operation, gasleft()));\n        uint256 requiredGas = startGas - gasleft();\n        // Convert response to string and return via error message\n        revert(string(abi.encodePacked(requiredGas)));\n    }\n\n    /**\n     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\n     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\n     */\n    function approveHash(bytes32 hashToApprove) external {\n        require(owners[msg.sender] != address(0), \"GS030\");\n        approvedHashes[msg.sender][hashToApprove] = 1;\n        emit ApproveHash(hashToApprove, msg.sender);\n    }\n\n    /// @dev Returns the chain id used by this contract.\n    function getChainId() public view returns (uint256) {\n        uint256 id;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    function domainSeparator() public view returns (bytes32) {\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\n    }\n\n    /// @dev Returns the bytes that are hashed to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Gas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash bytes.\n    function encodeTransactionData(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes memory) {\n        bytes32 safeTxHash =\n            keccak256(\n                abi.encode(\n                    SAFE_TX_TYPEHASH,\n                    to,\n                    value,\n                    keccak256(data),\n                    operation,\n                    safeTxGas,\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    _nonce\n                )\n            );\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\n    }\n\n    /// @dev Returns hash to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Fas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash.\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes32) {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/common/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {Call, DelegateCall}\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "interfaces/universal/ISemver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ISemver\n/// @notice ISemver is a simple contract for ensuring that contracts are\n///         versioned using semantic versioning.\ninterface ISemver {\n    /// @notice Getter for the semantic version of the contract. This is not\n    ///         meant to be used onchain but instead meant to be used by offchain\n    ///         tooling.\n    /// @return Semver contract version as a string.\n    function version() external view returns (string memory);\n}\n"
    },
    "interfaces/safe/IDeputyGuardianModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IAnchorStateRegistry } from \"interfaces/dispute/IAnchorStateRegistry.sol\";\nimport { IFaultDisputeGame } from \"interfaces/dispute/IFaultDisputeGame.sol\";\nimport { ISuperchainConfig } from \"interfaces/L1/ISuperchainConfig.sol\";\nimport { IOptimismPortal2 } from \"interfaces/L1/IOptimismPortal2.sol\";\nimport { IDisputeGame } from \"interfaces/dispute/IDisputeGame.sol\";\nimport { ISemver } from \"interfaces/universal/ISemver.sol\";\nimport { GameType, Timestamp } from \"src/dispute/lib/Types.sol\";\nimport { GnosisSafe as Safe } from \"safe-contracts/GnosisSafe.sol\";\n\ninterface IDeputyGuardianModule is ISemver {\n    error ExecutionFailed(string);\n    error Unauthorized();\n\n    event Paused(string identifier);\n    event Unpaused();\n    event DisputeGameBlacklisted(IDisputeGame indexed game);\n    event RespectedGameTypeSet(GameType indexed gameType, Timestamp indexed updatedAt);\n\n    function version() external view returns (string memory);\n    function __constructor__(Safe _safe, ISuperchainConfig _superchainConfig, address _deputyGuardian) external;\n    function safe() external view returns (Safe safe_);\n    function superchainConfig() external view returns (ISuperchainConfig superchainConfig_);\n    function deputyGuardian() external view returns (address deputyGuardian_);\n    function pause() external;\n    function unpause() external;\n    function setAnchorState(IAnchorStateRegistry _registry, IFaultDisputeGame _game) external;\n    function blacklistDisputeGame(IOptimismPortal2 _portal, IDisputeGame _game) external;\n    function setRespectedGameType(IOptimismPortal2 _portal, GameType _gameType) external;\n}\n"
    },
    "interfaces/L1/ISuperchainConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISuperchainConfig {\n    enum UpdateType {\n        GUARDIAN\n    }\n\n    event ConfigUpdate(UpdateType indexed updateType, bytes data);\n    event Initialized(uint8 version);\n    event Paused(string identifier);\n    event Unpaused();\n\n    function GUARDIAN_SLOT() external view returns (bytes32);\n    function PAUSED_SLOT() external view returns (bytes32);\n    function guardian() external view returns (address guardian_);\n    function initialize(address _guardian, bool _paused) external;\n    function pause(string memory _identifier) external;\n    function paused() external view returns (bool paused_);\n    function unpause() external;\n    function version() external view returns (string memory);\n\n    function __constructor__() external;\n}\n"
    },
    "lib/safe-contracts/contracts/base/ModuleManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\nimport \"./Executor.sol\";\n\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract ModuleManager is SelfAuthorized, Executor {\n    event EnabledModule(address module);\n    event DisabledModule(address module);\n    event ExecutionFromModuleSuccess(address indexed module);\n    event ExecutionFromModuleFailure(address indexed module);\n\n    address internal constant SENTINEL_MODULES = address(0x1);\n\n    mapping(address => address) internal modules;\n\n    function setupModules(address to, bytes memory data) internal {\n        require(modules[SENTINEL_MODULES] == address(0), \"GS100\");\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n        if (to != address(0))\n            // Setup has to complete successfully or transaction fails.\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), \"GS000\");\n    }\n\n    /// @dev Allows to add a module to the whitelist.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Enables the module `module` for the Safe.\n    /// @param module Module to be whitelisted.\n    function enableModule(address module) public authorized {\n        // Module address cannot be null or sentinel.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        // Module cannot be added twice.\n        require(modules[module] == address(0), \"GS102\");\n        modules[module] = modules[SENTINEL_MODULES];\n        modules[SENTINEL_MODULES] = module;\n        emit EnabledModule(module);\n    }\n\n    /// @dev Allows to remove a module from the whitelist.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Disables the module `module` for the Safe.\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\n    /// @param module Module to be removed.\n    function disableModule(address prevModule, address module) public authorized {\n        // Validate module address and check that it corresponds to module index.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        require(modules[prevModule] == module, \"GS103\");\n        modules[prevModule] = modules[module];\n        modules[module] = address(0);\n        emit DisabledModule(module);\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public virtual returns (bool success) {\n        // Only whitelisted modules are allowed.\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"GS104\");\n        // Execute transaction without further confirmations.\n        success = execute(to, value, data, operation, gasleft());\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\n        else emit ExecutionFromModuleFailure(msg.sender);\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public returns (bool success, bytes memory returnData) {\n        success = execTransactionFromModule(to, value, data, operation);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Load free memory location\n            let ptr := mload(0x40)\n            // We allocate memory for the return data by setting the free memory location to\n            // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n            // Store the size\n            mstore(ptr, returndatasize())\n            // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n            // Point the return data to the correct memory location\n            returnData := ptr\n        }\n    }\n\n    /// @dev Returns if an module is enabled\n    /// @return True if the module is enabled\n    function isModuleEnabled(address module) public view returns (bool) {\n        return SENTINEL_MODULES != module && modules[module] != address(0);\n    }\n\n    /// @dev Returns array of modules.\n    /// @param start Start of the page.\n    /// @param pageSize Maximum number of modules that should be returned.\n    /// @return array Array of modules.\n    /// @return next Start of the next page.\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        // Populate return array\n        uint256 moduleCount = 0;\n        address currentModule = modules[start];\n        while (currentModule != address(0x0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\n            array[moduleCount] = currentModule;\n            currentModule = modules[currentModule];\n            moduleCount++;\n        }\n        next = currentModule;\n        // Set correct size of returned array\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(array, moduleCount)\n        }\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/base/OwnerManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract OwnerManager is SelfAuthorized {\n    event AddedOwner(address owner);\n    event RemovedOwner(address owner);\n    event ChangedThreshold(uint256 threshold);\n\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        require(threshold == 0, \"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        require(_threshold <= _owners.length, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \"GS203\");\n            // No duplicate owners allowed.\n            require(owners[owner] == address(0), \"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n    /// @param owner New owner address.\n    /// @param _threshold New threshold.\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[owner] == address(0), \"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\n    /// @param owner Owner address to be removed.\n    /// @param _threshold New threshold.\n    function removeOwner(\n        address prevOwner,\n        address owner,\n        uint256 _threshold\n    ) public authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        require(ownerCount - 1 >= _threshold, \"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == owner, \"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n    /// @param oldOwner Owner address to be replaced.\n    /// @param newOwner New owner address.\n    function swapOwner(\n        address prevOwner,\n        address oldOwner,\n        address newOwner\n    ) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[newOwner] == address(0), \"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == oldOwner, \"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    /// @dev Allows to update the number of required confirmations by Safe owners.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Changes the threshold of the Safe to `_threshold`.\n    /// @param _threshold New threshold.\n    function changeThreshold(uint256 _threshold) public authorized {\n        // Validate that threshold is smaller than number of owners.\n        require(_threshold <= ownerCount, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    function getThreshold() public view returns (uint256) {\n        return threshold;\n    }\n\n    function isOwner(address owner) public view returns (bool) {\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n    }\n\n    /// @dev Returns array of owners.\n    /// @return Array of Safe owners.\n    function getOwners() public view returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/base/FallbackManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract FallbackManager is SelfAuthorized {\n    event ChangedFallbackHandler(address handler);\n\n    // keccak256(\"fallback_manager.handler.address\")\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n\n    function internalSetFallbackHandler(address handler) internal {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, handler)\n        }\n    }\n\n    /// @dev Allows to add a contract to handle fallback calls.\n    ///      Only fallback calls without value and with data will be forwarded.\n    ///      This can only be done via a Safe transaction.\n    /// @param handler contract to handle fallbacks calls.\n    function setFallbackHandler(address handler) public authorized {\n        internalSetFallbackHandler(handler);\n        emit ChangedFallbackHandler(handler);\n    }\n\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\n    fallback() external {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let handler := sload(slot)\n            if iszero(handler) {\n                return(0, 0)\n            }\n            calldatacopy(0, 0, calldatasize())\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\n            // Then the address without padding is stored right after the calldata\n            mstore(calldatasize(), shl(96, caller()))\n            // Add 20 bytes for the address appended add the end\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if iszero(success) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/base/GuardManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\n\ninterface Guard {\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract GuardManager is SelfAuthorized {\n    event ChangedGuard(address guard);\n    // keccak256(\"guard_manager.guard.address\")\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n    /// @dev Set a guard that checks transactions before execution\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\n    function setGuard(address guard) external authorized {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, guard)\n        }\n        emit ChangedGuard(guard);\n    }\n\n    function getGuard() internal view returns (address guard) {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            guard := sload(slot)\n        }\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/common/EtherPaymentFallback.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract EtherPaymentFallback {\n    event SafeReceived(address indexed sender, uint256 value);\n\n    /// @dev Fallback function accepts Ether transactions.\n    receive() external payable {\n        emit SafeReceived(msg.sender, msg.value);\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/common/Singleton.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\n///         This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract Singleton {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\n    // It should also always be ensured that the address is stored alone (uses a full word)\n    address private singleton;\n}\n"
    },
    "lib/safe-contracts/contracts/common/SignatureDecoder.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SignatureDecoder {\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\n    /// @notice Make sure to peform a bounds check for @param pos, to avoid out of bounds access on @param signatures\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\n    /// @param signatures concatenated rsv signatures\n    function signatureSplit(bytes memory signatures, uint256 pos)\n        internal\n        pure\n        returns (\n            uint8 v,\n            bytes32 r,\n            bytes32 s\n        )\n    {\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let signaturePos := mul(0x41, pos)\n            r := mload(add(signatures, add(signaturePos, 0x20)))\n            s := mload(add(signatures, add(signaturePos, 0x40)))\n            // Here we are loading the last 32 bytes, including 31 bytes\n            // of 's'. There is no 'mload8' to do this.\n            //\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\n        }\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/common/SecuredTokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SecuredTokenTransfer - Secure token transfer\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SecuredTokenTransfer {\n    /// @dev Transfers a token and returns if it was a success\n    /// @param token Token that should be transferred\n    /// @param receiver Receiver to whom the token should be transferred\n    /// @param amount The amount of tokens that should be transferred\n    function transferToken(\n        address token,\n        address receiver,\n        uint256 amount\n    ) internal returns (bool transferred) {\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We write the return value to scratch space.\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            switch returndatasize()\n                case 0 {\n                    transferred := success\n                }\n                case 0x20 {\n                    transferred := iszero(or(iszero(success), iszero(mload(0))))\n                }\n                default {\n                    transferred := 0\n                }\n        }\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/common/StorageAccessible.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\n/// @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\ncontract StorageAccessible {\n    /**\n     * @dev Reads `length` bytes of storage in the currents contract\n     * @param offset - the offset in the current contract's storage in words to start reading from\n     * @param length - the number of words (32 bytes) of data to read\n     * @return the bytes that were read.\n     */\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\n        bytes memory result = new bytes(length * 32);\n        for (uint256 index = 0; index < length; index++) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let word := sload(add(offset, index))\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Performs a delegetecall on a targetContract in the context of self.\n     * Internally reverts execution to avoid side effects (making it static).\n     *\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n     * Specifically, the `returndata` after a call to this method will be:\n     * `success:bool || response.length:uint256 || response:bytes`.\n     *\n     * @param targetContract Address of the contract containing the code to execute.\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n     */\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\n\n            mstore(0x00, success)\n            mstore(0x20, returndatasize())\n            returndatacopy(0x40, 0, returndatasize())\n            revert(0, add(returndatasize(), 0x40))\n        }\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/interfaces/ISignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ncontract ISignatureValidatorConstants {\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _data Arbitrary length data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\n}\n"
    },
    "lib/safe-contracts/contracts/external/GnosisSafeMath.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title GnosisSafeMath\n * @dev Math operations with safety checks that revert on error\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\n * TODO: remove once open zeppelin update to solc 0.5.0\n */\nlibrary GnosisSafeMath {\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "interfaces/dispute/IAnchorStateRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IDisputeGame } from \"interfaces/dispute/IDisputeGame.sol\";\nimport { IFaultDisputeGame } from \"interfaces/dispute/IFaultDisputeGame.sol\";\nimport { IDisputeGameFactory } from \"interfaces/dispute/IDisputeGameFactory.sol\";\nimport { ISuperchainConfig } from \"interfaces/L1/ISuperchainConfig.sol\";\nimport { IOptimismPortal2 } from \"interfaces/L1/IOptimismPortal2.sol\";\nimport { GameType, Hash, OutputRoot } from \"src/dispute/lib/Types.sol\";\n\ninterface IAnchorStateRegistry {\n    error AnchorStateRegistry_Unauthorized();\n    error AnchorStateRegistry_InvalidAnchorGame();\n    error AnchorStateRegistry_AnchorGameBlacklisted();\n\n    event AnchorNotUpdated(IFaultDisputeGame indexed game);\n    event AnchorUpdated(IFaultDisputeGame indexed game);\n    event Initialized(uint8 version);\n\n    function anchorGame() external view returns (IFaultDisputeGame);\n    function anchors(GameType) external view returns (Hash, uint256);\n    function getAnchorRoot() external view returns (Hash, uint256);\n    function disputeGameFactory() external view returns (IDisputeGameFactory);\n    function initialize(\n        ISuperchainConfig _superchainConfig,\n        IDisputeGameFactory _disputeGameFactory,\n        IOptimismPortal2 _portal,\n        OutputRoot memory _startingAnchorRoot\n    )\n        external;\n\n    function isGameBlacklisted(IDisputeGame _game) external view returns (bool);\n    function isGameProper(IDisputeGame _game) external view returns (bool);\n    function isGameRegistered(IDisputeGame _game) external view returns (bool);\n    function isGameResolved(IDisputeGame _game) external view returns (bool);\n    function isGameRespected(IDisputeGame _game) external view returns (bool);\n    function isGameRetired(IDisputeGame _game) external view returns (bool);\n    function isGameFinalized(IDisputeGame _game) external view returns (bool);\n    function isGameClaimValid(IDisputeGame _game) external view returns (bool);\n    function portal() external view returns (IOptimismPortal2);\n    function respectedGameType() external view returns (GameType);\n    function setAnchorState(IDisputeGame _game) external;\n    function superchainConfig() external view returns (ISuperchainConfig);\n    function version() external view returns (string memory);\n\n    function __constructor__() external;\n}\n"
    },
    "interfaces/dispute/IFaultDisputeGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IDisputeGame } from \"interfaces/dispute/IDisputeGame.sol\";\nimport { IDelayedWETH } from \"interfaces/dispute/IDelayedWETH.sol\";\nimport { IAnchorStateRegistry } from \"interfaces/dispute/IAnchorStateRegistry.sol\";\nimport { IBigStepper } from \"interfaces/dispute/IBigStepper.sol\";\nimport { Types } from \"src/libraries/Types.sol\";\nimport { GameType, Claim, Position, Clock, Hash, Duration, BondDistributionMode } from \"src/dispute/lib/Types.sol\";\n\ninterface IFaultDisputeGame is IDisputeGame {\n    struct ClaimData {\n        uint32 parentIndex;\n        address counteredBy;\n        address claimant;\n        uint128 bond;\n        Claim claim;\n        Position position;\n        Clock clock;\n    }\n\n    struct ResolutionCheckpoint {\n        bool initialCheckpointComplete;\n        uint32 subgameIndex;\n        Position leftmostPosition;\n        address counteredBy;\n    }\n\n    struct GameConstructorParams {\n        GameType gameType;\n        Claim absolutePrestate;\n        uint256 maxGameDepth;\n        uint256 splitDepth;\n        Duration clockExtension;\n        Duration maxClockDuration;\n        IBigStepper vm;\n        IDelayedWETH weth;\n        IAnchorStateRegistry anchorStateRegistry;\n        uint256 l2ChainId;\n    }\n\n    error AlreadyInitialized();\n    error AnchorRootNotFound();\n    error BlockNumberMatches();\n    error BondTransferFailed();\n    error CannotDefendRootClaim();\n    error ClaimAboveSplit();\n    error ClaimAlreadyExists();\n    error ClaimAlreadyResolved();\n    error ClockNotExpired();\n    error ClockTimeExceeded();\n    error ContentLengthMismatch();\n    error DuplicateStep();\n    error EmptyItem();\n    error GameDepthExceeded();\n    error GameNotInProgress();\n    error IncorrectBondAmount();\n    error InvalidChallengePeriod();\n    error InvalidClockExtension();\n    error InvalidDataRemainder();\n    error InvalidDisputedClaimIndex();\n    error InvalidHeader();\n    error InvalidHeaderRLP();\n    error InvalidLocalIdent();\n    error InvalidOutputRootProof();\n    error InvalidParent();\n    error InvalidPrestate();\n    error InvalidSplitDepth();\n    error L2BlockNumberChallenged();\n    error MaxDepthTooLarge();\n    error NoCreditToClaim();\n    error OutOfOrderResolution();\n    error UnexpectedList();\n    error UnexpectedRootClaim(Claim rootClaim);\n    error UnexpectedString();\n    error ValidStep();\n    error InvalidBondDistributionMode();\n    error GameNotFinalized();\n    error GameNotResolved();\n    error ReservedGameType();\n\n    event Move(uint256 indexed parentIndex, Claim indexed claim, address indexed claimant);\n    event GameClosed(BondDistributionMode bondDistributionMode);\n\n    function absolutePrestate() external view returns (Claim absolutePrestate_);\n    function addLocalData(uint256 _ident, uint256 _execLeafIdx, uint256 _partOffset) external;\n    function anchorStateRegistry() external view returns (IAnchorStateRegistry registry_);\n    function attack(Claim _disputed, uint256 _parentIndex, Claim _claim) external payable;\n    function bondDistributionMode() external view returns (BondDistributionMode);\n    function challengeRootL2Block(Types.OutputRootProof memory _outputRootProof, bytes memory _headerRLP) external;\n    function claimCredit(address _recipient) external;\n    function claimData(uint256)\n        external\n        view // nosemgrep\n        returns (\n            uint32 parentIndex,\n            address counteredBy,\n            address claimant,\n            uint128 bond,\n            Claim claim,\n            Position position,\n            Clock clock\n        );\n    function claimDataLen() external view returns (uint256 len_);\n    function claims(Hash) external view returns (bool);\n    function clockExtension() external view returns (Duration clockExtension_);\n    function closeGame() external;\n    function credit(address _recipient) external view returns (uint256 credit_);\n    function defend(Claim _disputed, uint256 _parentIndex, Claim _claim) external payable;\n    function getChallengerDuration(uint256 _claimIndex) external view returns (Duration duration_);\n    function getNumToResolve(uint256 _claimIndex) external view returns (uint256 numRemainingChildren_);\n    function getRequiredBond(Position _position) external view returns (uint256 requiredBond_);\n    function hasUnlockedCredit(address) external view returns (bool);\n    function l2BlockNumber() external pure returns (uint256 l2BlockNumber_);\n    function l2BlockNumberChallenged() external view returns (bool);\n    function l2BlockNumberChallenger() external view returns (address);\n    function l2ChainId() external view returns (uint256 l2ChainId_);\n    function maxClockDuration() external view returns (Duration maxClockDuration_);\n    function maxGameDepth() external view returns (uint256 maxGameDepth_);\n    function move(Claim _disputed, uint256 _challengeIndex, Claim _claim, bool _isAttack) external payable;\n    function normalModeCredit(address) external view returns (uint256);\n    function refundModeCredit(address) external view returns (uint256);\n    function resolutionCheckpoints(uint256)\n        external\n        view\n        returns (bool initialCheckpointComplete, uint32 subgameIndex, Position leftmostPosition, address counteredBy); // nosemgrep\n    function resolveClaim(uint256 _claimIndex, uint256 _numToResolve) external;\n    function resolvedSubgames(uint256) external view returns (bool);\n    function splitDepth() external view returns (uint256 splitDepth_);\n    function startingBlockNumber() external view returns (uint256 startingBlockNumber_);\n    function startingOutputRoot() external view returns (Hash root, uint256 l2BlockNumber); // nosemgrep\n    function startingRootHash() external view returns (Hash startingRootHash_);\n    function step(uint256 _claimIndex, bool _isAttack, bytes memory _stateData, bytes memory _proof) external;\n    function subgames(uint256, uint256) external view returns (uint256);\n    function version() external pure returns (string memory);\n    function vm() external view returns (IBigStepper vm_);\n    function wasRespectedGameTypeWhenCreated() external view returns (bool);\n    function weth() external view returns (IDelayedWETH weth_);\n\n    function __constructor__(GameConstructorParams memory _params) external;\n}\n"
    },
    "interfaces/L1/IOptimismPortal2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { Types } from \"src/libraries/Types.sol\";\nimport { GameType, Timestamp } from \"src/dispute/lib/LibUDT.sol\";\nimport { IDisputeGame } from \"interfaces/dispute/IDisputeGame.sol\";\nimport { IDisputeGameFactory } from \"interfaces/dispute/IDisputeGameFactory.sol\";\nimport { ISystemConfig } from \"interfaces/L1/ISystemConfig.sol\";\nimport { ISuperchainConfig } from \"interfaces/L1/ISuperchainConfig.sol\";\n\ninterface IOptimismPortal2 {\n    error AlreadyFinalized();\n    error BadTarget();\n    error Blacklisted();\n    error CallPaused();\n    error ContentLengthMismatch();\n    error EmptyItem();\n    error GasEstimation();\n    error InvalidDataRemainder();\n    error InvalidDisputeGame();\n    error InvalidGameType();\n    error InvalidHeader();\n    error InvalidMerkleProof();\n    error InvalidProof();\n    error LargeCalldata();\n    error NonReentrant();\n    error OutOfGas();\n    error ProposalNotValidated();\n    error SmallGasLimit();\n    error Unauthorized();\n    error UnexpectedList();\n    error UnexpectedString();\n    error Unproven();\n    error LegacyGame();\n\n    event DisputeGameBlacklisted(IDisputeGame indexed disputeGame);\n    event Initialized(uint8 version);\n    event RespectedGameTypeSet(GameType indexed newGameType, Timestamp indexed updatedAt);\n    event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData);\n    event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success);\n    event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to);\n    event WithdrawalProvenExtension1(bytes32 indexed withdrawalHash, address indexed proofSubmitter);\n\n    receive() external payable;\n\n    function blacklistDisputeGame(IDisputeGame _disputeGame) external;\n    function checkWithdrawal(bytes32 _withdrawalHash, address _proofSubmitter) external view;\n    function depositTransaction(\n        address _to,\n        uint256 _value,\n        uint64 _gasLimit,\n        bool _isCreation,\n        bytes memory _data\n    )\n        external\n        payable;\n    function disputeGameBlacklist(IDisputeGame) external view returns (bool);\n    function disputeGameFactory() external view returns (IDisputeGameFactory);\n    function disputeGameFinalityDelaySeconds() external view returns (uint256);\n    function donateETH() external payable;\n    function finalizeWithdrawalTransaction(Types.WithdrawalTransaction memory _tx) external;\n    function finalizeWithdrawalTransactionExternalProof(\n        Types.WithdrawalTransaction memory _tx,\n        address _proofSubmitter\n    )\n        external;\n    function finalizedWithdrawals(bytes32) external view returns (bool);\n    function guardian() external view returns (address);\n    function initialize(\n        IDisputeGameFactory _disputeGameFactory,\n        ISystemConfig _systemConfig,\n        ISuperchainConfig _superchainConfig,\n        GameType _initialRespectedGameType\n    )\n        external;\n    function l2Sender() external view returns (address);\n    function minimumGasLimit(uint64 _byteCount) external pure returns (uint64);\n    function numProofSubmitters(bytes32 _withdrawalHash) external view returns (uint256);\n    function params() external view returns (uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum); // nosemgrep\n    function paused() external view returns (bool);\n    function proofMaturityDelaySeconds() external view returns (uint256);\n    function proofSubmitters(bytes32, uint256) external view returns (address);\n    function proveWithdrawalTransaction(\n        Types.WithdrawalTransaction memory _tx,\n        uint256 _disputeGameIndex,\n        Types.OutputRootProof memory _outputRootProof,\n        bytes[] memory _withdrawalProof\n    )\n        external;\n    function provenWithdrawals(\n        bytes32,\n        address\n    )\n        external\n        view\n        returns (IDisputeGame disputeGameProxy, uint64 timestamp); // nosemgrep\n    function respectedGameType() external view returns (GameType);\n    function respectedGameTypeUpdatedAt() external view returns (uint64);\n    function setRespectedGameType(GameType _gameType) external;\n    function superchainConfig() external view returns (ISuperchainConfig);\n    function systemConfig() external view returns (ISystemConfig);\n    function version() external pure returns (string memory);\n\n    function __constructor__(uint256 _proofMaturityDelaySeconds, uint256 _disputeGameFinalityDelaySeconds) external;\n}\n"
    },
    "interfaces/dispute/IDisputeGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IInitializable } from \"interfaces/dispute/IInitializable.sol\";\nimport { Timestamp, GameStatus, GameType, Claim, Hash } from \"src/dispute/lib/Types.sol\";\n\ninterface IDisputeGame is IInitializable {\n    event Resolved(GameStatus indexed status);\n\n    function createdAt() external view returns (Timestamp);\n    function resolvedAt() external view returns (Timestamp);\n    function status() external view returns (GameStatus);\n    function gameType() external view returns (GameType gameType_);\n    function gameCreator() external pure returns (address creator_);\n    function rootClaim() external pure returns (Claim rootClaim_);\n    function l1Head() external pure returns (Hash l1Head_);\n    function l2BlockNumber() external pure returns (uint256 l2BlockNumber_);\n    function extraData() external pure returns (bytes memory extraData_);\n    function resolve() external returns (GameStatus status_);\n    function gameData() external view returns (GameType gameType_, Claim rootClaim_, bytes memory extraData_);\n    function wasRespectedGameTypeWhenCreated() external view returns (bool);\n}\n"
    },
    "src/dispute/lib/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\n// Libraries\nimport {\n    Position,\n    Hash,\n    GameType,\n    VMStatus,\n    Timestamp,\n    Duration,\n    Clock,\n    GameId,\n    Claim,\n    LibGameId,\n    LibClock\n} from \"src/dispute/lib/LibUDT.sol\";\n\n/// @notice The current status of the dispute game.\nenum GameStatus {\n    // The game is currently in progress, and has not been resolved.\n    IN_PROGRESS,\n    // The game has concluded, and the `rootClaim` was challenged successfully.\n    CHALLENGER_WINS,\n    // The game has concluded, and the `rootClaim` could not be contested.\n    DEFENDER_WINS\n}\n\n/// @notice The game's bond distribution type. Games are expected to start in the `UNDECIDED`\n///         state, and then choose either `NORMAL` or `REFUND`.\nenum BondDistributionMode {\n    // Bond distribution strategy has not been chosen.\n    UNDECIDED,\n    // Bonds should be distributed as normal.\n    NORMAL,\n    // Bonds should be refunded to claimants.\n    REFUND\n}\n\n/// @notice Represents an L2 output root and the L2 block number at which it was generated.\n/// @custom:field root The output root.\n/// @custom:field l2BlockNumber The L2 block number at which the output root was generated.\nstruct OutputRoot {\n    Hash root;\n    uint256 l2BlockNumber;\n}\n\n/// @title GameTypes\n/// @notice A library that defines the IDs of games that can be played.\nlibrary GameTypes {\n    /// @dev A dispute game type the uses the cannon vm.\n    GameType internal constant CANNON = GameType.wrap(0);\n\n    /// @dev A permissioned dispute game type that uses the cannon vm.\n    GameType internal constant PERMISSIONED_CANNON = GameType.wrap(1);\n\n    /// @notice A dispute game type that uses the asterisc vm.\n    GameType internal constant ASTERISC = GameType.wrap(2);\n\n    /// @notice A dispute game type that uses the asterisc vm with Kona.\n    GameType internal constant ASTERISC_KONA = GameType.wrap(3);\n\n    /// @notice A dispute game type that uses OP Succinct\n    GameType internal constant OP_SUCCINCT = GameType.wrap(6);\n\n    /// @notice A dispute game type with short game duration for testing withdrawals.\n    ///         Not intended for production use.\n    GameType internal constant FAST = GameType.wrap(254);\n\n    /// @notice A dispute game type that uses an alphabet vm.\n    ///         Not intended for production use.\n    GameType internal constant ALPHABET = GameType.wrap(255);\n\n    /// @notice A dispute game type that uses RISC Zero's Kailua\n    GameType internal constant KAILUA = GameType.wrap(1337);\n}\n\n/// @title VMStatuses\n/// @notice Named type aliases for the various valid VM status bytes.\nlibrary VMStatuses {\n    /// @notice The VM has executed successfully and the outcome is valid.\n    VMStatus internal constant VALID = VMStatus.wrap(0);\n\n    /// @notice The VM has executed successfully and the outcome is invalid.\n    VMStatus internal constant INVALID = VMStatus.wrap(1);\n\n    /// @notice The VM has paniced.\n    VMStatus internal constant PANIC = VMStatus.wrap(2);\n\n    /// @notice The VM execution is still in progress.\n    VMStatus internal constant UNFINISHED = VMStatus.wrap(3);\n}\n\n/// @title LocalPreimageKey\n/// @notice Named type aliases for local `PreimageOracle` key identifiers.\nlibrary LocalPreimageKey {\n    /// @notice The identifier for the L1 head hash.\n    uint256 internal constant L1_HEAD_HASH = 0x01;\n\n    /// @notice The identifier for the starting output root.\n    uint256 internal constant STARTING_OUTPUT_ROOT = 0x02;\n\n    /// @notice The identifier for the disputed output root.\n    uint256 internal constant DISPUTED_OUTPUT_ROOT = 0x03;\n\n    /// @notice The identifier for the disputed L2 block number.\n    uint256 internal constant DISPUTED_L2_BLOCK_NUMBER = 0x04;\n\n    /// @notice The identifier for the chain ID.\n    uint256 internal constant CHAIN_ID = 0x05;\n}\n"
    },
    "lib/safe-contracts/contracts/common/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SelfAuthorized - authorizes current contract to perform actions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SelfAuthorized {\n    function requireSelfCall() private view {\n        require(msg.sender == address(this), \"GS031\");\n    }\n\n    modifier authorized() {\n        // This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"
    },
    "lib/safe-contracts/contracts/base/Executor.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\n\n/// @title Executor - A contract that can execute transactions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Executor {\n    function execute(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txGas\n    ) internal returns (bool success) {\n        if (operation == Enum.Operation.DelegateCall) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n            }\n        } else {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n            }\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "interfaces/dispute/IDisputeGameFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IDisputeGame } from \"interfaces/dispute/IDisputeGame.sol\";\nimport { GameId, Timestamp, Claim, Hash, GameType } from \"src/dispute/lib/Types.sol\";\n\ninterface IDisputeGameFactory {\n    struct GameSearchResult {\n        uint256 index;\n        GameId metadata;\n        Timestamp timestamp;\n        Claim rootClaim;\n        bytes extraData;\n    }\n\n    error GameAlreadyExists(Hash uuid);\n    error IncorrectBondAmount();\n    error NoImplementation(GameType gameType);\n\n    event DisputeGameCreated(address indexed disputeProxy, GameType indexed gameType, Claim indexed rootClaim);\n    event ImplementationSet(address indexed impl, GameType indexed gameType);\n    event InitBondUpdated(GameType indexed gameType, uint256 indexed newBond);\n    event Initialized(uint8 version);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function create(\n        GameType _gameType,\n        Claim _rootClaim,\n        bytes memory _extraData\n    )\n        external\n        payable\n        returns (IDisputeGame proxy_);\n    function findLatestGames(\n        GameType _gameType,\n        uint256 _start,\n        uint256 _n\n    )\n        external\n        view\n        returns (GameSearchResult[] memory games_);\n    function gameAtIndex(uint256 _index)\n        external\n        view\n        returns (GameType gameType_, Timestamp timestamp_, IDisputeGame proxy_);\n    function gameCount() external view returns (uint256 gameCount_);\n    function gameImpls(GameType) external view returns (IDisputeGame);\n    function games(\n        GameType _gameType,\n        Claim _rootClaim,\n        bytes memory _extraData\n    )\n        external\n        view\n        returns (IDisputeGame proxy_, Timestamp timestamp_);\n    function getGameUUID(\n        GameType _gameType,\n        Claim _rootClaim,\n        bytes memory _extraData\n    )\n        external\n        pure\n        returns (Hash uuid_);\n    function initBonds(GameType) external view returns (uint256);\n    function initialize(address _owner) external;\n    function owner() external view returns (address);\n    function renounceOwnership() external;\n    function setImplementation(GameType _gameType, IDisputeGame _impl) external;\n    function setInitBond(GameType _gameType, uint256 _initBond) external;\n    function transferOwnership(address newOwner) external; // nosemgrep\n    function version() external view returns (string memory);\n\n    function __constructor__() external;\n}\n"
    },
    "interfaces/dispute/IDelayedWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { ISuperchainConfig } from \"interfaces/L1/ISuperchainConfig.sol\";\n\ninterface IDelayedWETH {\n    struct WithdrawalRequest {\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Initialized(uint8 version);\n\n    fallback() external payable;\n    receive() external payable;\n\n    function config() external view returns (ISuperchainConfig);\n    function delay() external view returns (uint256);\n    function hold(address _guy) external;\n    function hold(address _guy, uint256 _wad) external;\n    function initialize(address _owner, ISuperchainConfig _config) external;\n    function owner() external view returns (address);\n    function recover(uint256 _wad) external;\n    function transferOwnership(address newOwner) external; // nosemgrep\n    function renounceOwnership() external;\n    function unlock(address _guy, uint256 _wad) external;\n    function withdraw(address _guy, uint256 _wad) external;\n    function withdrawals(address, address) external view returns (uint256 amount, uint256 timestamp);\n    function version() external view returns (string memory);\n\n    function withdraw(uint256 _wad) external;\n\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n\n    event Deposit(address indexed dst, uint256 wad);\n\n    event Withdrawal(address indexed src, uint256 wad);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address src) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function deposit() external payable;\n\n    function totalSupply() external view returns (uint256);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\n\n    function __constructor__(uint256 _delay) external;\n}\n"
    },
    "interfaces/dispute/IBigStepper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IPreimageOracle } from \"interfaces/cannon/IPreimageOracle.sol\";\n\n/// @title IBigStepper\n/// @notice Describes a state machine that can perform a single instruction step, provided a prestate and an optional\n///         proof.\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⠶⢅⠒⢄⢔⣶⡦⣤⡤⠄⣀⠀⠀⠀⠀⠀⠀⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⡏⠀⠀⠈⠢⣙⢯⣄⠀⢨⠯⡺⡘⢄⠀⠀⠀⠀⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⡆⠀⠀⠀⠀⠈⠓⠬⡒⠡⣀⢙⡜⡀⠓⠄⠀⠀⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡷⠿⣧⣀⡀⠀⠀⠀⠀⠀⠀⠉⠣⣞⠩⠥⠀⠼⢄⠀⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠉⢹⣶⠒⠒⠂⠈⠉⠁⠘⡆⠀⣿⣿⠫⡄⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢶⣤⣀⡀⠀⠀⢸⡿⠀⠀⠀⠀⠀⢀⠞⠀⠀⢡⢨⢀⡄⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡒⣿⢿⡤⠝⡣⠉⠁⠚⠛⠀⠤⠤⣄⡰⠁⠀⠀⠀⠉⠙⢸⠀⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⢯⡌⡿⡇⠘⡷⠀⠁⠀⠀⢀⣰⠢⠲⠛⣈⣸⠦⠤⠶⠴⢬⣐⣊⡂⠀\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⡪⡗⢫⠞⠀⠆⣀⠻⠤⠴⠐⠚⣉⢀⠦⠂⠋⠁⠀⠁⠀⠀⠀⠀⢋⠉⠇⠀\n/// ⠀⠀⠀⠀⣀⡤⠐⠒⠘⡹⠉⢸⠇⠸⠀⠀⠀⠀⣀⣤⠴⠚⠉⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠼⠀⣾⠀\n/// ⠀⠀⠀⡰⠀⠉⠉⠀⠁⠀⠀⠈⢇⠈⠒⠒⠘⠈⢀⢡⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠀⢸⡄\n/// ⠀⠀⠸⣿⣆⠤⢀⡀⠀⠀⠀⠀⢘⡌⠀⠀⣀⣀⣀⡈⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⢸⡇\n/// ⠀⠀⢸⣀⠀⠉⠒⠐⠛⠋⠭⠭⠍⠉⠛⠒⠒⠒⠀⠒⠚⠛⠛⠛⠩⠭⠭⠭⠭⠤⠤⠤⠤⠤⠭⠭⠉⠓⡆\n/// ⠀⠀⠘⠿⣷⣶⣤⣤⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇\n/// ⠀⠀⠀⠀⠀⠉⠙⠛⠛⠻⠿⢿⣿⣿⣷⣶⣶⣶⣤⣤⣀⣁⣛⣃⣒⠿⠿⠿⠤⠠⠄⠤⠤⢤⣛⣓⣂⣻⡇\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠙⠛⠻⠿⠿⠿⢿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⠿⠟⠁\n/// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠈⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀\ninterface IBigStepper {\n    /// @notice Performs the state transition from a given prestate and returns the hash of the post state witness.\n    /// @param _stateData The raw opaque prestate data.\n    /// @param _proof Opaque proof data, can be used to prove things about the prestate in relation to the state of the\n    ///               interface's implementation.\n    /// @param _localContext The local key context for the preimage oracle. Optional, can be set as a constant if the\n    ///                      implementation only requires one set of local keys.\n    /// @return postState_ The hash of the post state witness after the state transition.\n    function step(\n        bytes calldata _stateData,\n        bytes calldata _proof,\n        bytes32 _localContext\n    )\n        external\n        returns (bytes32 postState_);\n\n    /// @notice Returns the preimage oracle used by the state machine.\n    function oracle() external view returns (IPreimageOracle oracle_);\n}\n"
    },
    "src/libraries/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Types\n/// @notice Contains various types used throughout the Optimism contract system.\nlibrary Types {\n    /// @notice OutputProposal represents a commitment to the L2 state. The timestamp is the L1\n    ///         timestamp that the output root is posted. This timestamp is used to verify that the\n    ///         finalization period has passed since the output root was submitted.\n    /// @custom:field outputRoot    Hash of the L2 output.\n    /// @custom:field timestamp     Timestamp of the L1 block that the output root was submitted in.\n    /// @custom:field l2BlockNumber L2 block number that the output corresponds to.\n    struct OutputProposal {\n        bytes32 outputRoot;\n        uint128 timestamp;\n        uint128 l2BlockNumber;\n    }\n\n    /// @notice Struct representing the elements that are hashed together to generate an output root\n    ///         which itself represents a snapshot of the L2 state.\n    /// @custom:field version                  Version of the output root.\n    /// @custom:field stateRoot                Root of the state trie at the block of this output.\n    /// @custom:field messagePasserStorageRoot Root of the message passer storage trie.\n    /// @custom:field latestBlockhash          Hash of the block this output was generated from.\n    struct OutputRootProof {\n        bytes32 version;\n        bytes32 stateRoot;\n        bytes32 messagePasserStorageRoot;\n        bytes32 latestBlockhash;\n    }\n\n    /// @notice Struct representing a deposit transaction (L1 => L2 transaction) created by an end\n    ///         user (as opposed to a system deposit transaction generated by the system).\n    /// @custom:field from        Address of the sender of the transaction.\n    /// @custom:field to          Address of the recipient of the transaction.\n    /// @custom:field isCreation  True if the transaction is a contract creation.\n    /// @custom:field value       Value to send to the recipient.\n    /// @custom:field mint        Amount of ETH to mint.\n    /// @custom:field gasLimit    Gas limit of the transaction.\n    /// @custom:field data        Data of the transaction.\n    /// @custom:field l1BlockHash Hash of the block the transaction was submitted in.\n    /// @custom:field logIndex    Index of the log in the block the transaction was submitted in.\n    struct UserDepositTransaction {\n        address from;\n        address to;\n        bool isCreation;\n        uint256 value;\n        uint256 mint;\n        uint64 gasLimit;\n        bytes data;\n        bytes32 l1BlockHash;\n        uint256 logIndex;\n    }\n\n    /// @notice Struct representing a withdrawal transaction.\n    /// @custom:field nonce    Nonce of the withdrawal transaction\n    /// @custom:field sender   Address of the sender of the transaction.\n    /// @custom:field target   Address of the recipient of the transaction.\n    /// @custom:field value    Value to send to the recipient.\n    /// @custom:field gasLimit Gas limit of the transaction.\n    /// @custom:field data     Data of the transaction.\n    struct WithdrawalTransaction {\n        uint256 nonce;\n        address sender;\n        address target;\n        uint256 value;\n        uint256 gasLimit;\n        bytes data;\n    }\n\n    /// @notice Enum representing where the FeeVault withdraws funds to.\n    /// @custom:value L1 FeeVault withdraws funds to L1.\n    /// @custom:value L2 FeeVault withdraws funds to L2.\n    enum WithdrawalNetwork {\n        L1,\n        L2\n    }\n}\n"
    },
    "src/dispute/lib/LibUDT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\n// Libraries\nimport { Position } from \"src/dispute/lib/LibPosition.sol\";\n\nusing LibClaim for Claim global;\nusing LibHash for Hash global;\nusing LibDuration for Duration global;\nusing LibClock for Clock global;\nusing LibGameId for GameId global;\nusing LibTimestamp for Timestamp global;\nusing LibVMStatus for VMStatus global;\nusing LibGameType for GameType global;\n\n/// @notice A `Clock` represents a packed `Duration` and `Timestamp`\n/// @dev The packed layout of this type is as follows:\n/// ┌────────────┬────────────────┐\n/// │    Bits    │     Value      │\n/// ├────────────┼────────────────┤\n/// │ [0, 64)    │ Duration       │\n/// │ [64, 128)  │ Timestamp      │\n/// └────────────┴────────────────┘\ntype Clock is uint128;\n\n/// @title LibClock\n/// @notice This library contains helper functions for working with the `Clock` type.\nlibrary LibClock {\n    /// @notice Packs a `Duration` and `Timestamp` into a `Clock` type.\n    /// @param _duration The `Duration` to pack into the `Clock` type.\n    /// @param _timestamp The `Timestamp` to pack into the `Clock` type.\n    /// @return clock_ The `Clock` containing the `_duration` and `_timestamp`.\n    function wrap(Duration _duration, Timestamp _timestamp) internal pure returns (Clock clock_) {\n        assembly {\n            clock_ := or(shl(0x40, _duration), _timestamp)\n        }\n    }\n\n    /// @notice Pull the `Duration` out of a `Clock` type.\n    /// @param _clock The `Clock` type to pull the `Duration` out of.\n    /// @return duration_ The `Duration` pulled out of `_clock`.\n    function duration(Clock _clock) internal pure returns (Duration duration_) {\n        // Shift the high-order 64 bits into the low-order 64 bits, leaving only the `duration`.\n        assembly {\n            duration_ := shr(0x40, _clock)\n        }\n    }\n\n    /// @notice Pull the `Timestamp` out of a `Clock` type.\n    /// @param _clock The `Clock` type to pull the `Timestamp` out of.\n    /// @return timestamp_ The `Timestamp` pulled out of `_clock`.\n    function timestamp(Clock _clock) internal pure returns (Timestamp timestamp_) {\n        // Clean the high-order 192 bits by shifting the clock left and then right again, leaving\n        // only the `timestamp`.\n        assembly {\n            timestamp_ := shr(0xC0, shl(0xC0, _clock))\n        }\n    }\n\n    /// @notice Get the value of a `Clock` type in the form of the underlying uint128.\n    /// @param _clock The `Clock` type to get the value of.\n    /// @return clock_ The value of the `Clock` type as a uint128 type.\n    function raw(Clock _clock) internal pure returns (uint128 clock_) {\n        assembly {\n            clock_ := _clock\n        }\n    }\n}\n\n/// @notice A `GameId` represents a packed 4 byte game ID, a 8 byte timestamp, and a 20 byte address.\n/// @dev The packed layout of this type is as follows:\n/// ┌───────────┬───────────┐\n/// │   Bits    │   Value   │\n/// ├───────────┼───────────┤\n/// │ [0, 32)   │ Game Type │\n/// │ [32, 96)  │ Timestamp │\n/// │ [96, 256) │ Address   │\n/// └───────────┴───────────┘\ntype GameId is bytes32;\n\n/// @title LibGameId\n/// @notice Utility functions for packing and unpacking GameIds.\nlibrary LibGameId {\n    /// @notice Packs values into a 32 byte GameId type.\n    /// @param _gameType The game type.\n    /// @param _timestamp The timestamp of the game's creation.\n    /// @param _gameProxy The game proxy address.\n    /// @return gameId_ The packed GameId.\n    function pack(\n        GameType _gameType,\n        Timestamp _timestamp,\n        address _gameProxy\n    )\n        internal\n        pure\n        returns (GameId gameId_)\n    {\n        assembly {\n            gameId_ := or(or(shl(224, _gameType), shl(160, _timestamp)), _gameProxy)\n        }\n    }\n\n    /// @notice Unpacks values from a 32 byte GameId type.\n    /// @param _gameId The packed GameId.\n    /// @return gameType_ The game type.\n    /// @return timestamp_ The timestamp of the game's creation.\n    /// @return gameProxy_ The game proxy address.\n    function unpack(GameId _gameId)\n        internal\n        pure\n        returns (GameType gameType_, Timestamp timestamp_, address gameProxy_)\n    {\n        assembly {\n            gameType_ := shr(224, _gameId)\n            timestamp_ := and(shr(160, _gameId), 0xFFFFFFFFFFFFFFFF)\n            gameProxy_ := and(_gameId, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n    }\n}\n\n/// @notice A claim represents an MPT root representing the state of the fault proof program.\ntype Claim is bytes32;\n\n/// @title LibClaim\n/// @notice This library contains helper functions for working with the `Claim` type.\nlibrary LibClaim {\n    /// @notice Get the value of a `Claim` type in the form of the underlying bytes32.\n    /// @param _claim The `Claim` type to get the value of.\n    /// @return claim_ The value of the `Claim` type as a bytes32 type.\n    function raw(Claim _claim) internal pure returns (bytes32 claim_) {\n        assembly {\n            claim_ := _claim\n        }\n    }\n\n    /// @notice Hashes a claim and a position together.\n    /// @param _claim A Claim type.\n    /// @param _position The position of `claim`.\n    /// @param _challengeIndex The index of the claim being moved against.\n    /// @return claimHash_ A hash of abi.encodePacked(claim, position|challengeIndex);\n    function hashClaimPos(\n        Claim _claim,\n        Position _position,\n        uint256 _challengeIndex\n    )\n        internal\n        pure\n        returns (Hash claimHash_)\n    {\n        assembly {\n            mstore(0x00, _claim)\n            mstore(0x20, or(shl(128, _position), and(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, _challengeIndex)))\n            claimHash_ := keccak256(0x00, 0x40)\n        }\n    }\n}\n\n/// @notice A dedicated duration type.\n/// @dev Unit: seconds\ntype Duration is uint64;\n\n/// @title LibDuration\n/// @notice This library contains helper functions for working with the `Duration` type.\nlibrary LibDuration {\n    /// @notice Get the value of a `Duration` type in the form of the underlying uint64.\n    /// @param _duration The `Duration` type to get the value of.\n    /// @return duration_ The value of the `Duration` type as a uint64 type.\n    function raw(Duration _duration) internal pure returns (uint64 duration_) {\n        assembly {\n            duration_ := _duration\n        }\n    }\n}\n\n/// @notice A custom type for a generic hash.\ntype Hash is bytes32;\n\n/// @title LibHash\n/// @notice This library contains helper functions for working with the `Hash` type.\nlibrary LibHash {\n    /// @notice Get the value of a `Hash` type in the form of the underlying bytes32.\n    /// @param _hash The `Hash` type to get the value of.\n    /// @return hash_ The value of the `Hash` type as a bytes32 type.\n    function raw(Hash _hash) internal pure returns (bytes32 hash_) {\n        assembly {\n            hash_ := _hash\n        }\n    }\n}\n\n/// @notice A dedicated timestamp type.\ntype Timestamp is uint64;\n\n/// @title LibTimestamp\n/// @notice This library contains helper functions for working with the `Timestamp` type.\nlibrary LibTimestamp {\n    /// @notice Get the value of a `Timestamp` type in the form of the underlying uint64.\n    /// @param _timestamp The `Timestamp` type to get the value of.\n    /// @return timestamp_ The value of the `Timestamp` type as a uint64 type.\n    function raw(Timestamp _timestamp) internal pure returns (uint64 timestamp_) {\n        assembly {\n            timestamp_ := _timestamp\n        }\n    }\n}\n\n/// @notice A `VMStatus` represents the status of a VM execution.\ntype VMStatus is uint8;\n\n/// @title LibVMStatus\n/// @notice This library contains helper functions for working with the `VMStatus` type.\nlibrary LibVMStatus {\n    /// @notice Get the value of a `VMStatus` type in the form of the underlying uint8.\n    /// @param _vmstatus The `VMStatus` type to get the value of.\n    /// @return vmstatus_ The value of the `VMStatus` type as a uint8 type.\n    function raw(VMStatus _vmstatus) internal pure returns (uint8 vmstatus_) {\n        assembly {\n            vmstatus_ := _vmstatus\n        }\n    }\n}\n\n/// @notice A `GameType` represents the type of game being played.\ntype GameType is uint32;\n\n/// @title LibGameType\n/// @notice This library contains helper functions for working with the `GameType` type.\nlibrary LibGameType {\n    /// @notice Get the value of a `GameType` type in the form of the underlying uint32.\n    /// @param _gametype The `GameType` type to get the value of.\n    /// @return gametype_ The value of the `GameType` type as a uint32 type.\n    function raw(GameType _gametype) internal pure returns (uint32 gametype_) {\n        assembly {\n            gametype_ := _gametype\n        }\n    }\n}\n"
    },
    "interfaces/L1/ISystemConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IResourceMetering } from \"interfaces/L1/IResourceMetering.sol\";\n\ninterface ISystemConfig {\n    enum UpdateType {\n        BATCHER,\n        FEE_SCALARS,\n        GAS_LIMIT,\n        UNSAFE_BLOCK_SIGNER,\n        EIP_1559_PARAMS\n    }\n\n    struct Addresses {\n        address l1CrossDomainMessenger;\n        address l1ERC721Bridge;\n        address l1StandardBridge;\n        address disputeGameFactory;\n        address optimismPortal;\n        address optimismMintableERC20Factory;\n    }\n\n    event ConfigUpdate(uint256 indexed version, UpdateType indexed updateType, bytes data);\n    event Initialized(uint8 version);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function BATCH_INBOX_SLOT() external view returns (bytes32);\n    function DISPUTE_GAME_FACTORY_SLOT() external view returns (bytes32);\n    function L1_CROSS_DOMAIN_MESSENGER_SLOT() external view returns (bytes32);\n    function L1_ERC_721_BRIDGE_SLOT() external view returns (bytes32);\n    function L1_STANDARD_BRIDGE_SLOT() external view returns (bytes32);\n    function OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT() external view returns (bytes32);\n    function OPTIMISM_PORTAL_SLOT() external view returns (bytes32);\n    function START_BLOCK_SLOT() external view returns (bytes32);\n    function UNSAFE_BLOCK_SIGNER_SLOT() external view returns (bytes32);\n    function VERSION() external view returns (uint256);\n    function basefeeScalar() external view returns (uint32);\n    function batchInbox() external view returns (address addr_);\n    function batcherHash() external view returns (bytes32);\n    function blobbasefeeScalar() external view returns (uint32);\n    function disputeGameFactory() external view returns (address addr_);\n    function gasLimit() external view returns (uint64);\n    function eip1559Denominator() external view returns (uint32);\n    function eip1559Elasticity() external view returns (uint32);\n    function getAddresses() external view returns (Addresses memory);\n    function initialize(\n        address _owner,\n        uint32 _basefeeScalar,\n        uint32 _blobbasefeeScalar,\n        bytes32 _batcherHash,\n        uint64 _gasLimit,\n        address _unsafeBlockSigner,\n        IResourceMetering.ResourceConfig memory _config,\n        address _batchInbox,\n        Addresses memory _addresses\n    )\n        external;\n    function l1CrossDomainMessenger() external view returns (address addr_);\n    function l1ERC721Bridge() external view returns (address addr_);\n    function l1StandardBridge() external view returns (address addr_);\n    function maximumGasLimit() external pure returns (uint64);\n    function minimumGasLimit() external view returns (uint64);\n    function optimismMintableERC20Factory() external view returns (address addr_);\n    function optimismPortal() external view returns (address addr_);\n    function overhead() external view returns (uint256);\n    function owner() external view returns (address);\n    function renounceOwnership() external;\n    function resourceConfig() external view returns (IResourceMetering.ResourceConfig memory);\n    function scalar() external view returns (uint256);\n    function setBatcherHash(bytes32 _batcherHash) external;\n    function setGasConfig(uint256 _overhead, uint256 _scalar) external;\n    function setGasConfigEcotone(uint32 _basefeeScalar, uint32 _blobbasefeeScalar) external;\n    function setGasLimit(uint64 _gasLimit) external;\n    function setUnsafeBlockSigner(address _unsafeBlockSigner) external;\n    function setEIP1559Params(uint32 _denominator, uint32 _elasticity) external;\n    function startBlock() external view returns (uint256 startBlock_);\n    function transferOwnership(address newOwner) external; // nosemgrep\n    function unsafeBlockSigner() external view returns (address addr_);\n    function version() external pure returns (string memory);\n\n    function __constructor__() external;\n}\n"
    },
    "interfaces/dispute/IInitializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IInitializable {\n    function initialize() external payable;\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-v5/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "interfaces/cannon/IPreimageOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { LibKeccak } from \"@lib-keccak/LibKeccak.sol\";\nimport { LPPMetaData } from \"src/cannon/libraries/CannonTypes.sol\";\n\ninterface IPreimageOracle {\n    struct Leaf {\n        bytes input;\n        uint256 index;\n        bytes32 stateCommitment;\n    }\n\n    error ActiveProposal();\n    error AlreadyFinalized();\n    error AlreadyInitialized();\n    error BadProposal();\n    error BondTransferFailed();\n    error InsufficientBond();\n    error InvalidInputSize();\n    error InvalidPreimage();\n    error InvalidProof();\n    error NotEOA();\n    error NotInitialized();\n    error PartOffsetOOB();\n    error PostStateMatches();\n    error StatesNotContiguous();\n    error TreeSizeOverflow();\n    error WrongStartingBlock();\n\n    function KECCAK_TREE_DEPTH() external view returns (uint256);\n    function MAX_LEAF_COUNT() external view returns (uint256);\n    function MIN_BOND_SIZE() external view returns (uint256);\n    function PRECOMPILE_CALL_RESERVED_GAS() external view returns (uint256);\n    function addLeavesLPP(\n        uint256 _uuid,\n        uint256 _inputStartBlock,\n        bytes memory _input,\n        bytes32[] memory _stateCommitments,\n        bool _finalize\n    )\n        external;\n    function challengeFirstLPP(\n        address _claimant,\n        uint256 _uuid,\n        Leaf memory _postState,\n        bytes32[] memory _postStateProof\n    )\n        external;\n    function challengeLPP(\n        address _claimant,\n        uint256 _uuid,\n        LibKeccak.StateMatrix memory _stateMatrix,\n        Leaf memory _preState,\n        bytes32[] memory _preStateProof,\n        Leaf memory _postState,\n        bytes32[] memory _postStateProof\n    )\n        external;\n    function challengePeriod() external view returns (uint256 challengePeriod_);\n    function getTreeRootLPP(address _owner, uint256 _uuid) external view returns (bytes32 treeRoot_);\n    function initLPP(uint256 _uuid, uint32 _partOffset, uint32 _claimedSize) external payable;\n    function loadBlobPreimagePart(\n        uint256 _z,\n        uint256 _y,\n        bytes memory _commitment,\n        bytes memory _proof,\n        uint256 _partOffset\n    )\n        external;\n    function loadKeccak256PreimagePart(uint256 _partOffset, bytes memory _preimage) external;\n    function loadLocalData(\n        uint256 _ident,\n        bytes32 _localContext,\n        bytes32 _word,\n        uint256 _size,\n        uint256 _partOffset\n    )\n        external\n        returns (bytes32 key_);\n    function loadPrecompilePreimagePart(\n        uint256 _partOffset,\n        address _precompile,\n        uint64 _requiredGas,\n        bytes memory _input\n    )\n        external;\n    function loadSha256PreimagePart(uint256 _partOffset, bytes memory _preimage) external;\n    function minProposalSize() external view returns (uint256 minProposalSize_);\n    function preimageLengths(bytes32) external view returns (uint256);\n    function preimagePartOk(bytes32, uint256) external view returns (bool);\n    function preimageParts(bytes32, uint256) external view returns (bytes32);\n    function proposalBlocks(address, uint256, uint256) external view returns (uint64);\n    function proposalBlocksLen(address _claimant, uint256 _uuid) external view returns (uint256 len_);\n    function proposalBonds(address, uint256) external view returns (uint256);\n    function proposalBranches(address, uint256, uint256) external view returns (bytes32);\n    function proposalCount() external view returns (uint256 count_);\n    function proposalMetadata(address, uint256) external view returns (LPPMetaData);\n    function proposalParts(address, uint256) external view returns (bytes32);\n    function proposals(uint256) external view returns (address claimant, uint256 uuid); // nosemgrep:\n        // sol-style-return-arg-fmt\n    function readPreimage(bytes32 _key, uint256 _offset) external view returns (bytes32 dat_, uint256 datLen_);\n    function squeezeLPP(\n        address _claimant,\n        uint256 _uuid,\n        LibKeccak.StateMatrix memory _stateMatrix,\n        Leaf memory _preState,\n        bytes32[] memory _preStateProof,\n        Leaf memory _postState,\n        bytes32[] memory _postStateProof\n    )\n        external;\n    function version() external view returns (string memory);\n    function zeroHashes(uint256) external view returns (bytes32);\n\n    function __constructor__(uint256 _minProposalSize, uint256 _challengePeriod) external;\n}\n"
    },
    "src/dispute/lib/LibPosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nusing LibPosition for Position global;\n\n/// @notice A `Position` represents a position of a claim within the game tree.\n/// @dev This is represented as a \"generalized index\" where the high-order bit\n/// is the level in the tree and the remaining bits is a unique bit pattern, allowing\n/// a unique identifier for each node in the tree. Mathematically, it is calculated\n/// as 2^{depth} + indexAtDepth.\ntype Position is uint128;\n\n/// @title LibPosition\n/// @notice This library contains helper functions for working with the `Position` type.\nlibrary LibPosition {\n    /// @notice the `MAX_POSITION_BITLEN` is the number of bits that the `Position` type, and the implementation of\n    ///         its behavior within this library, can safely support.\n    uint8 internal constant MAX_POSITION_BITLEN = 126;\n\n    /// @notice Computes a generalized index (2^{depth} + indexAtDepth).\n    /// @param _depth The depth of the position.\n    /// @param _indexAtDepth The index at the depth of the position.\n    /// @return position_ The computed generalized index.\n    function wrap(uint8 _depth, uint128 _indexAtDepth) internal pure returns (Position position_) {\n        assembly {\n            // gindex = 2^{_depth} + _indexAtDepth\n            position_ := add(shl(_depth, 1), _indexAtDepth)\n        }\n    }\n\n    /// @notice Pulls the `depth` out of a `Position` type.\n    /// @param _position The generalized index to get the `depth` of.\n    /// @return depth_ The `depth` of the `position` gindex.\n    /// @custom:attribution Solady <https://github.com/Vectorized/Solady>\n    function depth(Position _position) internal pure returns (uint8 depth_) {\n        // Return the most significant bit offset, which signifies the depth of the gindex.\n        assembly {\n            depth_ := or(depth_, shl(6, lt(0xffffffffffffffff, shr(depth_, _position))))\n            depth_ := or(depth_, shl(5, lt(0xffffffff, shr(depth_, _position))))\n\n            // For the remaining 32 bits, use a De Bruijn lookup.\n            _position := shr(depth_, _position)\n            _position := or(_position, shr(1, _position))\n            _position := or(_position, shr(2, _position))\n            _position := or(_position, shr(4, _position))\n            _position := or(_position, shr(8, _position))\n            _position := or(_position, shr(16, _position))\n\n            depth_ :=\n                or(\n                    depth_,\n                    byte(\n                        shr(251, mul(_position, shl(224, 0x07c4acdd))),\n                        0x0009010a0d15021d0b0e10121619031e080c141c0f111807131b17061a05041f\n                    )\n                )\n        }\n    }\n\n    /// @notice Pulls the `indexAtDepth` out of a `Position` type.\n    ///         The `indexAtDepth` is the left/right index of a position at a specific depth within\n    ///         the binary tree, starting from index 0. For example, at gindex 2, the `depth` = 1\n    ///         and the `indexAtDepth` = 0.\n    /// @param _position The generalized index to get the `indexAtDepth` of.\n    /// @return indexAtDepth_ The `indexAtDepth` of the `position` gindex.\n    function indexAtDepth(Position _position) internal pure returns (uint128 indexAtDepth_) {\n        // Return bits p_{msb-1}...p_{0}. This effectively pulls the 2^{depth} out of the gindex,\n        // leaving only the `indexAtDepth`.\n        uint256 msb = depth(_position);\n        assembly {\n            indexAtDepth_ := sub(_position, shl(msb, 1))\n        }\n    }\n\n    /// @notice Get the left child of `_position`.\n    /// @param _position The position to get the left position of.\n    /// @return left_ The position to the left of `position`.\n    function left(Position _position) internal pure returns (Position left_) {\n        assembly {\n            left_ := shl(1, _position)\n        }\n    }\n\n    /// @notice Get the right child of `_position`\n    /// @param _position The position to get the right position of.\n    /// @return right_ The position to the right of `position`.\n    function right(Position _position) internal pure returns (Position right_) {\n        assembly {\n            right_ := or(1, shl(1, _position))\n        }\n    }\n\n    /// @notice Get the parent position of `_position`.\n    /// @param _position The position to get the parent position of.\n    /// @return parent_ The parent position of `position`.\n    function parent(Position _position) internal pure returns (Position parent_) {\n        assembly {\n            parent_ := shr(1, _position)\n        }\n    }\n\n    /// @notice Get the deepest, right most gindex relative to the `position`. This is equivalent to\n    ///         calling `right` on a position until the maximum depth is reached.\n    /// @param _position The position to get the relative deepest, right most gindex of.\n    /// @param _maxDepth The maximum depth of the game.\n    /// @return rightIndex_ The deepest, right most gindex relative to the `position`.\n    function rightIndex(Position _position, uint256 _maxDepth) internal pure returns (Position rightIndex_) {\n        uint256 msb = depth(_position);\n        assembly {\n            let remaining := sub(_maxDepth, msb)\n            rightIndex_ := or(shl(remaining, _position), sub(shl(remaining, 1), 1))\n        }\n    }\n\n    /// @notice Get the deepest, right most trace index relative to the `position`. This is\n    ///         equivalent to calling `right` on a position until the maximum depth is reached and\n    ///         then finding its index at depth.\n    /// @param _position The position to get the relative trace index of.\n    /// @param _maxDepth The maximum depth of the game.\n    /// @return traceIndex_ The trace index relative to the `position`.\n    function traceIndex(Position _position, uint256 _maxDepth) internal pure returns (uint256 traceIndex_) {\n        uint256 msb = depth(_position);\n        assembly {\n            let remaining := sub(_maxDepth, msb)\n            traceIndex_ := sub(or(shl(remaining, _position), sub(shl(remaining, 1), 1)), shl(_maxDepth, 1))\n        }\n    }\n\n    /// @notice Gets the position of the highest ancestor of `_position` that commits to the same\n    ///         trace index.\n    /// @param _position The position to get the highest ancestor of.\n    /// @return ancestor_ The highest ancestor of `position` that commits to the same trace index.\n    function traceAncestor(Position _position) internal pure returns (Position ancestor_) {\n        // Create a field with only the lowest unset bit of `_position` set.\n        Position lsb;\n        assembly {\n            lsb := and(not(_position), add(_position, 1))\n        }\n        // Find the index of the lowest unset bit within the field.\n        uint256 msb = depth(lsb);\n        // The highest ancestor that commits to the same trace index is the original position\n        // shifted right by the index of the lowest unset bit.\n        assembly {\n            let a := shr(msb, _position)\n            // Bound the ancestor to the minimum gindex, 1.\n            ancestor_ := or(a, iszero(a))\n        }\n    }\n\n    /// @notice Gets the position of the highest ancestor of `_position` that commits to the same\n    ///         trace index, while still being below `_upperBoundExclusive`.\n    /// @param _position The position to get the highest ancestor of.\n    /// @param _upperBoundExclusive The exclusive upper depth bound, used to inform where to stop in order\n    ///                             to not escape a sub-tree.\n    /// @return ancestor_ The highest ancestor of `position` that commits to the same trace index.\n    function traceAncestorBounded(\n        Position _position,\n        uint256 _upperBoundExclusive\n    )\n        internal\n        pure\n        returns (Position ancestor_)\n    {\n        // This function only works for positions that are below the upper bound.\n        if (_position.depth() <= _upperBoundExclusive) {\n            assembly {\n                // Revert with `ClaimAboveSplit()`\n                mstore(0x00, 0xb34b5c22)\n                revert(0x1C, 0x04)\n            }\n        }\n\n        // Grab the global trace ancestor.\n        ancestor_ = traceAncestor(_position);\n\n        // If the ancestor is above or at the upper bound, shift it to be below the upper bound.\n        // This should be a special case that only covers positions that commit to the final leaf\n        // in a sub-tree.\n        if (ancestor_.depth() <= _upperBoundExclusive) {\n            ancestor_ = ancestor_.rightIndex(_upperBoundExclusive + 1);\n        }\n    }\n\n    /// @notice Get the move position of `_position`, which is the left child of:\n    ///         1. `_position` if `_isAttack` is true.\n    ///         2. `_position | 1` if `_isAttack` is false.\n    /// @param _position The position to get the relative attack/defense position of.\n    /// @param _isAttack Whether or not the move is an attack move.\n    /// @return move_ The move position relative to `position`.\n    function move(Position _position, bool _isAttack) internal pure returns (Position move_) {\n        assembly {\n            move_ := shl(1, or(iszero(_isAttack), _position))\n        }\n    }\n\n    /// @notice Get the value of a `Position` type in the form of the underlying uint128.\n    /// @param _position The position to get the value of.\n    /// @return raw_ The value of the `position` as a uint128 type.\n    function raw(Position _position) internal pure returns (uint128 raw_) {\n        assembly {\n            raw_ := _position\n        }\n    }\n}\n"
    },
    "interfaces/L1/IResourceMetering.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IResourceMetering {\n    struct ResourceParams {\n        uint128 prevBaseFee;\n        uint64 prevBoughtGas;\n        uint64 prevBlockNum;\n    }\n\n    struct ResourceConfig {\n        uint32 maxResourceLimit;\n        uint8 elasticityMultiplier;\n        uint8 baseFeeMaxChangeDenominator;\n        uint32 minimumBaseFee;\n        uint32 systemTxMaxGas;\n        uint128 maximumBaseFee;\n    }\n\n    error OutOfGas();\n\n    event Initialized(uint8 version);\n\n    function params() external view returns (uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum); // nosemgrep\n\n    function __constructor__() external;\n}\n"
    },
    "lib/lib-keccak/contracts/lib/LibKeccak.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title LibKeccak\n/// @notice An EVM implementation of the Keccak-f[1600] permutation.\n/// @author clabby <https://github.com/clabby>\n/// @custom:attribution geohot <https://github.com/geohot>\nlibrary LibKeccak {\n    /// @notice The block size of the Keccak-f[1600] permutation, 1088 bits (136 bytes).\n    uint256 internal constant BLOCK_SIZE_BYTES = 136;\n\n    /// @notice The round constants for the keccak256 hash function. Packed in memory for efficient reading during the\n    ///         permutation.\n    bytes internal constant ROUND_CONSTANTS = abi.encode(\n        0x00000000000000010000000000008082800000000000808a8000000080008000, // r1,r2,r3,r4\n        0x000000000000808b000000008000000180000000800080818000000000008009, // r5,r6,r7,r8\n        0x000000000000008a00000000000000880000000080008009000000008000000a, // r9,r10,r11,r12\n        0x000000008000808b800000000000008b80000000000080898000000000008003, // r13,r14,r15,r16\n        0x80000000000080028000000000000080000000000000800a800000008000000a, // r17,r18,r19,r20\n        0x8000000080008081800000000000808000000000800000018000000080008008 // r21,r22,r23,r24\n    );\n\n    /// @notice A mask for 64-bit values.\n    uint64 private constant U64_MASK = 0xFFFFFFFFFFFFFFFF;\n\n    /// @notice The 5x5 state matrix for the keccak-f[1600] permutation.\n    struct StateMatrix {\n        uint64[25] state;\n    }\n\n    /// @notice Performs the Keccak-f[1600] permutation on the given 5x5 state matrix.\n    function permutation(StateMatrix memory _stateMatrix) internal pure {\n        // Pull the round constants into memory to avoid reallocation in the unrolled permutation loop.\n        bytes memory roundConstants = ROUND_CONSTANTS;\n\n        assembly {\n            // Add 32 to the state matrix pointer to skip the data location field.\n            let stateMatrixPtr := add(_stateMatrix, 0x20)\n            let rcPtr := add(roundConstants, 0x20)\n\n            // set a state element in the passed `StateMatrix` struct memory ptr.\n            function setStateElem(ptr, idx, data) {\n                mstore(add(ptr, shl(0x05, idx)), and(data, U64_MASK))\n            }\n\n            // fetch a state element from the passed `StateMatrix` struct memory ptr.\n            function stateElem(ptr, idx) -> elem {\n                elem := mload(add(ptr, shl(0x05, idx)))\n            }\n\n            // 64 bit logical shift\n            function shl64(a, b) -> val {\n                val := and(shl(a, b), U64_MASK)\n            }\n\n            // Performs an indivudual rho + pi computation, to be used in the full `thetaRhoPi` chain.\n            function rhoPi(ptr, destIdx, srcIdx, fact, dt) {\n                let xs1 := xor(stateElem(ptr, srcIdx), dt)\n                let res := xor(shl(fact, xs1), shr(sub(64, fact), xs1))\n                setStateElem(ptr, destIdx, res)\n            }\n\n            // xor a column in the state matrix\n            function xorColumn(ptr, col) -> val {\n                val :=\n                    xor(\n                        xor(xor(stateElem(ptr, col), stateElem(ptr, add(col, 5))), stateElem(ptr, add(col, 10))),\n                        xor(stateElem(ptr, add(col, 15)), stateElem(ptr, add(col, 20)))\n                    )\n            }\n\n            // Performs the `theta`, `rho`, and `pi` steps of the Keccak-f[1600] permutation on\n            // the passed `StateMatrix` struct memory ptr.\n            function thetaRhoPi(ptr) {\n                // Theta\n                let C0 := xorColumn(ptr, 0)\n                let C1 := xorColumn(ptr, 1)\n                let C2 := xorColumn(ptr, 2)\n                let C3 := xorColumn(ptr, 3)\n                let C4 := xorColumn(ptr, 4)\n                let D0 := xor(xor(shl64(1, C1), shr(63, C1)), C4)\n                let D1 := xor(xor(shl64(1, C2), shr(63, C2)), C0)\n                let D2 := xor(xor(shl64(1, C3), shr(63, C3)), C1)\n                let D3 := xor(xor(shl64(1, C4), shr(63, C4)), C2)\n                let D4 := xor(xor(shl64(1, C0), shr(63, C0)), C3)\n\n                let xs1 := xor(stateElem(ptr, 1), D1)\n                let A1 := xor(shl(1, xs1), shr(63, xs1))\n\n                let _ptr := ptr\n                setStateElem(_ptr, 0, xor(stateElem(_ptr, 0), D0))\n                rhoPi(_ptr, 1, 6, 44, D1)\n                rhoPi(_ptr, 6, 9, 20, D4)\n                rhoPi(_ptr, 9, 22, 61, D2)\n                rhoPi(_ptr, 22, 14, 39, D4)\n                rhoPi(_ptr, 14, 20, 18, D0)\n                rhoPi(_ptr, 20, 2, 62, D2)\n                rhoPi(_ptr, 2, 12, 43, D2)\n                rhoPi(_ptr, 12, 13, 25, D3)\n                rhoPi(_ptr, 13, 19, 8, D4)\n                rhoPi(_ptr, 19, 23, 56, D3)\n                rhoPi(_ptr, 23, 15, 41, D0)\n                rhoPi(_ptr, 15, 4, 27, D4)\n                rhoPi(_ptr, 4, 24, 14, D4)\n                rhoPi(_ptr, 24, 21, 2, D1)\n                rhoPi(_ptr, 21, 8, 55, D3)\n                rhoPi(_ptr, 8, 16, 45, D1)\n                rhoPi(_ptr, 16, 5, 36, D0)\n                rhoPi(_ptr, 5, 3, 28, D3)\n                rhoPi(_ptr, 3, 18, 21, D3)\n                rhoPi(_ptr, 18, 17, 15, D2)\n                rhoPi(_ptr, 17, 11, 10, D1)\n                rhoPi(_ptr, 11, 7, 6, D2)\n                rhoPi(_ptr, 7, 10, 3, D0)\n                setStateElem(_ptr, 10, A1)\n            }\n\n            // Inner `chi` function, unrolled in `chi` for performance.\n            function innerChi(ptr, start) {\n                let A0 := stateElem(ptr, start)\n                let A1 := stateElem(ptr, add(start, 1))\n                let A2 := stateElem(ptr, add(start, 2))\n                let A3 := stateElem(ptr, add(start, 3))\n                let A4 := stateElem(ptr, add(start, 4))\n\n                setStateElem(ptr, start, xor(A0, and(not(A1), A2)))\n                setStateElem(ptr, add(start, 1), xor(A1, and(not(A2), A3)))\n                setStateElem(ptr, add(start, 2), xor(A2, and(not(A3), A4)))\n                setStateElem(ptr, add(start, 3), xor(A3, and(not(A4), A0)))\n                setStateElem(ptr, add(start, 4), xor(A4, and(not(A0), A1)))\n            }\n\n            // Performs the `chi` step of the Keccak-f[1600] permutation on the passed `StateMatrix` struct memory ptr\n            function chi(ptr) {\n                innerChi(ptr, 0)\n                innerChi(ptr, 5)\n                innerChi(ptr, 10)\n                innerChi(ptr, 15)\n                innerChi(ptr, 20)\n            }\n\n            // Perform the full Keccak-f[1600] permutation on a `StateMatrix` struct memory ptr for a given round.\n            function permute(ptr, roundsPtr, round) {\n                // Theta, Rho, Pi, Chi\n                thetaRhoPi(ptr)\n                chi(ptr)\n                // Iota\n                let roundConst := shr(192, mload(add(roundsPtr, shl(0x03, round))))\n                setStateElem(ptr, 0, xor(stateElem(ptr, 0), roundConst))\n            }\n\n            // Unroll the permutation loop.\n            permute(stateMatrixPtr, rcPtr, 0)\n            permute(stateMatrixPtr, rcPtr, 1)\n            permute(stateMatrixPtr, rcPtr, 2)\n            permute(stateMatrixPtr, rcPtr, 3)\n            permute(stateMatrixPtr, rcPtr, 4)\n            permute(stateMatrixPtr, rcPtr, 5)\n            permute(stateMatrixPtr, rcPtr, 6)\n            permute(stateMatrixPtr, rcPtr, 7)\n            permute(stateMatrixPtr, rcPtr, 8)\n            permute(stateMatrixPtr, rcPtr, 9)\n            permute(stateMatrixPtr, rcPtr, 10)\n            permute(stateMatrixPtr, rcPtr, 11)\n            permute(stateMatrixPtr, rcPtr, 12)\n            permute(stateMatrixPtr, rcPtr, 13)\n            permute(stateMatrixPtr, rcPtr, 14)\n            permute(stateMatrixPtr, rcPtr, 15)\n            permute(stateMatrixPtr, rcPtr, 16)\n            permute(stateMatrixPtr, rcPtr, 17)\n            permute(stateMatrixPtr, rcPtr, 18)\n            permute(stateMatrixPtr, rcPtr, 19)\n            permute(stateMatrixPtr, rcPtr, 20)\n            permute(stateMatrixPtr, rcPtr, 21)\n            permute(stateMatrixPtr, rcPtr, 22)\n            permute(stateMatrixPtr, rcPtr, 23)\n        }\n    }\n\n    /// @notice Absorb a fixed-sized block into the sponge.\n    function absorb(StateMatrix memory _stateMatrix, bytes memory _input) internal pure {\n        assembly {\n            // The input must be 1088 bits long.\n            if iszero(eq(mload(_input), BLOCK_SIZE_BYTES)) { revert(0, 0) }\n\n            let dataPtr := add(_input, 0x20)\n            let statePtr := add(_stateMatrix, 0x20)\n\n            // set a state element in the passed `StateMatrix` struct memory ptr.\n            function setStateElem(ptr, idx, data) {\n                mstore(add(ptr, shl(0x05, idx)), and(data, U64_MASK))\n            }\n\n            // fetch a state element from the passed `StateMatrix` struct memory ptr.\n            function stateElem(ptr, idx) -> elem {\n                elem := mload(add(ptr, shl(0x05, idx)))\n            }\n\n            // Inner sha3 absorb XOR function\n            function absorbInner(stateMatrixPtr, inputPtr, idx) {\n                let boWord := mload(add(inputPtr, shl(3, idx)))\n\n                let res :=\n                    or(\n                        or(\n                            or(shl(56, byte(7, boWord)), shl(48, byte(6, boWord))),\n                            or(shl(40, byte(5, boWord)), shl(32, byte(4, boWord)))\n                        ),\n                        or(\n                            or(shl(24, byte(3, boWord)), shl(16, byte(2, boWord))),\n                            or(shl(8, byte(1, boWord)), byte(0, boWord))\n                        )\n                    )\n                setStateElem(stateMatrixPtr, idx, xor(stateElem(stateMatrixPtr, idx), res))\n            }\n\n            // Unroll the input XOR loop.\n            absorbInner(statePtr, dataPtr, 0)\n            absorbInner(statePtr, dataPtr, 1)\n            absorbInner(statePtr, dataPtr, 2)\n            absorbInner(statePtr, dataPtr, 3)\n            absorbInner(statePtr, dataPtr, 4)\n            absorbInner(statePtr, dataPtr, 5)\n            absorbInner(statePtr, dataPtr, 6)\n            absorbInner(statePtr, dataPtr, 7)\n            absorbInner(statePtr, dataPtr, 8)\n            absorbInner(statePtr, dataPtr, 9)\n            absorbInner(statePtr, dataPtr, 10)\n            absorbInner(statePtr, dataPtr, 11)\n            absorbInner(statePtr, dataPtr, 12)\n            absorbInner(statePtr, dataPtr, 13)\n            absorbInner(statePtr, dataPtr, 14)\n            absorbInner(statePtr, dataPtr, 15)\n            absorbInner(statePtr, dataPtr, 16)\n        }\n    }\n\n    /// @notice Squeezes the final keccak256 digest from the passed `StateMatrix`.\n    function squeeze(StateMatrix memory _stateMatrix) internal pure returns (bytes32 hash_) {\n        assembly {\n            // 64 bit logical shift\n            function shl64(a, b) -> val {\n                val := and(shl(a, b), U64_MASK)\n            }\n\n            // convert a big endian 64-bit value to a little endian 64-bit value.\n            function toLE(beVal) -> leVal {\n                beVal := or(and(shl64(8, beVal), 0xFF00FF00FF00FF00), and(shr(8, beVal), 0x00FF00FF00FF00FF))\n                beVal := or(and(shl64(16, beVal), 0xFFFF0000FFFF0000), and(shr(16, beVal), 0x0000FFFF0000FFFF))\n                leVal := or(shl64(32, beVal), shr(32, beVal))\n            }\n\n            // fetch a state element from the passed `StateMatrix` struct memory ptr.\n            function stateElem(ptr, idx) -> elem {\n                elem := mload(add(ptr, shl(0x05, idx)))\n            }\n\n            let stateMatrixPtr := add(_stateMatrix, 0x20)\n            hash_ :=\n                or(\n                    or(shl(192, toLE(stateElem(stateMatrixPtr, 0))), shl(128, toLE(stateElem(stateMatrixPtr, 1)))),\n                    or(shl(64, toLE(stateElem(stateMatrixPtr, 2))), toLE(stateElem(stateMatrixPtr, 3)))\n                )\n        }\n    }\n\n    /// @notice Pads input data to an even multiple of the Keccak-f[1600] permutation block size, 1088 bits (136 bytes).\n    function pad(bytes calldata _data) internal pure returns (bytes memory padded_) {\n        assembly {\n            padded_ := mload(0x40)\n\n            // Grab the original length of `_data`\n            let len := _data.length\n\n            let dataPtr := add(padded_, 0x20)\n            let endPtr := add(dataPtr, len)\n\n            // Copy the data into memory.\n            calldatacopy(dataPtr, _data.offset, len)\n\n            let modBlockSize := mod(len, BLOCK_SIZE_BYTES)\n            switch modBlockSize\n            case false {\n                // Clean the full padding block. It is possible that this memory is dirty, since solidity sometimes does\n                // not update the free memory pointer when allocating memory, for example with external calls. To do\n                // this, we read out-of-bounds from the calldata, which will always return 0 bytes.\n                calldatacopy(endPtr, calldatasize(), BLOCK_SIZE_BYTES)\n\n                // If the input is a perfect multiple of the block size, then we add a full extra block of padding.\n                mstore8(endPtr, 0x01)\n                mstore8(sub(add(endPtr, BLOCK_SIZE_BYTES), 0x01), 0x80)\n\n                // Update the length of the data to include the padding.\n                mstore(padded_, add(len, BLOCK_SIZE_BYTES))\n            }\n            default {\n                // If the input is not a perfect multiple of the block size, then we add a partial block of padding.\n                // This should entail a set bit after the input, followed by as many zero bits as necessary to fill\n                // the block, followed by a single 1 bit in the lowest-order bit of the final block.\n\n                let remaining := sub(BLOCK_SIZE_BYTES, modBlockSize)\n                let newLen := add(len, remaining)\n                let paddedEndPtr := add(dataPtr, newLen)\n\n                // Clean the remainder to ensure that the intermediate data between the padding bits is 0. It is\n                // possible that this memory is dirty, since solidity sometimes does not update the free memory pointer\n                // when allocating memory, for example with external calls. To do this, we read out-of-bounds from the\n                // calldata, which will always return 0 bytes.\n                let partialRemainder := sub(paddedEndPtr, endPtr)\n                calldatacopy(endPtr, calldatasize(), partialRemainder)\n\n                // Store the padding bits.\n                mstore8(sub(paddedEndPtr, 0x01), 0x80)\n                mstore8(endPtr, or(byte(0x00, mload(endPtr)), 0x01))\n\n                // Update the length of the data to include the padding. The length should be a multiple of the\n                // block size after this.\n                mstore(padded_, newLen)\n            }\n\n            // Update the free memory pointer.\n            mstore(0x40, add(padded_, and(add(mload(padded_), 0x3F), not(0x1F))))\n        }\n    }\n\n    /// @notice Pads input data to an even multiple of the Keccak-f[1600] permutation block size, 1088 bits (136 bytes).\n    function padMemory(bytes memory _data) internal pure returns (bytes memory padded_) {\n        assembly {\n            padded_ := mload(0x40)\n\n            // Grab the original length of `_data`\n            let len := mload(_data)\n\n            let dataPtr := add(padded_, 0x20)\n            let endPtr := add(dataPtr, len)\n\n            // Copy the data.\n            let originalDataPtr := add(_data, 0x20)\n            for { let i := 0x00 } lt(i, len) { i := add(i, 0x20) } {\n                mstore(add(dataPtr, i), mload(add(originalDataPtr, i)))\n            }\n\n            let modBlockSize := mod(len, BLOCK_SIZE_BYTES)\n            switch modBlockSize\n            case false {\n                // Clean the full padding block. It is possible that this memory is dirty, since solidity sometimes does\n                // not update the free memory pointer when allocating memory, for example with external calls. To do\n                // this, we read out-of-bounds from the calldata, which will always return 0 bytes.\n                calldatacopy(endPtr, calldatasize(), BLOCK_SIZE_BYTES)\n\n                // If the input is a perfect multiple of the block size, then we add a full extra block of padding.\n                mstore8(sub(add(endPtr, BLOCK_SIZE_BYTES), 0x01), 0x80)\n                mstore8(endPtr, 0x01)\n\n                // Update the length of the data to include the padding.\n                mstore(padded_, add(len, BLOCK_SIZE_BYTES))\n            }\n            default {\n                // If the input is not a perfect multiple of the block size, then we add a partial block of padding.\n                // This should entail a set bit after the input, followed by as many zero bits as necessary to fill\n                // the block, followed by a single 1 bit in the lowest-order bit of the final block.\n\n                let remaining := sub(BLOCK_SIZE_BYTES, modBlockSize)\n                let newLen := add(len, remaining)\n                let paddedEndPtr := add(dataPtr, newLen)\n\n                // Clean the remainder to ensure that the intermediate data between the padding bits is 0. It is\n                // possible that this memory is dirty, since solidity sometimes does not update the free memory pointer\n                // when allocating memory, for example with external calls. To do this, we read out-of-bounds from the\n                // calldata, which will always return 0 bytes.\n                let partialRemainder := sub(paddedEndPtr, endPtr)\n                calldatacopy(endPtr, calldatasize(), partialRemainder)\n\n                // Store the padding bits.\n                mstore8(sub(paddedEndPtr, 0x01), 0x80)\n                mstore8(endPtr, or(byte(0x00, mload(endPtr)), 0x01))\n\n                // Update the length of the data to include the padding. The length should be a multiple of the\n                // block size after this.\n                mstore(padded_, newLen)\n            }\n\n            // Update the free memory pointer.\n            mstore(0x40, add(padded_, and(add(mload(padded_), 0x3F), not(0x1F))))\n        }\n    }\n}\n"
    },
    "src/cannon/libraries/CannonTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nusing LPPMetadataLib for LPPMetaData global;\n\n/// @notice Packed LPP metadata.\n/// ┌─────────────┬────────────────────────────────────────────┐\n/// │ Bit Offsets │                Description                 │\n/// ├─────────────┼────────────────────────────────────────────┤\n/// │ [0, 64)     │ Timestamp (Finalized - All data available) │\n/// │ [64, 96)    │ Part Offset                                │\n/// │ [96, 128)   │ Claimed Size                               │\n/// │ [128, 160)  │ Blocks Processed (Inclusive of Padding)    │\n/// │ [160, 192)  │ Bytes Processed (Non-inclusive of Padding) │\n/// │ [192, 256)  │ Countered                                  │\n/// └─────────────┴────────────────────────────────────────────┘\ntype LPPMetaData is bytes32;\n\n/// @notice LPP metadata UDT extension functions.\nlibrary LPPMetadataLib {\n    uint256 private constant U64_MASK = 0xFFFFFFFFFFFFFFFF;\n    uint256 private constant U32_MASK = 0xFFFFFFFF;\n\n    function setTimestamp(LPPMetaData _self, uint64 _timestamp) internal pure returns (LPPMetaData self_) {\n        assembly {\n            self_ := or(shl(192, _timestamp), and(_self, not(shl(192, U64_MASK))))\n        }\n    }\n\n    function setPartOffset(LPPMetaData _self, uint32 _partOffset) internal pure returns (LPPMetaData self_) {\n        assembly {\n            self_ := or(shl(160, _partOffset), and(_self, not(shl(160, U32_MASK))))\n        }\n    }\n\n    function setClaimedSize(LPPMetaData _self, uint32 _claimedSize) internal pure returns (LPPMetaData self_) {\n        assembly {\n            self_ := or(shl(128, _claimedSize), and(_self, not(shl(128, U32_MASK))))\n        }\n    }\n\n    function setBlocksProcessed(LPPMetaData _self, uint32 _blocksProcessed) internal pure returns (LPPMetaData self_) {\n        assembly {\n            self_ := or(shl(96, _blocksProcessed), and(_self, not(shl(96, U32_MASK))))\n        }\n    }\n\n    function setBytesProcessed(LPPMetaData _self, uint32 _bytesProcessed) internal pure returns (LPPMetaData self_) {\n        assembly {\n            self_ := or(shl(64, _bytesProcessed), and(_self, not(shl(64, U32_MASK))))\n        }\n    }\n\n    function setCountered(LPPMetaData _self, bool _countered) internal pure returns (LPPMetaData self_) {\n        assembly {\n            self_ := or(_countered, and(_self, not(U64_MASK)))\n        }\n    }\n\n    function timestamp(LPPMetaData _self) internal pure returns (uint64 timestamp_) {\n        assembly {\n            timestamp_ := shr(192, _self)\n        }\n    }\n\n    function partOffset(LPPMetaData _self) internal pure returns (uint64 partOffset_) {\n        assembly {\n            partOffset_ := and(shr(160, _self), U32_MASK)\n        }\n    }\n\n    function claimedSize(LPPMetaData _self) internal pure returns (uint32 claimedSize_) {\n        assembly {\n            claimedSize_ := and(shr(128, _self), U32_MASK)\n        }\n    }\n\n    function blocksProcessed(LPPMetaData _self) internal pure returns (uint32 blocksProcessed_) {\n        assembly {\n            blocksProcessed_ := and(shr(96, _self), U32_MASK)\n        }\n    }\n\n    function bytesProcessed(LPPMetaData _self) internal pure returns (uint32 bytesProcessed_) {\n        assembly {\n            bytesProcessed_ := and(shr(64, _self), U32_MASK)\n        }\n    }\n\n    function countered(LPPMetaData _self) internal pure returns (bool countered_) {\n        assembly {\n            countered_ := and(_self, U64_MASK)\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "@openzeppelin/contracts-v5/=lib/openzeppelin-contracts-v5/contracts/",
      "@rari-capital/solmate/=lib/solmate/",
      "@lib-keccak/=lib/lib-keccak/contracts/lib/",
      "@solady/=lib/solady/src/",
      "@solady-v0.0.245/=lib/solady-v0.0.245/src/",
      "forge-std/=lib/forge-std/src/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "safe-contracts/=lib/safe-contracts/contracts/",
      "kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/",
      "interfaces/=interfaces/",
      "@solady-test/=lib/lib-keccak/lib/solady/test/",
      "erc4626-tests/=lib/openzeppelin-contracts-v5/lib/erc4626-tests/",
      "lib-keccak/=lib/lib-keccak/contracts/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "solady-v0.0.245/=lib/solady-v0.0.245/src/",
      "solady/=lib/solady/",
      "solmate/=lib/solmate/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "none",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "cancun",
    "viaIR": false,
    "libraries": {}
  }
}}